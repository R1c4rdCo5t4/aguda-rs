auto

lifetime 'lt

terminals ; , -> + - * / ^ == != < <= > >= && || ! [ ] ( )
# terminals WHILE LET SET IF THEN ELSE DO NEW INTTYPE BOOLTYPE STRINGTYPE UNITTYPE UNIT true false null

lexterminal WHILE while
lexterminal LET let
lexterminal SET set
lexterminal IF if
lexterminal THEN then
lexterminal ELSE else
lexterminal DO do
lexterminal NEW new
lexterminal INTTYPE Int
lexterminal BOOLTYPE Bool
lexterminal STRINGTYPE String
lexterminal UNITTYPE Unit
lexterminal UNIT unit
lexterminal TRUE true
lexterminal FALSE false
lexterminal NULL null

# reserved operators
lexterminal COLON :
lexterminal MOD %
lexterminal PIPE |
lexterminal ASSIGN =
lexterminal OR ||

# uses regex matching
valterminal STRING string literal
valueterminal NUM ~ i64 ~ Num(n) ~ n
valueterminal ID ~ &'lt str ~ Alphanum(n) ~ n
lexattribute set_line_comment("--")

nonterminal Program
nonterminal Decl
nonterminal DeclVar : Decl
nonterminal DeclFun : Decl
nonterminal ParamList
nonterminal Type
nonterminal FunType
nonterminal ArrayType
nonterminal BaseType
nonterminal TypeList
nonterminal Expr
nonterminal Chain : Expr
nonterminal ChainTail
nonterminal Stmt : Expr
nonterminal If : Expr
nonterminal Else
nonterminal Or : Expr
nonterminal And : Expr
nonterminal Comp : Expr
nonterminal AddSub : Expr
nonterminal MulDiv : Expr
nonterminal Pow : Expr
nonterminal Unary : Expr
nonterminal Primary : Expr
nonterminal FunCall : Expr
nonterminal Literal : Expr
nonterminal Lhs : Expr
nonterminal ExprList : Expr

# precedence and associativity of operators
right ; 1
right -> 1
nonassoc ELSE 2
nonassoc IF 3
nonassoc WHILE 3
left || 4
left && 5
left == 6
left != 6
nonassoc < 7
nonassoc <= 7
nonassoc > 7
nonassoc >= 7
left + 8
left - 8
left * 9
left / 9
left MOD 9
left ^ 10
right ! 11
right - 11

startsymbol Program
resync ;

Program --> Decl*
Decl --> DeclVar | DeclFun
DeclVar --> LET ID COLON Type ASSIGN Expr
DeclFun --> LET ID ( ParamList ) COLON FunType ASSIGN Expr
ParamList --> ID (, ID)*

Type --> BaseType | Type [ ]
BaseType --> INTTYPE | BOOLTYPE | UNITTYPE | STRINGTYPE
FunType --> ( TypeList ) -> Type | Type -> Type
TypeList --> Type (, Type)*

Expr --> Chain
Chain --> Stmt ChainTail
ChainTail --> ; Stmt ChainTail | # ε
Stmt --> LET ID COLON Type ASSIGN Expr | SET Lhs ASSIGN Expr | WHILE Expr DO Expr | NEW Type [ Expr PIPE Expr ] | If
If --> IF Expr THEN Expr Else | Or
Else --> ELSE Expr | # ε
Or --> Or OR And | And
And --> And && Comp | Comp
Comp --> Comp == AddSub | Comp != AddSub | Comp < AddSub | Comp <= AddSub | Comp > AddSub | Comp >= AddSub | AddSub
AddSub --> AddSub + MulDiv | AddSub - MulDiv | MulDiv
MulDiv --> MulDiv * Unary | MulDiv / Unary | MulDiv MOD Unary | Unary
Pow --> Primary ^ Unary | Primary
Unary --> ! Unary | - Unary | Pow
Primary --> ( Expr ) | FunCall | Literal | Lhs
FunCall --> ID ( ExprList )
Lhs --> ID ([ Expr ])*
Literal --> NUM | STRING | TRUE | FALSE | NULL | UNIT
ExprList --> Expr (, Expr)*