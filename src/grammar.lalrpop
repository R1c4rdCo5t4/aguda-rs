use crate::syntax::ast::*;
use crate::syntax::lexer::Token;

grammar;

// top-level rule that parses an entire aguda program as a sequence of declarations
pub Program: Program = {
    <decls:Spanned<Decl>*> => Program { decls },
}

Decl: Decl = {
    DeclVar,
    DeclFun,
}

DeclVar: Decl = {
    "let" <id:Spanned<Id>> ":" <ty:Spanned<Type>> "=" <expr:Spanned<Expr>> => Decl::Var { id, ty, expr },
}

DeclFun: Decl = {
    "let" <id:Spanned<Id>>
        "(" <params:IdList> ")"
        ":" <ty:Spanned<FunType>>
        "=" <expr:Spanned<Expr>>
    => Decl::Fun { id, params, ty, expr },
}

Expr: Expr = {
    ChainExpr,
}

ChainExpr: Expr = {
    // right associative
    <lhs:Spanned<StmtExpr>> ";" <rhs:Spanned<ChainExpr>> => Expr::Chain { lhs: Box::new(lhs), rhs: Box::new(rhs) },
    StmtExpr,
}

// https://en.wikipedia.org/wiki/Dangling_else#Avoiding_the_conflict_in_LR_parsers
StmtExpr: Expr = {
    StmtOpen,
    StmtClosed
}

StmtOpen: Expr = {
    "if" <cond:Spanned<Expr>> "then" <then:Spanned<StmtExpr>> <unit:Spanned<()>> =>
        Expr::IfElse { cond: Box::new(cond), then: Box::new(then), els: Box::new(Spanned { value: Expr::Unit, span: unit.span }) },
    "if" <cond:Spanned<Expr>> "then" <then:Spanned<StmtClosed>> "else" <els:Spanned<StmtOpen>> =>
        Expr::IfElse { cond: Box::new(cond), then: Box::new(then), els: Box::new(els) },
    "let" <id:Spanned<Id>> ":" <ty:Spanned<Type>> "=" <expr:Spanned<StmtOpen>> => Expr::Let { id, ty, expr: Box::new(expr) },
    "set" <lhs:Spanned<Lhs>> "=" <expr:Spanned<StmtOpen>> => Expr::Set { lhs, expr: Box::new(expr) },
    "while" <cond:Spanned<Expr>> "do" <expr:Spanned<StmtOpen>> => Expr::While { cond: Box::new(cond), expr: Box::new(expr) },
}

StmtClosed: Expr = {
    "if" <cond:Spanned<Expr>> "then" <then:Spanned<StmtClosed>> "else" <els:Spanned<StmtClosed>> =>
        Expr::IfElse { cond: Box::new(cond), then: Box::new(then), els: Box::new(els) },
    "let" <id:Spanned<Id>> ":" <ty:Spanned<Type>> "=" <expr:Spanned<StmtClosed>> => Expr::Let { id, ty, expr: Box::new(expr) },
    "set" <lhs:Spanned<Lhs>> "=" <expr:Spanned<StmtClosed>> => Expr::Set { lhs, expr: Box::new(expr) },
    "while" <cond:Spanned<Expr>> "do" <expr:Spanned<StmtClosed>> => Expr::While { cond: Box::new(cond), expr: Box::new(expr) },
    NewExpr,
}

NewExpr: Expr = {
    "new" <ty:SpannedType> "[" <size:Spanned<Expr>> "|" <init:Spanned<Expr>> "]" =>
        Expr::NewArray { ty, size: Box::new(size), init: Box::new(init) },
    OrExpr,
}

OrExpr: Expr = {
    // left associative
    <lhs:Spanned<OrExpr>> "||" <rhs:Spanned<AndExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Or, rhs: Box::new(rhs) },
    AndExpr,
}

AndExpr: Expr = {
    // left associative
    <lhs:Spanned<AndExpr>> "&&" <rhs:Spanned<EqExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::And, rhs: Box::new(rhs) },
    EqExpr,
}

EqExpr: Expr = {
    // left associative
    <lhs:Spanned<EqExpr>> "==" <rhs:Spanned<RelExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Eq, rhs: Box::new(rhs) },
    <lhs:Spanned<EqExpr>> "!=" <rhs:Spanned<RelExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Neq, rhs: Box::new(rhs) },
    RelExpr,
}

RelExpr: Expr = {
    // non associative
    <lhs:Spanned<AddSubExpr>> "<"  <rhs:Spanned<AddSubExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Lt, rhs: Box::new(rhs) },
    <lhs:Spanned<AddSubExpr>> "<=" <rhs:Spanned<AddSubExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Leq, rhs: Box::new(rhs) },
    <lhs:Spanned<AddSubExpr>> ">"  <rhs:Spanned<AddSubExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Gt, rhs: Box::new(rhs) },
    <lhs:Spanned<AddSubExpr>> ">=" <rhs:Spanned<AddSubExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Geq, rhs: Box::new(rhs) },
    AddSubExpr,
}

AddSubExpr: Expr = {
    // left associative
    <lhs:Spanned<AddSubExpr>> "+" <rhs:Spanned<MulDivExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Add, rhs: Box::new(rhs) },
    <lhs:Spanned<AddSubExpr>> "-" <rhs:Spanned<MulDivExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Sub, rhs: Box::new(rhs) },
    MulDivExpr,
}

MulDivExpr: Expr = {
    // left associative
    <lhs:Spanned<MulDivExpr>> "*" <rhs:Spanned<PowExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Mul, rhs: Box::new(rhs) },
    <lhs:Spanned<MulDivExpr>> "/" <rhs:Spanned<PowExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Div, rhs: Box::new(rhs) },
    <lhs:Spanned<MulDivExpr>> "%" <rhs:Spanned<PowExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Mod, rhs: Box::new(rhs) },
    PowExpr,
}

PowExpr: Expr = {
    // right associative
    <lhs:Spanned<UnaryExpr>> "^" <rhs:Spanned<PowExpr>> => Expr::BinOp { lhs: Box::new(lhs), op: Op::Pow, rhs: Box::new(rhs) },
    UnaryExpr,
}

UnaryExpr: Expr = {
    // highest precedence
    <zero:Spanned<()>> "-" <e:Spanned<UnaryExpr>> => Expr::BinOp {
        lhs: Box::new(Spanned { value: Expr::Int(0), span: zero.span }), op: Op::Sub, rhs: Box::new(e)
    },
    "!" <e:Spanned<UnaryExpr>> => Expr::Not { expr: Box::new(e) },
    BaseExpr,
}

BaseExpr: Expr = {
    <id:Spanned<Id>> "(" <args:ExprList> ")" => Expr::FunCall { id, args },
    <lhs:Spanned<Lhs>> "[" <index:Spanned<Expr>> "]" => Expr::ArrayIndex { lhs, index: Box::new(index) },
    <id:Spanned<Id>> => Expr::Id(id),
    "(" <e:Expr> ")" => e,
    LiteralExpr,
}

LiteralExpr: Expr = {
    "string" => Expr::String(<>.to_string()),
    "int"    => Expr::Int(<>.to_string().parse().unwrap()),
    "true"   => Expr::Bool(true),
    "false"  => Expr::Bool(false),
    "unit"   => Expr::Unit,
}

Lhs: Lhs = {
    <id:Spanned<Id>> => Lhs::Var { id }, // variable
    <lhs:Spanned<Lhs>> "[" <index:Spanned<Expr>> "]" => Lhs::Index { lhs: Box::new(lhs), index: Box::new(index) }, // array index
}

// comma separated list with at least one element
#[inline]
List<T>: Vec<T> = {
    <head:T> <tail:(("," T))*> => {
        let mut v = vec![head];
        for (_, t) in tail {
            v.push(t);
        }
        v
    }
}

#[inline]
Id: String = {
    "id" => <>.to_string(),
}

#[inline]
IdList: Vec<Spanned<Id>> = List<Spanned<Id>>;

#[inline]
TypeList: Vec<Type> = List<Type>;

#[inline]
ExprList: Vec<Spanned<Expr>> = List<Spanned<Expr>>;

Type: Type = ArrowType;

ArrowType: Type = {
    FunType => Type::Fun(<>),
    SimpleType,
}

FunType: FunType = {
    "(" <params:TypeList> ")" "->" <ret:ArrowType> => FunType { params, ret: Box::new(ret) },
    <param:SimpleType> "->" <ret:ArrowType> => FunType { params: vec![param], ret: Box::new(ret) },
}

SimpleType: Type = {
    <base:BaseType> <dims:("[" "]")*> => dims.into_iter().fold(base, |acc, _| Type::Array(Box::new(acc))),
}

#[inline]
BaseType: Type = {
    "Int"    => Type::Int,
    "Bool"   => Type::Bool,
    "String" => Type::String,
    "Unit"   => Type::Unit,
}

#[inline]
Spanned<T>: Spanned<T> = <l:@L> <t:T> <r:@R> => Spanned { value: t, span: l..r };

#[inline]
SpannedType: Spanned<Type> = {
    <l:@L> <base:BaseType> <dims:("[" "]")*> <r:@R> =>
        Spanned {
            value: dims.into_iter().fold(base, |acc, _| Type::Array(Box::new(acc))),
            span: l..r
        }
}

extern {
    type Location = usize;
    type Error = String;

    // map lexer tokens
    enum Token {
        "id"     => Token::Id(<String>),
        "int"    => Token::Int(<i64>),
        "string" => Token::String(<String>),
        "true"   => Token::True,
        "false"  => Token::False,
        "unit"   => Token::Unit,
        ";"      => Token::Semicolon,
        "+"      => Token::Plus,
        "-"      => Token::Minus,
        "*"      => Token::Multiply,
        "/"      => Token::Divide,
        "%"      => Token::Modulo,
        "^"      => Token::Power,
        "=="     => Token::Equal,
        "!="     => Token::NotEqual,
        "<"      => Token::Less,
        "<="     => Token::LessOrEqual,
        ">"      => Token::Greater,
        ">="     => Token::GreaterOrEqual,
        "!"      => Token::Not,
        "||"     => Token::Or,
        "&&"     => Token::And,
        "("      => Token::LeftParen,
        ")"      => Token::RightParen,
        "["      => Token::LeftBracket,
        "]"      => Token::RightBracket,
        ","      => Token::Comma,
        "set"    => Token::Set,
        "let"    => Token::Let,
        ":"      => Token::Colon,
        "="      => Token::Assign,
        "->"     => Token::Arrow,
        "if"     => Token::If,
        "then"   => Token::Then,
        "else"   => Token::Else,
        "while"  => Token::While,
        "do"     => Token::Do,
        "new"    => Token::New,
        "|"      => Token::Pipe,
        "Int"    => Token::IntType,
        "Bool"   => Token::BoolType,
        "String" => Token::StringType,
        "Unit"   => Token::UnitType,
    }
}
