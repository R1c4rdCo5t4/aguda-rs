//Parser generated by rustlr for grammar aguda
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::aguda_ast::*;

static SYMBOLS:[&'static str;85] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","||","!","[","]","(",")","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","INTTYPE","BOOLTYPE","STRINGTYPE","UNITTYPE","UNIT","TRUE","FALSE","NULL","COLON","MOD","PIPE","ASSIGN","OR","STRING","NUM","ID","Program","Decl","DeclVar","DeclFun","ParamList","Type","FunType","ArrayType","BaseType","TypeList","Expr","Chain","ChainTail","Stmt","If","Else","Or","And","Comp","AddSub","MulDiv","Pow","Unary","Primary","FunCall","Literal","Lhs","ExprList","NEWRENT_1_0","NEWSEQNT_8_0","NEWRENT_9_1","NEWSEQNT_20_0","NEWRENT_21_1","NEWSEQNT_65_0","NEWRENT_66_1","NEWSEQNT_75_0","NEWRENT_76_1","START","EOF"];

static TABLE:[u64;1919] = [197568626689,360777318402,98784313346,317827645441,281835753963522,281676840501249,281685430501377,281681135337473,281573761220608,563310730674179,844785707581442,844523714576386,1126093180829696,1407735660937218,1407473667932162,1689210637778946,1688948644773890,1970410736910336,1970488046256128,2251932958392320,2252031742902273,2251941548457984,2252018857672705,2251928663621632,2251937253425152,2533489539809281,2533468065038336,2814925861945344,2814827077763072,3096237629636610,3096314939047938,3096233334669314,3096400838393858,3096302054146050,3377875815235586,3377777030987778,3377789915889666,3377712606478338,3377708311511042,3659252007632898,3659187583123458,3659350791880706,3659264892534786,3659183288156162,3940739869114370,3940825768460290,3940726984212482,3940662559703042,3940658264735746,4222137536282626,4222214845693954,4222201960792066,4222133241315330,4222300745039874,4503689822994432,4785401022971905,4785083194605570,4785164798984194,5066824460140545,5066820166352897,5066828755304449,5066854526550017,5066699906351104,5066833050140673,5066635482103808,5066648367595520,5066656957923328,5066794397138945,5066837346615297,5066742855892992,5066850230599681,5066571058315264,5066652662366208,5066734266417152,5066815871516673,5066841641385985,5066695611973632,5066845935435777,5066790101450753,5066704202498048,5066738562695168,5066622597398528,5066807280664577,5066802987139073,5066644072497152,5066674136612864,5066708497727488,5066858820665345,5348106165288960,5629662746443776,5911296637009921,5911064705695746,5910983104462848,6192488146272256,6192569749274626,6192539684503554,6192629878816770,6192453785157634,6192458080124930,6192505325879296,6192531094568962,6192548274438146,6192496736010240,6192565454307330,6192621288882178,6192561159340034,6192492441305088,6192513914699778,6192810267443202,6192501031043072,6192509621043200,6474091972132864,6473950238277632,6474104856182786,6473945942392834,6474036136706050,6474285244809218,6473988892065794,6473928762523650,6474014661869570,6474006071934978,6473976007163906,6473933057490946,6473967417229314,6473984597098498,6473963122262018,6473954533310464,6474044726640642,6473941647425538,6473980302131202,6473971712196610,6474040431673346,6474096266248194,6474023251804162,6755416625250306,6755463869890562,6755511114530818,6755433805119490,6755515409498114,6755566949105666,6755438100086786,6755403740348418,6755485344727040,6755429510152194,6755760222633986,6755481049759746,6755446690021378,6755408035315714,6755442395054082,6755579834007554,6755489639694338,6755743042699265,6755425215184898,6755498229628930,6755420920217602,6755455279955970,6755519704465410,6755450984988674,6755571244072962,6755476754792450,6755459574923266,7036956025159682,7036938845290498,7036934550323202,7036883010715650,7036913075486722,7036921665421314,7036925960388610,7037054809407490,7036878715748354,7036930255355906,7036986089930754,7036973205028866,7036990384898050,7036917370454018,7037235198033922,7036994679865346,7036891602026496,7036895897059328,7037046219472898,7036964615094274,7318357988999170,7318383758802946,7318465363181570,7318448183312386,7318405233639426,7318413823574018,7318400938672130,7318370873901058,7318366578933762,7318516902789122,7318375168868354,7318409528606722,7318431003443202,7318353694031874,7318388053770242,7318396643704834,7318529787691010,7318521197756418,7318392348737538,7318461068214274,7318469658148866,7318710176317442,7318439593377794,7318379463835650,7600043419041793,7599966105960448,7599961810927616,7599957515894784,7600056300404737,7599953221124096,7881411019079682,7881398134177794,7881380954308610,7881415314046978,7881307939864578,7881303644897282,7881389544243202,7881660127182850,7881419609014274,7881471148621826,8162778623180802,8162885997363202,8162941831938050,8162838752722946,8162834457755650,8162791508082690,8162946126905346,8162808688934912,8162825867821058,8162782918148098,8162830162788354,8162821572853762,8163135105466370,8162812982919170,8162954716839938,8162800098017282,8162855932592130,8162873112461314,8162890292330498,8162817277886466,8162804392984578,8162795803049986,8162894587297794,8162864522526722,8444356678451200,8444507001192449,8444494117666817,8444395332501504,8444322317926400,8444537067143169,8444335202631680,8444403923025920,8444270778843136,8444343793025024,8444524180668417,8444408218255360,8444515592044545,8444399626878976,8444558541193217,8444373857140736,8444442576420864,8444528475832321,8444502707666945,8444519886880769,8444541361913857,8444545655963649,8444554247077889,8444438283223040,8444433986945024,8444348088123392,8444549951127553,8444532770668545,8444489824141313,8444352382894080,8725762937257986,8726085059805186,8725788707061762,8725771527192578,8725758642290690,8725775822159874,8725750052356098,8725814476865538,8725784412094466,8725745757388802,8725732872486914,8725741462421506,8725754347323394,8725823066800130,8725891786276866,8725780117127170,8725728577519618,8725896081244162,8725805886930946,8725835951702018,8725844541636610,8725840246669314,8725904671178754,8725767232225282,9007315222790146,9007259388215298,9007233618411522,9007207848607746,9007216438542338,9007310927822850,9007255093248002,9007237913378818,9007371057364994,9007242208346114,9007225028476930,9007250798280706,9007379647299586,9007289452986370,9007220733509634,9007298042920962,9007560035926018,9007263683182594,9007229323444226,9007280863051778,9007319517757442,9007203553640450,9007246503313410,9007366762397698,9288983471325185,9288974881259521,9288858917076992,9288820262633472,9288760132763648,9288970586095617,9288961997275137,9288863213355008,9288828853157888,9288747248058368,9288833148387328,9288979177209857,9288824557010944,9288867506552832,9288695708975104,9288966293946369,9570166392094722,9570230816604162,9570260881375234,9570192161898498,9570200751833090,9570329600851970,9570209341767682,9570265176342530,9570205046800386,9570509989478402,9570157802160130,9570183571963906,9570174982029314,9570316715950082,9570321010917378,9570187866931202,9570179276996610,9570269471309826,9570247996473346,9570239406538754,9570213636734978,9570170687062018,9570196456865794,9570153507192834,9851680024231938,9851984966909954,9851671434297346,9851688614166530,9851649959460866,9851735858806786,9851675729264642,9851628484624386,9851740153774082,9851722973904898,9851632779591682,9851658549395458,9851744448741378,9851641369526274,9851795988348930,9851667139330050,9851705794035714,9851662844362754,9851804578283522,9851684319199234,9851654254428162,9851714383970306,9851791693381634,9851645664493570,10133292439896064,10133408404078593,10414681515425792,10414814661378049,10414831838167041,10414660039606272,10414767413395456,10414763120197632,10414827544641537,10414595615817728,10414668629999616,10414844723855361,10414849017643009,10414677219868672,10414758823919616,10414870492938241,10414866198888449,10414728760000512,10414861904117761,10414720169476096,10414724463853568,10414672925097984,10414883378167809,10414647154900992,10414818954641409,10414840429019137,10414733055229952,10414857607643137,10414853312806913,10414874788102145,10414698694115328,10414879084052481,10696409892585474,10696147899580418,10977717370224640,11259003365818370,11259170869542914,11259110740000770,11259007660785666,11259179459477506,11259119329935362,11259063497981952,11259097855098882,11259089265164290,11259359848103938,11259080675229698,11259115034968066,11540766108024833,11540628666843136,11540547061743616,11540632962072576,11540770399780865,11540658730762240,11540495522660352,11540624370696192,11540774694944769,11540663027040256,11540620076318720,11540559946448896,11540761810960385,11540778990895105,11540667320238080,11540783285010433,11822030628388866,11822064988127234,11821957613944834,11822039218323458,11822060693159938,11822309801263106,11822120822702082,11821953318977538,11822129415651328,11822047808258050,11822069283094530,12103449771835394,12103488426541058,12103484131573762,12103604390658050,12103505606410242,12103466951704578,12103441181900802,12103544261115906,12103514196344834,12103462656737282,12103475541639170,12103591505756162,12103454066802690,12103428296998914,12103535671181314,12103522786279426,12103445476868098,12103784779284482,12103432591966210,12103595800723458,12103479836606466,12103471246671874,12103539966148610,12384946224562178,12384929044692994,12384950519529474,12384941929594882,12384980584300546,12384924749725698,12384916159791106,12385259757174786,12384954814496770,12385066483646466,12384937634627586,12384963404431362,12384907569856514,12384959109464066,12384903274889218,12384933339660290,12385014944038914,12384989174235138,12385079368548354,12384997764169730,12384920454758402,12385019239006210,12385070778613762,12385010649071618,12666614475390977,12666666012573697,12666477033553920,12666644537540609,12666481329111040,12666532868915200,12666683191853057,12666648831328257,12666468443684864,12666519983161344,12666395429502976,12666562933882880,12666618768326657,12666661717803009,12666524277538816,12666640242704385,12666627358326785,12666558637604864,12666631651852289,12666498507800576,12666657421328385,12666446968586240,12666528573685760,12666670306623489,12666472738783232,12666653126492161,12666567227080704,12666678897737729,12666674601787393,12666459853291520,12947857522425858,12947891882164226,12947896177131522,12947878997262338,12947964896608258,12947904767066114,12948016436215810,12947887587196930,12947913357000706,12947874702295042,12947870407327746,12947909062033410,12947930536869890,12948029321117698,12947900472098818,12947947716739074,12947939126804482,12947960601640962,12948209709744130,12947853227458562,12948020731183106,12947969191575554,12947866112360450,13229384038940674,13229435578548226,13229495708090370,13229345384235010,13229444168482818,13229349679202306,13229358269136898,13229328204365826,13229439873515522,13229366859071490,13229684686651394,13229388333907970,13229491413123074,13229414103711746,13229362564104194,13229353974169602,13229332499333122,13229405513777154,13229371154038786,13229341089267714,13229422693646338,13229375449006082,13229379743973378,13229504298024962,13510970685521922,13510914850947074,13510919145914370,13510841836503042,13510803181797378,13510979275456514,13510850426437634,13510889081143298,13510897671077890,13510837541535746,13510910555979778,13511159664082946,13510854721404930,13510820361666562,13510816066699266,13510824656633858,13510863311339522,13510859016372226,13510807476764674,13510846131470338,13510828951601154,13510966390554626,13510880491208706,13510833246568450,13792355464708098,13792385529479170,13792372644577282,13792389824446466,13792445659021314,13792634637582338,13792364054642690,13792278155296770,13792394119413762,13792282450264066,14073839031549954,14073847621484546,14073757427171330,14074109614489602,14073860506386434,14073830441615362,14073869096321026,14073920635928578,14073753135874048,14073997948944385,14073864801353730,14355288241209346,14355249586503682,14355335485849602,14355283946242050,14355584593952770,14355305421078530,14355275356307458,14355314011013122,14355232406634498,14355279651274754,14355228111667202,14355253881470978,14355262471405570,14355245291536386,14355266766372866,14355240996569090,14355271061340162,14355322600947714,14355258176438274,14355395615391746,14355339780816898,14355344075784194,14355404205326338,14355391320424450,14636776099151874,14636707379675138,14636711674642434,14636874883399682,14636788984053762,14918302615601152,14918311205404672,14918259670581248,14918392814501889,14918405694881793,14918306910371840,14918315500437504,14918397109403649,15199738937344002,15199657332965378,15481316998250496,15762787677700096,15762620173320192,15762895050440705,15762684597108736,15762882165145601,15762877874372609,15762899345604609,15762907935670273,15762903641554945,15762890756390913,15762744726978560,15762753317502976,15762783381422080,15762749021356032,15762886461620225,15762757612732416,15762791970897920,15762671712403456,16044357141856257,16044266947608576,16044146689114112,16044352851148801,16044228294213632,16044382912380929,16044232589443072,16044365733101569,16044095150030848,16044258358132736,16044361438330881,16044374322315265,16044262654410752,16044159573819392,16044219703689216,16044370027151361,16044223998066688,16044378618265601,16325849299025921,16325853594976257,16325827827924993,16325857889091585,16325707566153728,16325840709812225,16325694680399872,16325733334843392,16325845003862017,16325741924319232,16325634550530048,16325698974777344,16325570126741504,16325836415041537,16325832118566913,16325621665824768,16325703270924288,16325737631121408,16607315686522881,16607096642535424,16607109527240704,16607173951488000,16607332865802241,16607208311554048,16607324275736577,16607182542864384,16607169657110528,16607212607832064,16607302804701185,16607216901029888,16607045103452160,16607328571686913,16607178247634944,16607311391752193,16607307095277569,16607319980572673,16888520080162816,16888571619246080,16888687584542720,16888691877740544,16888648928198656,16888786368462849,16888653224345600,16888794957283329,16888644633821184,16888803548397569,16888683288264704,16888790663233537,16888782071988225,16888799252447233,16888584503951360,16888777781477377,16888657519575040,16888807842512897,17170261345173505,17170119610531840,17170269933993985,17170252758253569,17170257048698881,17170265639944193,17170158264975360,17170128201056256,17170123904909312,17170278525108225,17170282819223553,17170059480662016,17170166854451200,17170162561253376,17170274229157889,17169995056873472,17170132496285696,17170046595956736,17451534457372672,17451740619931649,17451637537964032,17451598881619968,17451744910704641,17451633241686016,17451607472996352,17451521572667392,17451749205868545,17451757795934209,17451736321884161,17451641831161856,17451594587242496,17451470033584128,17451753501818881,17451603177766912,17733112514674688,17733069563953152,17733078154477568,17732996549378048,17733224182579201,17733232772644865,17733116807872512,17733228478529537,17733215596707841,17733211298594817,17733082449707008,17733009434083328,17733219887415297,17732945010294784,17733108218396672,17733073858330624,18014471526088704,18014694864125953,18014583195107328,18014699159289857,18014690573484033,18014548835041280,18014707749355521,18014686275305473,18014557426417664,18014544540663808,18014419987005440,18014591784583168,18014703455240193,18014484410793984,18014553131188224,18014587491385344,18296053879013378,18295955094765570,18295890670256130,18295929324961794,18296212794966017,18295877785354242,18295963684700162,18295972274634754,18295920735027202,18295912145092610,18295937914896386,18295907850125314,18296049584046082,18296040994111490,18295985159536642,18295882080321538,18295950801895424,18296045289078786,18295993749471234,18295916440059906,18295933619929090,18295894965223426,18295925029994498,18295899260190722,18295903555158018,18296234267639810,18295989454503938,18577649112711169,18577533148528640,18577627637415937,18577593279250433,18577657702776833,18577601869250561,18577588987559937,18577662001938433,18577434364215296,18577455840034816,18577537444806656,18577451544477696,18577503084609536,18577507379838976,18577541738004480,18577442954608640,18577494494085120,18577653408661505,18577631932252161,18577447249707008,18577623342252033,18577498788462592,18577606162776065,18577636228726785,18577614753628161,18577473018724352,18577619048464385,18577421479510016,18577644817547265,18577369940426752,18577640523497473,18858982356549632,18858909340925952,18858978061320192,18859132679487489,18858896456220672,18859106914009089,18858844917137408,18859128385372161,18859115500208129,18859111205437441,18859008125239296,18859012421517312,18859124089421825,18859016714715136,18858973765173248,18859119794257921,18858969470795776,19140384317636608,19140487398227968,19140603362082817,19140581890785281,19140457333260288,19140491691425792,19140371432931328,19140319893848064,19140448741883904,19140483101949952,19140590476918785,19140599066132481,19140444447506432,19140586182148097,19140453038030848,19140594770968577,19140607656198145,19421850709131264,19703402991452160,19703269847269376,19703540434272257,19703394400927744,19703407286681600,19703441644847104,19703433055371264,19703437351649280,19703549019553793,19703536135569409,19703321386352640,19703553315504129,19703334271057920,19703398695305216,19703544724389889,19703557609619457,19984813547585536,20266309995986946,20266378715463682,20266202621804546,20266236981542914,20266365830561794,20266249866444802,20266370125529090,20266297111085058,20266228391608322,20266262751346690,20266318585921538,20266241276510210,20266279931215874,20266219801673730,20266206916771842,20266288521150466,20266559104090114,20266224096641026,20266245571477506,20266254161412098,20266215506706434,20266314290954242,20266258456379394,20547849397862402,20547750613614594,20548016901521409,20829324377128960,21110743519330304,21392261445779456,21673860972544001,21673865267314689,21673719237902336,21673873856528385,21673732123656192,21673646223327232,21673882446594049,21673869561364481,21673856676069377,21673852381233153,21673659108032512,21673723532279808,21673757892345856,21673727828426752,21673762188623872,21673594684243968,21673848091705345,21673878152478721,21673766481821696,21955108316708866,21955219985858562,21955056777101314,21955099726774274,21955146971414530,21955095431806978,21955129791545346,21955065367035906,21955104021741570,21955112611676162,21955215690891266,21955069662003202,21955073956970498,21955138381479938,21955159856316418,21955408964419586,21955078251937794,21955086841872386,21955091136839682,21955164151283714,21955168446251010,21955052482134018,21955228575793154,22236544637665280,22236832400015361,22236802334654465,22236669191323648,22236716435243008,22236819514785793,22236677781848064,22236798039490561,22236609061453824,22236707845767168,22236806629490689,22236828105900033,22236815220736001,22236712142045184,22236596176748544,22236823809949697,22236793750224897,22236673485701120,22236682077077504,22236810925965313,22518109813211136,22799571899383810,22799481705070594,22799589079252994,22799593374220290,22799584784285698,22799554719514626,22799833892388866,22799477410103298,22799563309449218,22799644913827842,23081205790146561,23081137072177152,23081107007209472,23081051171848192,23081098415833088,23080969567797248,23081021106880512,23081227264786433,23081235856097281,23081055467405312,23081046877077504,23081214380998657,23081222969622529,23081072646094848,23081132775899136,23081240150867969,23081042581979136,23081248740081665,23081218675834881,23081253036032001,23081231559622657,23081033991585792,23081244444917761,23081094121455616,23081201500618753,23081102711980032,23081141365374976,23081257330147329,23362599167983616,23643975354351616,23643910936002560,23925514755178496,23925510460145664,23925506165112832,23925501870342144,23925592071208961,23925604949622785,23925609251143681,24206938191953922,24206856587575298,24488327271677954,24488365926383618,24488494775402498,24488683753963522,24488340158087168,24488421760958466,24488443235794946,24488374516318210,24488344453120000,24488383106252802,24488404581089282,24488434645860354,24488438940827650,24488387401220098,24488370221350914,24488378811285506,24488503365337090,24488413171023874,24488331566645250,24488361631416322,24769840902963202,24769978341916674,24769853787865090,24769918212374530,24769819429830656,24769913917407234,24769802248257538,24770158730543106,24769969751982082,24769909622439938,24769858082832386,24769845197930498,24769879557668866,24769849492897794,24769806543224834,24769888147603458,24769836607995906,24769862377799682,24769815134797824,24769896737538050,25051337354575874,25051633707319298,25051294406541312,25051315879739394,25051281520001026,25051363124379650,25051320174706690,25051311584772098,25051333059608578,25051388894183426,25051371714314242,25051328764641282,25051324469673986,25051384599216130,25051354534445058,25051444728758274,25051290111508480,25051393189150722,25051277225033730,25051453318692866,25332769383251968,25332752201875458,25332868165992450,25332838101221378,25332928295534594,25332808036450306,25332829511286786,25332803741483010,25332859576057858,25332790856581122,25332765088219136,25332863871025154,25333108684161026,25332799446515714,25332846691155970,25332812331417602,25332756496842754,25332795151548418,25332786561613826,25332919705600002,25614231473225730,25614270127931394,25614334552440834,25614283012833282,25614274422898690,25614278717865986,25614304487669762,25614321667538946,25614583660544002,25614287307800578,25614403271917570,25614343142375426,25614265832964098,25614227178258434,25614394681982978,25614261537996802,25614244359962624,25614313077604354,25614240064929792,25614338847408130,25895719336673280,25895869658759170,25895706450001922,25895740809740290,25895745104707586,25896058637320194,25895757989609474,25895788054380546,25895749399674882,25895702155034626,25895762284576770,25895818119151618,25895813824184322,25895753694642178,25895809529217026,25895715041640448,25895736514772994,25895796644315138,25895779464445954,25895878248693762,26177293096583170,26177533614751746,26177202902269954,26177254441877506,26177190017368066,26177271621746690,26177194312335362,26177237262008322,26177177132466178,26177288801615874,26177284506648578,26177263031812098,26177181427433474,26177353226125314,26177232967041026,26177340341223426,26177211492204546,26177198607302658,26177220082139138,26177215787171842,26177344636190722,26177224377106434,26177228672073730,26458759483228162,26458707943620610,26458703648653314,26458656404013058,26458729418457090,26458763778195458,26458652109045762,26458669288914946,26458690763751426,26458699353686018,26458738008391682,26458673583882242,26458815317803010,26458746598326274,26458686468784130,26458819612770306,26458768073162754,26458712238587906,26459008591331330,26458695058718722,26458828202704898,26458664993947650,26458677878849538,26740152855625730,26740127085821954,26740290294579202,26740148560658434,26740221575102466,26740182920396802,26740165740527618,26740204395233282,26740234460004354,26740238754971650,26740303179481090,26740212985167874,26740178625429506,26740294589546498,26740174330462210,26740483568107522,26740144265691138,26740243049938946,26740161445560322,26740170035494914,26740139970723842,26740131380789250,26740187215364098,27021692255928320,27021872643571713,27021842580570113,27021782449848320,27021876938735617,27021670780829696,27021907004096513,27021855464095745,27021786746126336,27021619241746432,27021889824817153,27021748089782272,27021791039324160,27021683665534976,27021756681158656,27021838289993729,27021752385929216,27021696551026688,27021894118866945,27021902709981185,27021700845797376,27021898414030849,27021868349784065,27021743795404800,27021851170570241,27021881233571841,27021864054947841,27021705141354496,27021722320044032,27021885530046465,27303253133950978,27303102810095618,27303193004408834,27303119989964802,27303248838983682,27303094220161026,27303188709441538,27303162939637762,27303137169833986,27303184414474242,27303081335259138,27303171529572354,27303098515128322,27303150054735874,27303433522577410,27303132874866690,27303115694997506,27303111400030210,27303107105062914,27303089925193730,27303077040291842,27303128579899394,27303124284932098,27303240249049090,27303154349703170,27303244544016386,27584637919625216,27866031289270274,27866374889406465,27866112893648898,28147519148982274,28147506264080386,28147527740030976,28147523444998144,28147553508720642,28147617933230082,28147536328851458,28147858451398658,28147562098655234,28147669472837634,28147579278524418,28147544918786050,28147501969113090,28147678062772226,28147540623818754,28147596458393602,28147549213753346,28147665178853376,28147587868459010,28147613638262786,28147557803687938,28147609343295490,28147514854014978,28429144449613826,28429037075431426,28429071435169794,28429011305627650,28429028485496834,28428989830791170,28429088615038978,28429015600594946,28429054255300610,28428994125758466,28428998421708800,28429062845235202,28429140155564032,28428976945889282,28429019895562242,28429333428174850,28429024190529538,28429092910006274,28428981240856578,28429153039548418,28429084320071682,28429002716741632,28429032780464130,28710692440834049,28710636606390272,28710640899588096,28710726798999553,28710520641093632,28710752570245121,28710739685081089,28710555001618432,28710606541422592,28710550706061312,28710731093835777,28710542116192256,28710572180307968,28710701030834177,28710529232273408,28710756864360449,28710533525798912,28710705324359681,28710469102010368,28710713915211777,28710743979130881,28710602246193152,28710597950046208,28710735390310401,28710688150454273,28710718210048001,28710546411290624,28710593655668736,28710632310112256,28710748274294785,28710722503835649,28992042863820802,28992283381989378,28991952669507586,28992102993362946,28991969849376770,28992034273886210,28991965554409474,28991944079572994,28991948374540290,28992094403428354,28992012799049730,28991931194671106,28991926899703810,28992090108461058,28991978439311362,28992038568853506,28991961259442178,28991974144344066,28991982734278658,28992021388984322,28992004209115138,28991939784605698,28991987029245954,29273406171709442,29273517840859138,29273479186153474,29273440531447810,29273431941513218,29273427646545922,29273457711316994,29273419056611330,29273423351578626,29273509250924546,29273496366022658,29273577970401282,29273487776088066,29273758359027714,29273462006284290,29273436236480514,29273453416349698,29273513545891842,29273414761644034,29273449121382402,29273444826415106,29273401876742146,29273565085499394,29273569380466690,29555168909262849,29554979931750400,29555117370966017,29554958455930880,29555160320442369,29555130254491649,29555177500377089,29555065829720064,29554997110439936,29555143140179969,29555151729131521,29554967046324224,29555125960966145,29554975636193280,29555027176325120,29555173204426753,29555031471554560,29555138845343745,29555181794492417,29554971341422592,29555057240244224,29555022880178176,29555113080651777,29555018585800704,29554945571225600,29555147433967617,29555156023967745,29554894032142336,29555061536522240,29555164615213057,29836643885973505,29836626705842177,29836497856888832,29836502153035776,29836588057427969,29836622410678273,29836631000678401,29836472087150592,29836536513232896,29836493562511360,29836369008852992,29836613822054401,29836605231202305,29836652477087745,29836450612903936,29836600937676801,29836442023034880,29836656771203073,29836532216954880,29836506448265216,29836540806430720,29836618116890625,29836446318133248,29836454908461056,29836433432641536,29836639591923713,29836648181137409,29836420547936256,29836592347676673,29836635297153025,30117959947780096,30118041559367681,30117951357976576,30117964242812928,30118054437257217,30117955652747264,30399413451358210,30399417746325506,30399357618159616,30399409156390914,30399658264494082,30399387681554434,30399379091619842,30399336143388672,30399469285933058,30399340438421504,30399396271489026,30399301782208514,30399477875867650,30399344733126656,30399306077175810,30399361911750658,30399349028159488,30399353322995712,30680776758788098,30680952852447234,30680836891017216,30680862658134018,30680884132970498,30680888427937794,30680871248068610,30680892722905090,30681133241073666,30680854068199426,30680781053755394,30680944262512642,30962402059878400,30962397763731456,30962522317520897,30962406355107840,30962539498766337,30962440713273344,30962432123797504,30962530907521025,30962500844519425,30962436420075520,30962526612684801,30962548087980033,30962371993993216,30962333339484160,30962393469353984,30962518023733249,30962513728897025,30962552383930369,30962268915695616,30962556678045697,30962350519746560,30962543792816129,30962354815303680,30962346224975872,30962505138044929,30962341929877504,30962487964401665,30962320454778880,30962492254519297,30962535203995649,31243894215278594,31243971531112449,31243838380703746,31244083193839618,31243731006521346,31243812610899970,31243821200834562,31243834085736450,31243804020965378,31243842675671042,31243726715224064,31525390666694656,31525382077218816,31525356308529152,31525498041401345,31525347717152768,31525472270942209,31525437917954049,31525463682318337,31525352013299712,31525218869116928,31525283292905472,31525270408200192,31525291883298816,31525442207940609,31525304768724992,31525476566106113,31525467977154561,31525506631467009,31525485157416961,31525296178397184,31525480860942337,31525489452187649,31525502337351681,31525343422775296,31525455091466241,31525300473167872,31525493746237441,31525386373496832,31525321947414528,31525450797940737,31806814103076864,31806904297521153,31806809808044032,31806891419893761,31806805513011200,31806801218240512,32088224655671296,32088482360786945,32088155936325634,32088237540704258,32369712524427264,32651178911268864,32932580869210114,32932752667901954,32932739783000066,32932610933981186,32932593754112002,32932671063523330,32932619523915778,32932602344046594,32932632408817666,32932628113850370,32932598049079298,32932692538359810,32932576574242818,32932615228948482,32932623818883074,32932744077967362,32932606639013890,32932688243392514,32932933056528386,32932653883654146,32932589459144706,32932683948425218,32932662473588738,32932636703784962,33214395152728065,33214137451020290,33214055850377216,33495694035910656,33777095991361538,33777078811492354,33777108876263426,33777117466198018,33777113171230722,33777357984366594,33777087401426946,33777005797048322,33777001502081026,33777169005805570,34058476478857218,34058562378203138,34058643982581762,34058832961142786,34058570968137730,34058592442974210,34058583853039618,34058480773824514,34058553788268546,34058588148006914,34340123261075456,34340024469356544,34621520921952258,34621542396788738,34621684137263105,34621538108309504,34621593936396290,34621533806854146,34621512332017666,34621430727639042,34621426432671746,34621782914957314,34621503742083074,34902987308072962,34902905703694338,34903068912451586,34903013077876738,34903017372844034,34903008782909442,34902901408727042,34903257891012610,34902995898007554,34902978718138370,35184470873473026,35184732866478082,35466023160381442,35465924376199168,35747652763713537,35747412237811714,35747330641100800,36028809912909824,36310310654640130,36310306359672834,36310383669084162,36310349309345794,36310319244574722,36310336424443906,36310276294901762,36310387964051458,36310280589869058,36310632777187330,36310439503659010,36310443798626306,36310302064705538,36310314949607426,36310297769738242,36310323539542018,36310327834509314,36310362194247682,36310452388560898,36310392259018754,36310370784182274,36310289179803650,36310448093593602,36310353604313090,36310332129476610,36310293474770946,36591837171744770,36591755567366146,36873505418444801,36873475355443201,36873294965702656,36873307850407936,36873531188969473,36873316440801280,36873346504916992,36873320735899648,36873376570802176,36873518303739905,36873466765443073,36873514009690113,36873325030670336,36873501123608577,36873406634721280,36873479648968705,36873415224197120,36873367980277760,36873410930999296,36873492534657025,36873526894854145,36873488239820801,36873372274655232,36873509714919425,36873462476374017,36873496828444673,36873329326227456,36873243426619392,36873522598903809,36873380866031616,37154963216531457,37155006165680129,37154782827118592,37154950332153857,37154769942413312,37155001871564801,37154791417511936,37154881611431936,37154984691630081,37154980395155457,37154851547512832,37154890200907776,37154941742153729,37154855842742272,37154800007380992,37154804302938112,37154847251365888,37154997575614465,37154937453150209,37154988986400769,37154967511367681,37154976100319233,37154842956988416,37154718403330048,37154993280450561,37154885907709952,37154821481627648,37154954625679361,37154795712610304,37154971805155329,37436257803829248,37436317933699072,37436476848275457,37436451077029889,37436365177618432,37436468257161217,37436266394222592,37436442488078337,37436279279648768,37436270689320960,37436330819452928,37436459668340737,37436429602390017,37436244919123968,37436322228076544,37436463963111425,37436326524223488,37436412429926401,37436472552325121,37436481142390785,37436438193242113,37436356588142592,37436360884420608,37436274984091648,37436455371866113,37436416718864385,37436193380040704,37436446781865985,37436425308864513,37436296458338304,37717805796163584,37717926053740545,37717745666031616,37717835861131264,37717668356751360,37717754256359424,37717719895834624,37717831564853248,37717956119101441,37717930348576769,37717801500934144,37717951824986113,37717732780539904,37717771435048960,37717749960802304,37717913169952769,37717921758576641,37717943233871873,37717934645051393,37717797204787200,37717887406702593,37717938939822081,37717947529035777,37717917464788993,37717840154329088,37717904579100673,37717741370933248,37717792910409728,37717900285575169,37717891695575041,37999212052348930,37999233527185410,37999126153003010,37999130447970306,37999293656727554,37999242117120002,37999203462414338,37999237822152706,37999482635288578,37999220642283522,38280734272389120,38280725682585600,38280738567421952,38280828761866241,38280815885352961,38280729977356288,38562162005114882,38562080400736258,38843778715287553,38843684225810432,38843679930777600,38843688520843264,38843765838839809,38843675636006912,39125030357630978,39125111962009602,39406578353373184,39688083387121666,39688070502219778,39688053322350594,39688087682088962,39688143516663810,39688332495224834,39687980307906562,39688061912285186,39687976012939266,39688091977056258,39969807472394242,39969528299520002,39969566954225666,39969455285075970,39969562659258370,39969545479389186,39969536889454594,39969450990108674,39969558364291074,39969618493833218,40250998980280320,40251011865247746,40250930260869122,40532473956990976,40532572741107714,40813953229389826,40813961819324418,40813970409259010,40813987589128194,40814232402264066,40813991884095490,40813875919978498,40814043423703042,40813880214945794,40813983294160898,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<Decl<'lt>>::default()};  _item0_ }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<Decl<'lt>>::default()};  _item0_ }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Decl::LET_5(_item1_,_item3_,_item5_) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut _item8_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item6_ = if let RetTypeEnum::Enumvariant_51(_x_51)=parser.popstack().value { _x_51 } else {<FunType>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_48(_x_48)=parser.popstack().value { _x_48 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Decl::LET_6(_item1_,_item3_,_item6_,_item8_) }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_52(_x_52)=parser.popstack().value { _x_52 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type {
let mut _item0_ = if let RetTypeEnum::Enumvariant_30(_x_30)=parser.popstack().value { _x_30 } else {<BaseType>::default()};  Type::Type_11(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()};  _item0_ }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> BaseType {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  BaseType::INTTYPE }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> BaseType {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  BaseType::BOOLTYPE }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> BaseType {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  BaseType::UNITTYPE }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> BaseType {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  BaseType::STRINGTYPE }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType {
let mut _item4_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_37(_x_37)=parser.popstack().value { _x_37 } else {<TypeList>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  FunType::FunType_17(_item1_,_item4_) }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType {
let mut _item2_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()};  FunType::FunType_18(_item0_,_item2_) }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList {
let mut _item1_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<Vec<LC<Type>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()};  TypeList(_item0_,_item1_,) }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type {
let mut _item1_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type>> {
 Vec::new() }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_28(_x_28)=parser.popstack().value { _x_28 } else {<Vec<LC<Type>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<ChainTail<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Chain_24(parser.lbx(0,_item0_),parser.lbx(1,_item1_)) }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ChainTail<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<ChainTail<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  ChainTail::ChainTail_25(parser.lbx(1,_item1_),parser.lbx(2,_item2_)) }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ChainTail<'lt> {
 ChainTail::ChainTail_26 }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item5_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::LET_27(_item1_,_item3_,parser.lbx(5,_item5_)) }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::SET_28(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::WHILE_29(parser.lbx(1,_item1_),parser.lbx(3,_item3_)) }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_34(_x_34)=parser.popstack().value { _x_34 } else {<Type>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::NEW_30(_item1_,parser.lbx(3,_item3_),parser.lbx(5,_item5_)) }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_41(_x_41)=parser.popstack().value { _x_41 } else {<Else<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::IF_32(parser.lbx(1,_item1_),parser.lbx(3,_item3_),parser.lbx(4,_item4_)) }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Else::ELSE_34(parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Else_35 }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Or_36(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::And_38(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Comp_40(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Comp_41(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Comp_42(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Comp_43(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Comp_44(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Comp_45(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::AddSub_47(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::AddSub_48(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::MulDiv_50(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::MulDiv_51(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::MulDiv_52(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::Pow_54(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Unary_56(parser.lbx(1,_item1_)) }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::Unary_57(parser.lbx(1,_item1_)) }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()};  Expr::ID_63(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()};  Expr::ID_64(_item0_,_item1_) }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_4(_x_4)=parser.popstack().value { _x_4 } else {<i64>::default()};  Expr::NUM(_item0_) }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_33(_x_33)=parser.popstack().value { _x_33 } else {<&'lt str>::default()};  Expr::STRING(_item0_) }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::TRUE }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::FALSE }

fn _semaction_rule_72_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::NULL }

fn _semaction_rule_73_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  Expr::UNIT }

fn _semaction_rule_74_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()};  Expr::ExprList_74(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_75_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_32(_x_32)=parser.popstack().value { _x_32 } else {<()>::default()};  _item1_ }

fn _semaction_rule_76_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_77_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_38(_x_38)=parser.popstack().value { _x_38 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_78_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(79,146,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("DeclVar");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("DeclFun");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_48(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_8_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_33(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_9_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_9_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_52(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_30(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_51(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_51(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_37(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_20_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_34(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_21_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_21_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_28(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ChainTail");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ChainTail");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("If");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("If");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_41(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunCall");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_65_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_66_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_66_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_75_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_76_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_76_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_38(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_32(_semaction_rule_78_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1919 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),agudalexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),agudalexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_38(Vec<LC<Expr<'lt>>>),
  Enumvariant_30(BaseType),
  Enumvariant_33(&'lt str),
  Enumvariant_45(Decl<'lt>),
  Enumvariant_56(Expr<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_48(ParamList<'lt>),
  Enumvariant_49(Vec<LC<Decl<'lt>>>),
  Enumvariant_32(()),
  Enumvariant_46(ChainTail<'lt>),
  Enumvariant_51(FunType),
  Enumvariant_21(ArrayType),
  Enumvariant_0(Program<'lt>),
  Enumvariant_4(i64),
  Enumvariant_37(TypeList),
  Enumvariant_34(Type),
  Enumvariant_41(Else<'lt>),
  Enumvariant_28(Vec<LC<Type>>),
  Enumvariant_52(Vec<LC<&'lt str>>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct agudalexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> agudalexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> agudalexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> agudalexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> agudalexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["Int","_WILDCARD_TOKEN_","Unit","do","Bool","while","then","false","let","true","String","null","else","set","unit","if","new",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')',':','|','%','=',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#"new"#,"NEW"),(r#"while"#,"WHILE"),(r#"true"#,"TRUE"),(r#"do"#,"DO"),(r#"else"#,"ELSE"),(r#"then"#,"THEN"),(r#"set"#,"SET"),(r#"if"#,"IF"),(r#":"#,"COLON"),(r#"Int"#,"INTTYPE"),(r#"|"#,"PIPE"),(r#"||"#,"OR"),(r#"false"#,"FALSE"),(r#"String"#,"STRINGTYPE"),(r#"null"#,"NULL"),(r#"unit"#,"UNIT"),(r#"%"#,"MOD"),(r#"="#,"ASSIGN"),(r#"let"#,"LET"),(r#"Bool"#,"BOOLTYPE"),(r#"Unit"#,"UNITTYPE"),] {lexnames.insert(k,v);}
    stk.set_line_comment("--");
    agudalexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for agudalexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"STRING",RetTypeEnum::Enumvariant_33(_tt))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"NUM",RetTypeEnum::Enumvariant_4( n
))),
      RawToken:: Alphanum(n)  => Some(TerminalToken::from_raw(token,"ID",RetTypeEnum::Enumvariant_33( n
))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_33(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
