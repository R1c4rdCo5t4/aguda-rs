//Parser generated by rustlr for grammar rustlr
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::rustlr_ast::*;

static SYMBOLS:[&'static str;75] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","!","[","]","(",")","COLON","MOD","PIPE","ASSIGN","OR","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","TRUE","FALSE","NULL","UNIT","TINT","TBOOL","TSTRING","TUNIT","Id","Num","Str","Program","Decl","Type","Expr","ParamList","TypeList","ExprList","FunType","Else","Lhs","SingleParam","MultiParam","ArrayType","BaseType","Chain","Stmt","Op","Primary","Literal","NEWRENT_1_0","NEWSEQNT_6_0","NEWRENT_7_1","NEWSEQNT_21_0","NEWRENT_22_1","NEWSEQNT_26_0","NEWRENT_27_1","NEWSEQNT_62_0","NEWRENT_63_1","START","EOF"];

static TABLE:[u64;1577] = [274877972481,115964182530,193273659393,317827645442,281672545402881,281590941089792,281792804290562,563267781001219,844742757842946,844540894380034,1126080295796736,1407456488390656,1407465078259712,1689051724578817,1689013069676544,1689098969153537,1689021659676672,1689094674317313,1689017364512768,1689025954512896,1970535291355137,1970505226649600,2251812699373570,2251885713817602,2251872828915714,2251808404406274,2251902893686786,2533283381182466,2533360690593794,2533377870462978,2533347805691906,2533287676149762,2814822782271490,2814852847042562,2814835667173378,2814758357762050,2814762652729346,3096297759178754,3096233334669314,3096327823949826,3096237629636610,3096310644080642,3377802800332802,3377708311052290,3377772735561730,3377785620463618,3377712606019586,3659247712796672,3659277777633280,3940752753819650,3940735573950466,3940662559506434,3940722689048578,3940658264539138,4222210551250944,4503685527175170,4503608217763842,4503883096522753,4785151914868736,5066708497072128,5066811575435265,5066695612301312,5066734266220544,5066691317137408,5066820166025217,5066665546481664,5066807280271361,5066699906613248,5066669842628608,5066738561253376,5066571058315264,5066729971646464,5066674136940544,5066802986221569,5066781511057409,5066618303086592,5066755741777921,5066815870271489,5066631187333120,5066661251645440,5066704201383936,5348114754699264,5629508127096832,5629585433886722,5629778710102017,5911060411252738,5911047526350850,5910983101841410,5911077591121922,5910987396808706,6192767316983810,6192453784371202,6192548273651714,6192535388749826,6192750138425345,6192565453520898,6192526798815234,6192458079338498,6473963122524162,6473984597360642,6473976007426050,6473928762785794,6473980302393346,6473958827556866,6474023252066306,6474010367164418,6474018957099010,6473945942654978,6473988892327938,6473941647687682,6474031842000898,6474061906771970,6473971712458754,6474057611804674,6474040431935490,6473954532589570,6474242295398402,6473950237622274,6473967417491458,6474001777229826,6474053316837378,6473933057753090,6755579832827904,7037192247705602,7036917371502592,7036904485945344,7036973204373506,7037003269144578,7036981795618816,7036938846011392,7037007564111874,7036990384242690,7036900191109120,7036921666011136,7036878715092994,7036883010060290,7036930256207872,7036951729537026,7036891601633280,7036960319471618,7036925960650752,7036913076404224,7036968910258176,7036934551109632,7037011859079170,7036908780978176,7036895895945216,7318619979710465,7318370872000512,7318431001018368,7318504015069184,7318581324742657,7318495425986560,7318473950625792,7318469656313856,7318534079905792,7318461065330688,7318611389120513,7318615683956737,7318538374938624,7318491130822656,7318508310757376,7318465360166912,7318607096643585,7318529785331712,7318418116771840,7318499720298496,7599871620349954,7599910275055618,7599884505251842,7599832965644290,7599957519695874,7599828670676994,7600142203289602,7599863030415362,7599858735448066,7599850145513474,7599953224728578,7599918864990210,7599923159957506,7599940339826690,7599875915317250,7599854440480770,7599880210284546,7599867325382658,7599931749892098,7599961814663170,7599841555578882,7599845850546178,7599901685121026,7599888800219138,7881320826994690,7881428201177090,7881359481700354,7881333711896578,7881316532027394,7881617179738114,7881398136406018,7881342301831170,7881355186733058,7881325121961986,7881393841438722,7881436791111682,7881415316275202,7881303647125506,7881346596798466,7881376661569538,7881432496144386,7881363776667650,7881385251504130,7881307942092802,7881338006863874,7881329416929282,7881350891765762,7881406726340610,8162903177953282,8162825868541954,8162873113182210,8162782918868994,8162890293051394,8162804393705474,8162911767887874,8162834458476546,8162907472920578,8162795803770882,8162791508803586,8162860228280322,8162812983640066,8162778623901698,8162851638345730,8162868818214914,8162830163509250,8162881703116802,8162808688672770,8162817278607362,8162838753443842,8163092156514306,8162821573574658,8162800098738178,8444313730285570,8444382449762306,8444348090023938,8444365269893122,8444275075579906,8444279370547202,8444287960481794,8444266485645314,8444343795056642,8444253600743426,8444300845383682,8444296550416386,8444257895710722,8444292255449090,8444567133356034,8444309435318274,8444326615187458,8444386744729602,8444283665514498,8444270780612610,8444335205122050,8444305140350978,8444356679958530,8444378154795010,8725797296668672,9007315220430848,9007379645595648,9007280861282304,9007323810889728,9007353875333120,9007431185006593,9007465544220673,9007310925594624,9007388235202560,9007349580562432,9007461249384449,9007383940169728,9007319516577792,9007267977035776,9007456957038593,9007220732264448,9007345286250496,9007358171021312,9007340991086592,9007469839974401,9288944816685057,9288824557273088,9288815967797248,9288798787600384,9288695708975104,9288828852043776,9288858916880384,9288863211913216,9288880394207233,9288785902305280,9288906161717249,9288755837992960,9288833147731968,9288820262961152,9288931930931201,9288742953746432,9288854622306304,9288790197141504,9288794493288448,9288936226095105,9288927636881409,9288940520931329,9570170686668802,9570265175949314,9570243701112834,9570256586014722,9570192161505282,9570153506799618,9570200751439874,9570213636341762,9570235111178242,9570179276603394,9570222226472962,9570230816931840,9570209341374466,9570247996080130,9570286650785794,9570467039412226,9570226521243650,9570187866537986,9570157801766914,9570166391701506,9570278060851202,9570174981636098,9570282355818498,9570205046407170,9570196456472578,9570183571570690,9851942016253954,9851722972921858,9851641368543234,9851731562856450,9851684318216194,9851701498085378,9851753037692930,9851718677954562,9851649958477826,9851667138347010,9851645663510530,9851757332660226,9851761627627522,9851662843379714,9851628483641346,9851671433314306,9851654253445122,9851740152791042,9851675728281602,9851632778608642,9851688613183490,9851658548412418,9851710088019970,9851680023248898,10133416990736386,10133215127273474,10133176472567810,10133185062502402,10133107753091074,10133197947404290,10414741642543104,10414823247183873,10414745937707008,10414818952347649,10414750232543232,10414776006213633,10414737347706880,10696070594428930,10696079184363522,10696092069265410,10696186558545922,10696053414559746,10696104954167298,10696177968611330,10696087774298114,10696113544101890,10696156493774850,10696366947172354,10696126429003778,10696057709527042,10696147903840258,10696100659200002,10696109249134594,10696135018938370,10696143608872962,10696182263578626,10696165083709442,10696096364232706,10696066299461634,10696083479330818,10696074889396226,10977841919492098,10977640056029186,11259033432555522,11259050612424706,11259016252686338,11259037727522818,11259084972163074,11259115036934146,11259007662751746,11259042022490114,11259020547653634,11259024842620930,11259316900397058,11259029137588226,11259054907392002,11259136511770626,11259046317457410,11259127921836034,11259059202359298,11259063497326594,11259003367784450,11259093562097666,11259097857064962,11259132216803330,11259106446999554,11259076382228482,11540654435991552,11540663025598464,11540736042663937,11540632961417216,11540740334616577,11540620076646400,11540624370958336,11540555651678208,11540705975402497,11540744630370305,11540495522660352,11540628665729024,11540542767431680,11540658730565632,11822180954734593,11822129415061504,12103690288037889,12103655928823809,12103604389412864,12103578619150336,12103582914838528,12103694583791617,12103505605099520,12103570030067712,12103612979019776,12103685996281857,12103608683986944,12103445476081664,12103492720852992,12103574324379648,12385143789322241,12385148084158465,12385135203319809,12385100843712513,12385075069517824,12385070774681600,12385062184681472,12385066479517696,12385139498352641,12385122318614529,12384980584431616,12666554345717760,12947934828560386,12947857519149058,13229422691287042,13229401216450562,13229328205611008,13229620263321601,13229409806385154,13229332496973826,13229641734619138,13229439871156226,13510889081733120,13792424184643584,13792458544250880,13792295336345600,13792432775102464,13792428479414272,13792540148301825,13792544444055553,13792419890331648,13792454249676800,13792342581116928,13792462839283712,13792535857201153,13792355465363456,13792505789087745,14073903456124928,14073830442074112,14073899161354240,14074010833977345,14074015125012481,14073907751813120,14074019420766209,14073933520961536,14073894867042304,14073770313056256,14073937815994368,14073980765798401,14073929226387456,14073817557827584,14355404203098112,14355292534538240,14355245289766912,14355490101723137,14355408497672192,14355455742509057,14355305418784768,14355374138064896,14355378432835584,14355485810753537,14355369843752960,14355382728523776,14355494397476865,14355412792705024,14636857705234432,14636930719219713,14636767511248896,14636849114775552,14636720266477568,14636879179808768,14636969374187521,14636965078433793,14636780395495424,14636883474382848,14636887769415680,14636960787529729,14636853409546240,14636844820463616,14918405695930369,14918195243188224,14918435764305921,14918332681945088,14918255372206080,14918319797174272,14918444350898177,14918328386256896,14918362746126336,14918324091486208,14918354156519424,14918358451093504,14918242487959552,14918440055144449,15199910741082113,15199880672641025,15199915031855105,15199730348916736,15199799068196864,15199807658655744,15199794773884928,15199837722836992,15199803362967552,15199833427804160,15199670219898880,15199919327608833,15199717464670208,15199829133230080,15481312699547648,15481304109940736,15481145196609536,15481205325627392,15481394304319489,15481385717858305,15481192441380864,15481269750595584,15481308404514816,15481274044907520,15481355649351681,15481278339678208,15481390008565761,15481282635366400,15762667418091520,15762830626062337,15762869281030145,15762783381225472,15762860694634497,15762749021618176,15762680302338048,15762744727306240,15762620173320192,15762779086651392,15762753316388864,15762757612077056,15762787676258304,15762864985276417,16044305602772993,16044254063362048,16044258357936128,16044339961987073,16044223998328832,16044344257740801,16044228293099520,16044219704016896,16044155279048704,16044335671410689,16044262652968960,16044232588787712,16044142394802176,16044095150030848,16325694680727552,16325780579483649,16325733334646784,16325570126741504,16325819234451457,16325737629679616,16325703269810176,16325617371512832,16325814938697729,16325810648186881,16325630255759360,16325698975039488,16325729040072704,16325707565498368,16607045103452160,16607255556194305,16607173951750144,16607289915408385,16607169657438208,16607204016783360,16607294211162113,16607092348223488,16607208311357440,16607212606390272,16607105232470016,16607182542209024,16607178246520832,16607285624963073,16888683288068096,16888730532904961,16888653223231488,16888678993494016,16888644634148864,16888520080162816,16888687583100928,16888648928460800,16888567324934144,16888769187872769,16888657518919680,16888764892119041,16888580209180672,16888760601739265,17170055185891328,17170119610859520,17170123905171456,17170205509615617,17170042301644800,17169995056873472,17170162559811584,17170132495630336,17170244164583425,17170128199942144,17170239868829697,17170235578515457,17170158264778752,17170153970204672,17451517278355456,17451714845540353,17451628946915328,17451710555291649,17451680486326273,17451607472340992,17451603176652800,17451470033584128,17451530162601984,17451633241489408,17451637536522240,17451594587570176,17451719141294081,17451598881882112,17733060978016256,18014664798961665,18014540245827584,18014510180335616,18014583194910720,18014587489943552,18014656208961537,18014514475171840,18014669094715393,18014467231776768,18014578900336640,18014604674269185,18014651914911745,18014480116023296,18014518771318784,18014660504125441,18014553130074112,18014557425762304,18014630439747585,18014548835303424,18014523065630720,18014544540991488,18014419987005440,18296002341634048,18577434368737280,18859003830468608,18859076845043713,18858969471123456,18859094024847361,18858844917137408,18858947995762688,18858978060206080,18859029604663297,18858905046155264,18858965175959552,18859085434257409,18859055369879553,18859081139093505,18859008125042688,18859012420075520,18859042489499649,18859089729093633,18858935110467584,18858939405303808,18858943701450752,18858973765435392,18858982355894272,18858892161908736,19140371437453312,19421837820952578,19421906540429314,19421867885723650,19421910835396610,19421850705854466,19421790576312322,19421777691410434,19421859295789058,19421799166246914,19421889360560130,19421880770625538,19421803461214210,19421829231017986,19421781986377730,19421902245462018,19421824936050690,19421872180690946,19421820641083394,19421816346116098,19422091224023042,19421833525985282,19421807756181506,19421794871214080,19421812051148802,19703351452827650,19703321388056578,19984796367716352,19984826432421888,20266275635920898,20266249866117122,20266516154089474,20266241276182530,20266335765463042,20266331470495746,20266219801346048,20266245571149826,20266297110757378,20266314290626562,20266258456051714,20266284225855490,20266206916444162,20266305700691970,20266202621476866,20266232686247938,20266262751019010,20266292815790082,20266236981215234,20266254161084418,20266215506378754,20266228391280642,20266327175528450,20266224096313346,20547888055189505,20547836509290496,20547849394126848,20547922408767489,20547845099290624,20547840804126720,20547875170222081,20547918113931265,20829251356852226,21110726333628418,21392111121924096,21392171245568000,21673676293013504,21955134083170306,21955056773758978,22236840989556738,22236531751911426,22236621946224642,22236609061322754,22236600471388162,22236527456944130,22236639126093826,22518148462673920,22518255836332033,22518139873198080,22518264426332161,22518122693001216,22518079743393792,22518152757444608,22518182822281216,22518251547066369,22518178527707136,22518019614375936,22518230067118081,22518187117314048,22518268722085889,22518118398689280,22518066859147264,22518114102542336,22518144168361984,22518260131495937,22518109807706112,22518157053132800,22799674984235009,22799640617811968,22799722222452737,22799636322975744,22799717927616513,22799644912975872,22799649207812096,23081046877732866,23080952388452354,23080995338125314,23081025402896386,23080965273354242,23081076942503938,23080999633092610,23080978158256130,23081042582765570,23081085532438530,23080956683419650,23081008223027202,23081081237471234,23081033992830978,23081055467667458,23080973863288834,23080991043158018,23080982453485568,23080986748190722,23081265921064962,23081064057602050,23081012517994498,23080969568452608,23081003928059906,23362740897316866,23362517559476224,23362539033853954,23362521853984770,23362560508690434,23362461724442626,23362508969082882,23362500379148290,23362466019409922,23362478904311810,23362444545163264,23362556213723138,23362427364704258,23362448840327168,23362487494246402,23362453135163392,23362440250851328,23362551918755842,23362530443919362,23362470314377218,23362474609344514,23362431659671554,23362457430196224,23362483199279106,23643949586317314,23643915226578946,23644005420892162,23643919521873920,23643992535990274,23644035485663234,23643945291350018,23643962471219202,23644026895728642,23644031190695938,23643983946055682,23643936701415426,23643932406448130,23643975356121090,23643906636644354,23643953881284610,23643928111480834,23643958176251906,23644014010826754,23643940996382722,23644215874289666,23643996830957570,23643923816513538,23643902341677058,23925377318518786,23925428858126338,23925510462504962,23925437448060930,23925403088322562,23925480397733890,23925424563159042,23925433153093634,23925411678257154,23925458922897410,23925420268191746,23925690851131394,23925407383617536,23925471807799298,23925415973224450,23925488987668482,23925467512832002,23925450332962818,23925390203420674,23925398793355266,23925501872570370,23925506167537666,23925394498584576,23925381613486082,24206946784641026,24206903834968066,24206933899739138,24206852295360514,24206865180262402,24206908129935362,24206963964510210,24206878065164290,24206886655098882,24206942489673730,24206890950066178,24206955374575618,24206873770196994,24206899540000770,24206976849412098,24207165827973122,24206912424902658,24206925309804546,24206895245033474,24206981144379394,24206985439346690,24206882360328192,24206869475295232,24206856590327810,24488365926580226,24488456120893442,24488344452005888,24488348746711042,24488357337038848,24488408876253186,24488370221547522,24488460415860738,24488374516514818,24488331566841858,24488327271874562,24488353041678338,24488421761155074,24488387401416706,24488640804487170,24488378811482114,24488361631612930,24488430351089666,24488451825926146,24488400286318594,24488417466187778,24488340156776450,24488383106449410,24488438941024258,24769875262636034,24769840902897666,24769823723880448,24769858082766850,24769849492832258,24769819428716544,24769935392178178,24769926802243586,24769815134404608,24769845197864962,24769896737472514,24769905327407106,24769802248192002,24769913917341698,24769931097210882,24769883852570626,24769892443029504,24769828018716672,24769832313749504,24770115780804610,24769836607930370,24769862377734146,24769853787799554,24769806543159298,25051388893790210,25051371713921026,25051350239084546,25051302995427328,25051311585886208,25051328765689856,25051324470132736,25051401778692098,25051333060591616,25051307290460160,25051367419740160,25051358829019138,25051590757253122,25051281519607810,25051380303855618,25051290111115264,25051320175493120,25051298700591104,25051294405427200,25051337355493376,25051277224640514,25051406073659394,25051315880984576,25051410368626690,25332855280631810,25332790857695232,25333065734029314,25332756496384002,25332842396450816,25332863870566402,25332885345402882,25332876755468290,25332881050435586,25332786562596864,25332808037302272,25332846690697218,25332765087825920,25332795152203776,25332825215860738,25332803742400512,25332812330958850,25332833805795330,25332777972137984,25332773677301760,25332782267170816,25332769382137856,25332752201416706,25332799446843392,25614540711133186,25614283013095426,25614261538258946,25614252948848640,25614274423160834,25614244358848512,25614287308062722,25614321667801090,25614317373161472,25614351732572162,25614227178520578,25614248654012416,25614356027539458,25614257243881472,25614360322506754,25614338847670274,25614330257735682,25614240064536576,25614278718128130,25614265833226242,25614308782899202,25614231473487874,25614270128193538,25614300192964610,25895805234380802,25895723630723072,25895706450132994,25895775169609730,25895757989740546,25895727925559296,25895745104838658,25895835299151874,25895826709217282,25895831004184578,25895702155165698,25895715041247232,25895762284707842,25895740809871362,25896015687778306,25895749399805954,25895813824315394,25895792349872128,25895736514904066,25895796644446210,25895719335559168,25895783759544322,25895753694773250,25895732220592128,26177280210829314,26177220082335744,26177211491352578,26177228672532480,26177267326582784,26177490664226818,26177181426581506,26177177131614210,26177207197302784,26177190017957888,26177232967434240,26177288800763906,26177310275600386,26177258735992834,26177198607433728,26177301685665794,26177194312269824,26177237261156354,26177271620894722,26177202902269952,26177250146058242,26177305980633090,26177215786319874,26177224376975360,26458746597998594,26458656403685378,26458664993619970,26458699353358338,26458695058391042,26458707943292930,26458742303293440,26458725123162114,26458652108718082,26458682174013440,26458733713096706,26458673584144384,26458780957736962,26458763777867778,26458690763423746,26458965641330690,26458785252704258,26458712238260226,26458677878980608,26458755187933186,26458776662769666,26458703648325634,26458669288980480,26458686468456450,26740187214643202,26740251639152642,26740238754250754,26740165739806722,26740182920855552,26740221574381570,26740174330396672,26740157150724096,26740127085101058,26740152855691264,26740217280004096,26740208689479682,26740200099545090,26740230164316162,26740144265691136,26740260229087234,26740148560855040,26740161444839426,26740170035757056,26740255934119938,26740178625953792,26740440617713666,26740131380068354,26740139971379200,27021718026059776,27021739500568576,27021782449651712,27021756680503296,27021713729912832,27021666486517760,27021709435076608,27021743795732480,27021752384815104,27021722320371712,27021748090044416,27021829694488577,27021786744684544,27021778155077632,27021619241746432,27021864053702657,27021679370764288,27021868349456385,27021855469535233,27021859758866433,27303150057684992,27584818302877697,27584616439939072,27584672273793024,27584702338236416,27584569195167744,27584736698105856,27584779647909889,27584732403073024,27584706633924608,27584809712287745,27584693749153792,27584659388497920,27584814007123969,27584728108498944,27584805423087617,27584689453989888,27584663683334144,27584698043465728,27584667979481088,27584629324185600,27866039877959682,27866031288025090,27866078532665346,27866130072272898,27866108597436418,27866061352796162,27866100007501826,27866138662207490,27866074237698050,27866155842076674,27866082827632642,27866117187371010,27866057057828866,27866044172926978,27866069942730754,27866052762861570,27866121482338306,27866087122599938,27866026993057794,27866160137043970,27866065647763458,27866340525670402,27866151547109378,27866048467894274,28147583577882624,28429281892958209,28428981241839618,28429058551250946,28710589360832512,28710679554752513,28710597950308352,28710705323966465,28710709619130369,28710529231028224,28710653790519297,28710572180635648,28710593655996416,28710516346781696,28710628015341568,28710469102010368,28710713913966593,28710602245079040,28710563590176768,28710632309915648,28710718209720321,28710559295340544,28710701029916673,28710524935274496,28710606540767232,28710567886323712,28710636604948480,28992072927019008,28992038566887424,28992193186430977,28992102992052224,28992047157346304,28991991323492352,28992154531463169,28992180306903041,28992111581659136,28992042863034368,28992107286626304,28991944078721024,28992068632707072,28992081517477888,28992004207738880,28992077221789696,28992184595841025,28992188890677249,28992064337543168,28992034272051200,29273655277387777,29273522134056960,29273629508173825,29273509248761856,29273552198500352,29273577968762880,29273517839745024,29273466300203008,29273556494188544,29273650983337985,29273539314253824,29273547903729664,29273659572551681,29273603744071681,29273419055431680,29273582263336960,29273586558369792,29273663867387905,29273513543598080,29273479184449536,29273668163141633,29273543609417728,29555164620193793,29554958455406594,29554945570177024,29554881145995266,29836433438539776,30118024379432961,30118071616929793,30117994307452928,30117990012289024,30118067322093569,30117998602289152,30117985717452800,30399439221096448,30399550890180609,30399563774230529,30399443516260352,30399447810572288,30399417746587648,30399366207045632,30399409155604480,30399413450440704,30399452105342976,30399529415016449,30399379091292160,30399422040899584,30399318962274304,30399555184230401,30399568069984257,30399559479394305,30399486465212416,30399456401031168,30399482170179584,30399477875605504,30399503651176449,30681090290745346,30680858362511362,30680776758132738,30680888427282434,30680849772576770,30680871247413250,30680781053100034,30962350525448192,30962320453730304,31243838381031426,31243726711881730,31244040244494338,31243821201162242,31243859855867906,31243855560900610,31243851265933314,31243808316260354,31243731006849026,31243799726325762,31525253229772802,31525201690165250,31525304769380354,31525231754936322,31525274704609282,31525334834151426,31525313359314946,31525283294543874,31525257524740098,31525296179445762,31525236049903618,31525214575067138,31525244639838210,31525218870034434,31525261819707394,31525291884478466,31525326244216834,31525515222777858,31525270409969666,31525223165001730,31525248934805506,31525240344870914,31525205985132546,31525227459969026,31525330539184130,31806805520482304,31806758269943810,31806900009697281,31806676665565186,31806990198177794,31806801219616770,31806771154845698,31806680960532482,31806749680009218,31806788334714882,31806809809551362,32088173118357506,32088233247899650,32088168823390210,32088207478095874,32088263312670722,32088254722736130,32088280492539906,32088181708292098,32088211773063170,32088241837834242,32088151643521026,32088177413324802,32088190298226690,32088276197572610,32088198888161282,32088203183128578,32088465176133634,32088246132801538,32088194593193986,32088224657965058,32088186003259394,32088155938488322,32088164528422914,32088284787507202,32369630919983104,32369708225069058,32369927272660993,32651196091072512,32932890104692738,32932658176458754,32932671061360642,32932580867047426,32932576572080130,32932709716066306,32932688241229826,32932701126131714,32932705421099010,32932649586524162,33214124569722880,33495608129224706,33495530827087872,33495809999896577,33777010098831360,34058575262384130,34058545197547520,34340264986542082,34340063123079170,34621602526265344,34621654065676289,34621572461232128,34621503741952000,34621581051691008,34621692720644097,34621688424890369,34621542397247488,34621563871756288,34621611115872256,34621490857705472,34621606820839424,34621538101100544,34621546691559424,34621568166920192,34621576756002816,34621443612934144,34621684130054145,34621679842164737,34621533806264320,34902995898531842,34903034553237506,34903214941863938,34902974423695362,34903030258270210,34902983013629954,34903025963302914,34902905704218626,34902901409251330,34903013078401026,35184496644980736,35184561069293568,35184552479686656,35184556774260736,35184492350668800,35184531005112320,35184453695373312,35184638378311681,35184634083475457,35184526709424128,35184393566355456,35184629795651585,35184518120341504,35184642674065409,35184488054521856,35184483759685632,35184513825177600,35184522414653440,35184440811126784,35184604019097601,35465855659671554,35465932969082882,35747506727682048,35747480958533632,35747390764548096,35747579741732865,35747472368074752,35747476662845440,35747588331732993,35747403648794624,35747446598402048,35747584036896769,35747553972518913,35747433713106944,35747343519776768,35747438007943168,35747528209530881,35747463778598912,35747468073762816,35747502433107968,35747592627486721,35747511022714880,35747575447683073,35747442304090112,36028917280800768,36028951639556096,36028912984653824,36028985999425536,36029059013607425,36028977409818624,36029003186307073,36028943050473472,36029067604197377,36028947344785408,36028878625505280,36029028949229569,36028908689817600,36028938755309568,36028818496487424,36029063308443649,36028865741258752,36028955935244288,36028981704392704,36029054718443521,36029050424393729,36028921575112704,36310375078821890,36310345014050818,36591755563827202,36591832873238530,36873466763149313,36873385158508544,36873393748508672,36873389453344768,36873423821537281,36873471057985537,36873398043344896,37154898798313473,37154864430055424,37154868725219328,37154941739859969,37154946034696193,37154873020055552,37154860135219200,37436180494352386,37436309343371266,37436249213829122,37436270688665602,37436257803763714,37436489731997698,37436176199385090,37436287868534786,37436300753436674,37436305048403970,37717655471390722,37717762845573122,37717784320409602,37717775730475010,37717780025442306,37717732780802050,37717651176423426,37717964709036034,37717724190867458,37717745665703938,37999207759347714,37999130449936386,38280674151170048,38562157710082050,38562144824918016,38562080400670722,38843619801628672,38843649866530818,39125150613897218,39125030354812930,39125159203831810,39125107664224258,39125120549126146,39125026059845634,39125137728995330,39125099074289666,39125154908864514,39125339592458242,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Decl::Var{_item0_:_item0_,id:id,ty:ty,expr:expr} }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<FunType<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut params = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Decl::Fun{_item0_:_item0_,id:id,params:params,ty:ty,expr:expr} }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  _item1_ }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Type::Int(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Type::Bool(_item0_) }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Type::Unit(_item0_) }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Type::String(_item0_) }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()};  Type::Array(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()};  FunType::SingleParam{ty:ty,ret:ret} }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<TypeList<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  FunType::MultiParam{ty:ty,ret:ret} }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<Vec<LC<Type<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()};  TypeList::TypeList(_item0_,_item1_) }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  _item1_ }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
 Vec::new() }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<Vec<LC<Type<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Chain(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  _item1_ }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::Let{_item0_:_item0_,id:id,ty:ty,expr:parser.lbx(5,expr)} }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut lhs = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Lhs<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::Set{_item0_:_item0_,lhs:parser.lbx(1,lhs),expr:parser.lbx(3,expr)} }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::While{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,expr:parser.lbx(3,expr)} }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut init = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut size = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::New{_item0_:_item0_,ty:ty,size:parser.lbx(3,size),init:parser.lbx(5,init)} }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut els = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<Else<'lt>>::default()}; let mut then = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::If{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,then:parser.lbx(3,then),els:parser.lbx(4,els)} }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Else::Else(_item0_,parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Unit }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Add(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Sub(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Mul(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  Expr::Pow(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<ExprList<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::FunCall(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Lhs<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::Id(_item0_) }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  Expr::Paren(parser.lbx(1,_item1_)) }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Lhs::Id(_item0_) }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Lhs<'lt>>::default()};  Lhs::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ExprList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()};  ExprList(parser.lbx(0,_item0_),_item1_,) }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<()>::default()};  _item1_ }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<i64>::default()};  Expr::Num(_item0_) }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::String(_item0_) }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::True(_item0_) }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::False(_item0_) }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::Null(_item0_) }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<&'lt str>::default()};  Expr::Unit(_item0_) }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(72,140,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_6_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_50(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ArrayType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("SingleParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MultiParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_21_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_62_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_63_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_63_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";

 for i in 0..1577 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_54(ExprList<'lt>),
  Enumvariant_0(Program<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_50(&'lt str),
  Enumvariant_20(i64),
  Enumvariant_59(Else<'lt>),
  Enumvariant_66(Decl<'lt>),
  Enumvariant_70(Type<'lt>),
  Enumvariant_44(Vec<LC<&'lt str>>),
  Enumvariant_63(()),
  Enumvariant_72(Lhs<'lt>),
  Enumvariant_67(Vec<LC<Decl<'lt>>>),
  Enumvariant_61(Vec<LC<Expr<'lt>>>),
  Enumvariant_57(ParamList<'lt>),
  Enumvariant_64(Expr<'lt>),
  Enumvariant_58(TypeList<'lt>),
  Enumvariant_68(Vec<LC<Type<'lt>>>),
  Enumvariant_71(FunType<'lt>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct rustlrlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> rustlrlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> rustlrlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["_WILDCARD_TOKEN_",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')','=',':','%','|',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#"="#,"ASSIGN"),(r#"||"#,"OR"),(r#":"#,"COLON"),(r#"%"#,"MOD"),(r#"|"#,"PIPE"),] {lexnames.insert(k,v);}
    stk.add_custom("WHILE", r"\bwhile\b");
    stk.add_custom("LET", r"\blet\b");
    stk.add_custom("SET", r"\bset\b");
    stk.add_custom("IF", r"\bif\b");
    stk.add_custom("THEN", r"\bthen\b");
    stk.add_custom("ELSE", r"\belse\b");
    stk.add_custom("DO", r"\bdo\b");
    stk.add_custom("NEW", r"\bnew\b");
    stk.add_custom("TRUE", r"\btrue\b");
    stk.add_custom("FALSE", r"\bfalse\b");
    stk.add_custom("NULL", r"\bnull\b");
    stk.add_custom("UNIT", r"\bunit\b");
    stk.add_custom("TINT", r"\bInt\b");
    stk.add_custom("TBOOL", r"\bBool\b");
    stk.add_custom("TSTRING", r"\bString\b");
    stk.add_custom("TUNIT", r"\bUnit\b");
    stk.add_custom("Id", r"[a-zA-Z_][a-zA-Z0-9'_]*");
    stk.set_line_comment("--");
    rustlrlexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for rustlrlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Custom("WHILE", WHILE)      => Some(TerminalToken::from_raw(token,"WHILE",RetTypeEnum::Enumvariant_50( WHILE
))),
      RawToken:: Custom("LET", LET)          => Some(TerminalToken::from_raw(token,"LET",RetTypeEnum::Enumvariant_50( LET
))),
      RawToken:: Custom("SET", SET)          => Some(TerminalToken::from_raw(token,"SET",RetTypeEnum::Enumvariant_50( SET
))),
      RawToken:: Custom("IF", IF)            => Some(TerminalToken::from_raw(token,"IF",RetTypeEnum::Enumvariant_50( IF
))),
      RawToken:: Custom("THEN", THEN)        => Some(TerminalToken::from_raw(token,"THEN",RetTypeEnum::Enumvariant_50( THEN
))),
      RawToken:: Custom("ELSE", ELSE)        => Some(TerminalToken::from_raw(token,"ELSE",RetTypeEnum::Enumvariant_50( ELSE
))),
      RawToken:: Custom("DO", DO)            => Some(TerminalToken::from_raw(token,"DO",RetTypeEnum::Enumvariant_50( DO
))),
      RawToken:: Custom("NEW", NEW)          => Some(TerminalToken::from_raw(token,"NEW",RetTypeEnum::Enumvariant_50( NEW
))),
      RawToken:: Custom("TRUE", TRUE)        => Some(TerminalToken::from_raw(token,"TRUE",RetTypeEnum::Enumvariant_50( TRUE
))),
      RawToken:: Custom("FALSE", FALSE)      => Some(TerminalToken::from_raw(token,"FALSE",RetTypeEnum::Enumvariant_50( FALSE
))),
      RawToken:: Custom("NULL", NULL)        => Some(TerminalToken::from_raw(token,"NULL",RetTypeEnum::Enumvariant_50( NULL
))),
      RawToken:: Custom("UNIT", UNIT)        => Some(TerminalToken::from_raw(token,"UNIT",RetTypeEnum::Enumvariant_50( UNIT
))),
      RawToken:: Custom("TINT", TINT)        => Some(TerminalToken::from_raw(token,"TINT",RetTypeEnum::Enumvariant_50( TINT
))),
      RawToken:: Custom("TBOOL", TBOOL)      => Some(TerminalToken::from_raw(token,"TBOOL",RetTypeEnum::Enumvariant_50( TBOOL
))),
      RawToken:: Custom("TSTRING", TSTRING)  => Some(TerminalToken::from_raw(token,"TSTRING",RetTypeEnum::Enumvariant_50( TSTRING
))),
      RawToken:: Custom("TUNIT", TUNIT)      => Some(TerminalToken::from_raw(token,"TUNIT",RetTypeEnum::Enumvariant_50( TUNIT
))),
      RawToken:: Custom("Id", id)  => Some(TerminalToken::from_raw(token,"Id",RetTypeEnum::Enumvariant_50( id
))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"Num",RetTypeEnum::Enumvariant_20( n
))),
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"Str",RetTypeEnum::Enumvariant_50(_tt))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_50(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
