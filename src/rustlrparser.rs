//Parser generated by rustlr for grammar rustlr
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::rustlr_ast::*;

static SYMBOLS:[&'static str;81] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","!","[","]","(",")","COLON","MOD","PIPE","ASSIGN","OR","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","TRUE","FALSE","NULL","UNIT","TINT","TBOOL","TSTRING","TUNIT","Id","Num","Str","Program","Decl","Type","Expr","ParamList","TypeList","ExprList","FunType","Else","Lhs","SingleParam","MultiParam","ArrayType","BaseType","Chain","Stmt","Or","And","Comp","AddSub","MulDiv","Pow","Primary","Literal","Unary","NEWRENT_1_0","NEWSEQNT_6_0","NEWRENT_7_1","NEWSEQNT_21_0","NEWRENT_22_1","NEWSEQNT_26_0","NEWRENT_27_1","NEWSEQNT_68_0","NEWRENT_69_1","START","EOF"];

static TABLE:[u64;1803] = [300647776257,343597449218,193273659393,115964182530,281818574094338,281590941089792,281672545402881,563293550804995,844540894380034,844768527646722,1126080295796736,1407456488325120,1407465078325248,1689060314185729,1689030249480192,1970526701223937,1970496636583936,1970500931289088,1970573946126337,1970569651093505,1970488046583808,1970492341420032,2251885714145280,2533584029220865,2533283380789250,2533360690200578,2814835667304450,2814852847173634,2814762652860418,2814758357893122,2814822782402562,3096297759047682,3096237629505538,3096233334538242,3096310643949570,3096327823818754,3377772736282624,3377802800988160,3659187582861314,3659183287894018,3659277777174530,3659260597305346,3659247712403458,3940752754081794,3940658264801282,3940735574212610,3940722689310722,3940662559768578,4222227730530306,4222137536217090,4222133241249794,4222197665759234,4222210550661122,4503672642404354,4503612512862210,4503608217894914,4503685527306242,4503702707175426,4785164799770624,5066558172233728,5066635480465410,5066854524911617,5348256488620033,5348046034436096,5348209243521024,5348144819666944,5348213539078144,5348183472996352,5348312323653633,5348106163519488,5348149113454592,5348290848292865,5348299437178881,5348316618031105,5348140523847680,5348320912211969,5348093279141888,5348282258751489,5348174883913728,5348204949274624,5348136229273600,5348303732211713,5348179179012096,5348170588749824,5348230717964289,5348286553784321,5348277962866689,5348166293913600,5348308028293121,5348295142014977,5629576847032320,5911219325042689,5911176378056705,5911150605238272,5911137720532992,5911215032631297,5911223620075521,5911056118775808,5911197852827649,5911146310533120,5911142015369216,5911210737860609,6192535387504642,6192458078093314,6474104856772608,6755408033611778,6755459574595584,6755485343023106,6755528292696066,6755438099955712,6755450984529920,6755442394660864,6755455279759360,6755446689759232,6755476753088514,6755536882630658,6755498227924994,6755463868186626,6755515407794178,6755403738644482,6755743041060866,6755532587663362,6755506817859586,7037166478295041,7037054809538560,7037127823130625,7036998973718528,7037020449013760,7037157888557057,7037132119015425,7037170772475905,7037145002278913,7036990384111616,7037153592475649,7037140708556801,7037162183917569,7036956023783424,7037016154177536,7037136414048257,7037149297442817,7036895894700032,7037063399342080,7037029039276032,7037080580456449,7036943139405824,7037106348883969,7036986089537536,7037033333260288,7037059103784960,7036994679930880,7037024744177664,7318435298803714,7318396644098050,7318400939065346,7318405234032642,7318383759196162,7318482543443970,7318465363574786,7318443888738306,7318448183705602,7318375169261570,7318409528999938,7318413823967234,7318379464228866,7318392349130754,7318692996841474,7318357989392386,7318478248476674,7318426708869122,7318486838411266,7318366579326978,7318388054163458,7318456773640194,7318353694425090,7318370874294274,7600167971651586,7599957518254082,7599910273613826,7599931748450306,7599961813221378,7599880208842754,7599953223286786,7599940338384898,7599832964202498,7599923158515714,7599828669235202,7599875913875458,7599867323940866,7599884503810050,7599863028973570,7599888798777346,7599871618908162,7599845850415104,7599901683679234,7599841555382272,7881329417125888,7881398135422978,7881355185750018,7881415315292162,7881406725357570,7881325122224128,7881346595815426,7881642948558850,7881432495161346,7881338005880834,7881316531044354,7881350890782722,7881320826011650,7881303646142466,7881385250521090,7881376660586498,7881342300848130,7881393841766400,7881359480717314,7881436790128642,7881428200194050,7881307941109762,7881363775684610,8162885996380160,8162933240102912,8163070679318529,8162924651020288,8162843046248448,8162920355856384,8162894586773504,8162916061020160,8162928946118656,8163062090760193,8162855930626048,8162954716381184,8163040615399425,8163027729973249,8163049204285441,8163006255726593,8163066385137665,8162898880561152,8162959010627584,8162980487692289,8163044909121537,8163036320890881,8162890290954240,8163057795399681,8163032025858049,8163053499318273,8162795801542656,8162963306184704,8444382448975874,8444300844597250,8444270779826178,8444356679172098,8444309434531842,8444348089237506,8444305139564546,8444275074793474,8444266484858882,8444279369760770,8444313729499138,8444365269106690,8444253599956994,8444592902373378,8444257894924290,8444292254662658,8444335204335618,8444343794270210,8444378154008578,8444386743943170,8444296549629954,8444287959695362,8444283665776640,8444326614401026,8726067875610626,8725840242343938,9007495612268545,9007379646513152,9007349581152256,9007267976380416,9007491315269633,9007345285988352,9007388236316672,9007358170234880,9007280860758016,9007353876250624,9007220731674624,9007487020892161,9007431185858561,9007383940759552,9288863213027328,9288854623223808,9288833146945536,9288828852961280,9288961997602817,9288695708385280,9288970589044737,9288966291980289,9288820262699008,9288755837468672,9288858917470208,9288824557862912,9288906162569217,9288742953091072,9570329601703936,9851722970693634,9851740150562818,9851710085791746,9851761625399298,9851628481413122,9851701495857154,9851757330432002,9851632776380418,9851753035464706,9851967783829506,10133124936171522,10133150705975298,10133176475779074,10133129231138818,10133120641204226,10133215130484738,10133193655648258,10133159295909890,10133163590877186,10133228015386626,10133116346236930,10133146411008002,10133103461335042,10133142116040706,10133133526106114,10133206540550146,10133137821073410,10133442763751426,10133155000942594,10133232310353922,10133185065713666,10133107756302338,10133197950615554,10133236605321218,10414668632227842,10414621387587586,10414612797652994,10414707286933506,10414634272489474,10414629977522178,10414595617783810,10414617092620290,10414599912751106,10414608502685698,10414690107064322,10414604207718402,10414917740331010,10414578437914626,10414651452358658,10414681517129730,10414638567456770,10414702991966210,10414672927195138,10414660042293250,10414582732881922,10414711581900802,10414591322816514,10414625682554882,10696298224156673,10696216619450368,10696293929123841,10696212324614144,10696220914614272,10696250983448577,10696225209319424,10977567046238210,10977571341205506,10977657240551426,10977554161336322,10977631470747650,10977601405976578,10977528391532546,10977545571401730,10977549866369026,10977652945584130,10977575636172802,10977618585845762,10977609995911170,10977622880813058,10977562751270914,10977640060682242,10977532686499842,10977661535518722,10977584226107394,10977558456303618,10977588521074690,10977541276434434,10977867693948930,10977579931140098,11259278243135489,11259145099673600,11259188050001920,11259110740197376,11259256769675265,11259020545359872,11259265359216641,11259252473790465,11259080674443264,11259157983920128,11259140804837376,11259291128954881,11259153689935872,11259205231902721,11259149394837504,11259067790065664,11259269652938753,11259119330590720,11259179460198400,11259123624378368,11259115034771456,11259183754444800,11259295423135745,11259261064708097,11259286834577409,11259282539216897,11259230999543809,11259273948102657,11540568539332610,11540482639986690,11540525589659650,11540516999725058,11540512704757762,11540504114823170,11540572834299906,11540551359463426,11540581424234498,11540559949398018,11540611489005570,11540538474561538,11540590014169090,11540817647435778,11540478345019394,11540499819855874,11540529884626946,11540607194038274,11540534179594242,11540508409790466,11540521294692354,11540602899070978,11540495524888578,11540491229921282,11822056400224258,11821991975714818,11822047810289666,11821957615976450,11822004860616706,11821987680747522,11822043515322370,11821953321009154,11822082170028034,11821970500878338,11822009155584002,11821983385780226,11821974795845634,11821996270682114,11822013450551298,11822064990158850,11822292623425538,11821966205911042,11822026335453186,11822034925387778,11822077875060738,11822000565649410,11821979090812930,11822086464995330,12103561440002050,12103767598432258,12103531375230978,12103552850067458,12103501310459906,12103539965165570,12103509900394498,12103522785296386,12103432590983170,12103488428179456,12103428296015874,12103557145034754,12384971994890240,12666429790093314,12666468444798978,12666438380027906,12666425495126018,12666382545453058,12666378250485762,12666404020289538,12666421200158722,12666459854864386,12666451264929794,12666507099504642,12666717552902146,12666502804537346,12666412610224130,12666395430354946,12666481329700866,12666434085060610,12666416905191426,12666391135387650,12666399725322242,12666489919635458,12666511394471938,12666472739766274,12947904767983618,12947977782427650,12947883293147138,12947926242820098,12947853228376066,12947878998179842,12947900473016322,12947943422689282,12948192530792450,12947934832754690,12947887588114434,12947964897525762,12947982077394946,12947956307591170,12947874703212546,12947986372362242,12947913357918210,12947857523343362,12947870408245250,12947896178049026,12947947717656578,12947909062950914,12947866113277954,12947891883081730,13229555838877697,13229504299335680,13510820361011202,13510906260357122,13510859015716866,13510828950945794,13510893375455234,13510936325128194,13510914850291714,13510803181142018,13510884785520642,13510837540880386,13510932030160898,13510863310684162,13510841835847682,13510927735193602,13510816066043906,13510871900815362,13510824655978498,13510833245913090,13510876195586050,13510880491864064,13510846130814978,13510850425782274,13510854720749570,13511142483558402,13510897670422530,13510807476109314,13792389824708610,13792600281776129,13792282450526210,13792411299545090,13792359759937538,13792617457975298,13792372644839426,13792407004577794,13792402709610498,13792351170002946,13792278155558914,14073886276845570,14073847622139906,14073753132859394,14074092435275778,14073877686910978,14073881981878274,14073826147303426,14073864802009090,14073856215220224,14073834737238018,14073757427826690,14355258175848450,14355240995979266,14355279650684930,14355271060750338,14355266765783042,14355283945652226,14355352665128962,14355309715456002,14355262470815746,14355228111077378,14355322600357890,14355318305390594,14355249585913858,14355361255063554,14355331190292482,14355232406044674,14355288240619522,14355275355717634,14355567413493762,14355339780227074,14355245290946562,14355301125521410,14355253880881154,14355356960096258,14636801869152258,14636784689283074,14636711674839042,14636707379871746,14636771804381186,14918375634698241,14918349859979264,14918345565274112,14918341270110208,14918336975273984,14918388519665665,14918418579783681,14918422874816513,15199751822704642,15481226804002816,15762611586465792,15762671711551488,16044176752771074,16325557239545858,16325634548957186,16607311392079873,16607045102862336,16607307096719361,16607298509668353,16607092347568128,16607178247438336,16607212607504384,16607315686457345,16607169657176064,16607255557046273,16607319980638209,16607182541422592,16607105231945728,16607208311947264,16607302800637953,16607204017700864,16607173952339968,16888687584215040,16888794957348865,16888786368790529,16888657518133248,16888653224148992,16888683288657920,16888648929050624,16888773486444545,16888782073430017,16888777777348609,16888580208656384,16888644633886720,16888678994411520,16888567324278784,16888790663168001,16888520079572992,16888730533756929,17170269934059521,17170248463220737,17170261345501185,17170153971122176,17170265639878657,17170119610597376,17170205510467585,17170252754059265,17170123905761280,17170162560925696,17170158265368576,17170055185367040,17170128200859648,17169995056283648,17170042300989440,17170257050140673,17170132494843904,17451598882471936,17451594587308032,17451736322211841,17451530162077696,17451727730769921,17451744910770177,17451628947832832,17451470032994304,17451723439996929,17451603177570304,17451633242079232,17451680487178241,17451637537636352,17451740616589313,17451607471554560,17451732026851329,17451517277700096,17733202707480577,17733211298922497,17733005138788352,17733219887480833,17733108218789888,17733198416773121,17733112514347008,17733207003561985,17733082448265216,17733155463888897,17733215593299969,17732992254410752,17733103924543488,17733073859182592,17732945009704960,17733069564018688,17733078154280960,18014467231121408,18014548835893248,18014480115499008,18014419986415616,18014690570010625,18014630440599553,18014553130991616,18014557424975872,18014686275633153,18014587491057664,18014681980272641,18014677684191233,18014694864191489,18014578901254144,18014673393549313,18014583195500544,18014544540729344,18295959391764480,18577533148921856,18577627642068993,18577503084412928,18577430068920320,18577507378397184,18577528854675456,18577494494150656,18577631933693953,18577640523431937,18577369939836928,18577636229054465,18577644817612801,18577498789314560,18577537444478976,18577417184542720,18577580394020865,18859115500142593,18859012421189632,18859119794323457,18859008125632512,18859106910404609,18858892161253376,18858982355107840,18858973766025216,18859102618845185,18859003831386112,18858844916547584,18858905045630976,18859055370731521,18858978061123584,18859111205765121,18858969470861312,19140380022341632,19140530347442177,19140448742735872,19140319893258240,19140487397900288,19140444447571968,19140594771034113,19140483102343168,19140586182475777,19140453037834240,19140367137964032,19140457331818496,19140581890588673,19140478808096768,19140590476853249,19422056867364865,19422065453563905,19422005324152833,19421854999052288,19421794869968896,19421962374610944,19421928014544896,19421923719446528,19422069747744769,19421953784807424,19422061159186433,19421919424282624,19421932308529152,19421958079053824,19421842114674688,19703428761518080,19703394400993280,19703437351321600,19703402991255552,19703407285239808,19703531844141057,19703540430274561,19703480300863489,19703317091385344,19703329975762944,19703398696157184,19703536135897089,19703433055764480,19703269846679552,19703544724455425,19984852202094592,20266490383695873,20266486089318401,20266383009185792,20266494677876737,20266219800100864,20266387304742912,20266267044806656,20266348649578496,20266279929184256,20266357238661120,20266344354414592,20266430254284801,20266378714939392,20266352944676864,20266481797693441,20547707663417346,20547724843286530,20547681893613570,20547733433221122,20547699073482754,20547690483548162,20547711958384642,20547780677861378,20547694778515458,20547716253351938,20547729138253826,20547720548319234,20547703368450050,20547810742632450,20547750613090306,20547806447665154,20547759203024898,20547767792959490,20547802152697858,20547789267795970,20547772087926786,20547737728188418,20547677598646274,20548016901062658,20829195524964354,20829285719277570,20829191229997058,20829242769604610,20829186935029762,20829199819931650,20829491877707778,20829264244441090,20829234179670018,20829156870258690,20829212704833538,20829225589735426,20829174050127874,20829152575291394,20829281424310274,20829182640062466,20829204114898946,20829277129342978,20829255654506498,20829247064571906,20829208409866242,20829169755160578,20829178345095170,20829165460193282,21110713454362624,21392171251269632,21673710652555264,21955323063107585,21955344538140673,21955340243959809,21955331654221825,21955232869449728,21955116905070592,21955318773317633,21955194214678528,21955129789448192,21955335949582337,21955202804940800,21955280114548737,21955228575203328,21955327358140417,21955207098925056,21955198509842432,21955069660364800,21955237165006848,22236544637075456,22236647716093952,22236707846160384,22236819514851329,22236677781651456,22236780861390849,22236639126487040,22236785156423681,22236682075635712,22236776565506049,22236798039818241,22236729325584385,22236815220670465,22236604766158848,22236673486553088,22236802334851073,22236664896552960,22236793744654337,22236591881781248,22236669191389184,22236643422306304,22236755091259393,22236806630932481,22236712141717504,22236703551913984,22236634831912960,22236789450932225,22236810926292993,22518071158439936,22518101223145472,22799546132267010,22799576197038082,23081167140880385,23080969567207424,23081214381064193,23081094121521152,23081089826684928,23081098416685056,23081068352438272,23081072646225920,23081210086555649,23081240150802433,23081227264983041,23081180021391361,23081201495638017,23081222969950209,23081244444983297,23081235856424961,23081205791522817,23081107005767680,23081029696290816,23081064056619008,23081016811913216,23081154255912961,23081132776292352,23081231561064449,23081102711783424,23081137071849472,23081128482045952,23081218674786305,23081059762044928,23362556212609026,23362427369291776,23362539032739842,23362431658557442,23362508967968770,23362551917641730,23362560507576322,23362521852870658,23362766666006530,23362745196937217,23362500378034178,23644194398404609,23644164339138561,23644056959188992,23644087025270784,23643966765334528,23644190104223745,23643919520628736,23644181514485761,23644078435467264,23644044074942464,23644185809846273,23644177218404353,23644172923371521,23643979649712128,23644048370106368,23644129974812673,23644052665204736,23644082729713664,23644168628207617,23925690855522305,23925446036160512,23925458921193474,23925381611782146,24206933904064512,24488438940172288,24488554904944641,24488477595336704,24488511955402752,24488391695466496,24488443235991552,24488593558339585,24488507659845632,24488580675076097,24488602148536321,24488584970108929,24488529139924993,24488344450760704,24488615034355713,24488589264617473,24488610739978241,24488464710238208,24488447529779200,24488469005074432,24488503365599232,24488481889320960,24488576379191297,24488404579844096,24488473300238336,24488606444617729,24488619328536577,24488434645598208,24488597853503489,24769974044852224,24770042764656641,24769999821733889,24769961160146944,24770047059689473,24769965454983168,24769969750147072,25051410369085442,25051281520066562,25051328764706818,25051401779150850,25051333059674114,25051315879804930,25051290111442944,25051277225099266,25051380304314370,25051311584837634,25051324469739522,25051320174772226,25051616527515650,25051350239543298,25051388894248962,25051337354641410,25051294406475776,25051358829477890,25051406074118146,25051371714379778,25332795151351810,25332885345665026,25332803741286402,25332812331220994,25332756496646146,25332876755730434,25332863870828546,25332846690959362,25332825216122882,25332752201678850,25332881050697730,25332833806057474,25332799446319106,25333091504095234,25332855280893954,25332808036253698,25332765088153600,25332790856384514,25332769383186432,25332786561417218,25614265833357314,25614227178651650,25614321667932162,25614351732703234,25614356027670530,25614566481068034,25614283013226498,25614274423291906,25614261538390018,25614231473618946,25614300193095682,25614287308193794,25614240064864256,25614270128324610,25614338847801346,25614330257866754,25614308783030274,25614278718259202,25614244359897088,25614360322637826,25895762284707842,25895783759544322,25895736514904066,25895740809871362,25895706450132994,25895749399805954,25895702155165698,25895796644446210,25895757989740546,25895805234380802,25895826709217282,25895775169609730,25895753694773250,25895813824315394,25895835299151874,25895745104838658,25895719336607744,25895831004184578,25895715041574912,25896041457582082,26177232966582274,26177516434423810,26177280211222530,26177305981026306,26177181426974722,26177220081680386,26177194313318400,26177215786713090,26177237261549570,26177258736386050,26177310275993602,26177288801157122,26177271621287938,26177190018285568,26177301686059010,26177177132007426,26177224376647682,26177250146451458,26177211491745794,26177228671614978,26458755187671042,26458695058128898,26458703648063490,26458776662507522,26458707943030786,26458785252442114,26458656403423234,26458712237998082,26458780957474818,26458733712834562,26458746597736450,26458690763161602,26458763777605634,26458686468194306,26458725122899970,26458664994996224,26458699353096194,26458669290029056,26458991410872322,26458652108455938,26740251640659970,26740170036281346,26740161446346754,26740165741314050,26740217280921602,26740230165823490,26740139971510274,26740148561444866,26740260230594562,26740200101052418,26740178626215938,26740238755758082,26740208690987010,26740127086608386,26740131381575682,26740466389024770,26740144266477570,26740187216150530,26740174331248642,26740152856412162,26740157151379458,26740221575888898,26740255935627266,26740182921183234,27021730911354882,27021675076780034,27021941364752386,27021645012008962,27021696551616514,27021657896910850,27021619242205186,27021623538548736,27021602062336002,27021662191878146,27021713731485698,27021649306976258,27021636422074370,27021653601943554,27021726616387586,27021606357303298,27021683666714626,27021640717041666,27021705141551106,27021627833450496,27021614947237890,27021735206322178,27021692258091008,27303128578719746,27303416341528578,27303137168654338,27303201593163778,27303102810161152,27303210183098370,27303094218981378,27303180118327298,27303150053556226,27303205888131074,27303077039112194,27303115693817858,27303081334079490,27303167234801664,27303171528392706,27303158643490818,27303132873687042,27303188708261890,27303119988785154,27303111398850562,27303089924014082,27303098515259392,27303124283752450,27584564900921346,27584680865038338,27584685160005634,27584577785823234,27584891318435842,27584625030463490,27584556310986754,27584569195888642,27584594965692418,27584642210332674,27584607850594306,27584586375757826,27584603555627010,27584676570071042,27584552016019458,27584655095234562,27584590670725122,27584633620398082,27584573490855938,27584612145561602,27584646505299970,27584599260659714,27584663685169154,27866074237304834,27866121481945090,27866052762468354,27866031287631874,27866082827239426,27866151546716162,27866048467501058,27866130071879682,27866155841683458,27866039877566466,27866065647370242,27866117186977794,27866078532272130,27866069942337538,27866138661814274,27866108597043202,27866044172533762,27866026992664578,27866100007108610,27866087122206722,27866061352402946,27866366295080962,27866160136650754,28147519149375490,28147527739310082,28147841271922690,28147574983950338,28147536329244674,28147553509113858,28147557804081154,28147635113492482,28147540624211970,28147626523557890,28147523444342786,28147596458786818,28147630818525186,28147592163819522,28147562099048450,28147501969506306,28147605048721410,28147544919179266,28147506264473602,28147514854408194,28147583573884930,28147549214146562,28147613638656002,28429097203728384,28429238938566657,28429256118566913,28429178814005249,28429153039548416,28429260413927425,28429084319547392,28429054253793280,28429243232288769,28429131563270144,28429092909940736,28429230349025281,28429157333794816,28429264708304897,28429122974187520,28429247527452673,28429041369415680,28429226053140481,28429161629351936,28428994124709888,28429088614121472,28429234644058113,28429118679023616,28429269002485761,28429251822485505,28429204578893825,28429114384187392,28429127269285888,28710477692862466,28710456218025986,28710563592208386,28710524937502722,28710486282797058,28710464807960578,28710791225475074,28710576477110274,28710533527437314,28710546412339202,28710494872731650,28710512052600834,28710555002273794,28710503462666242,28710451923058690,28710585067044866,28710499167698946,28710580772077570,28710542117371906,28710473397895170,28710469102927874,28710507757633538,28710490577764354,28992085810806784,28992094400806912,28992090105643008,28992098695512064,28992167415316481,28992171710349313,28992124472524801,29273655279157249,29273547904319488,29273513544253440,29273663868698625,29273603744268289,29273517840072704,29273543609155584,29273586559483904,29273419054841856,29273676752617473,29273582263926784,29273668162420737,29273629509025793,29273659574190081,29273509249679360,29273577969680384,29273693932617729,29273522133860352,29273474890727424,29273539314319360,29273466299547648,29273689638436865,29273556493402112,29273650983272449,29273685344059393,29273552199417856,29273479183925248,29273672457584641,29273681048698881,29555031470112768,29555130255867905,29554954160635904,29554941276258304,29555061536194560,29555104485736449,29555138845409281,29555143139131393,29555052946391040,29555125959983105,29554997110571008,29555057240637440,29555160320770049,29554992816783360,29554988520964096,29555078721044481,29555164615147521,29555022881030144,29555134550900737,29555014291030016,29555151729328129,29554984226390016,29555027176128512,29555156025409537,29555018585866240,29554894031552512,29555168909328385,29555147434295297,29836484972838914,29836399074803712,29836433433231362,29836411958394882,29836386190229504,29836424843296770,29836407664869376,29836394780033024,29836390484934656,29836463498002434,29836356123820034,29836351828852738,29836403370033152,29836454908067842,29836446318133250,29836476382904322,29836480677871618,29836691131269122,30117899825512448,30399593839460353,30399439221161984,30399572364427265,30399550890115073,30399379090767872,30399482170769408,30399580955541505,30399563775541249,30399456400244736,30399413451096064,30399585250902017,30399529415868417,30399452106260480,30399443515998208,30399576659460097,30399559481032705,30399486466326528,30399477876523008,30399409156521984,30399503651307521,30399422040702976,30399366206390272,30399555185999873,30399568069263361,30399447811162112,30399318961684480,30399589545279489,30399417746915328,30680952853233664,30680793938395136,30680978628083713,30681034457743361,30680927082971136,30681038752251905,30681060227612673,30680961443037184,30680841183100928,30680854067478528,30681047341137921,30680918492708864,30680931376955392,30681068816171009,30680884133232640,30681055932252161,30680957147480064,30680888427806720,30681004392579073,30681051636170753,30680914197872640,30681043045974017,30680897017413632,30681030162710529,30680922787872768,30680892723625984,30681025866825729,30681064521990145,30962333342040066,30962582453878785,30962256032628738,31243808322551808,31525467976105985,31525352013103104,31525356307087360,31525278997610496,31525450803052545,31525309063364608,31525266113232896,31525429322711041,31525463682383873,31525343422840832,31525347718004736,31525317653757952,31525455092842497,31525485157744641,31525476566302721,31525493746302977,31525472271269889,31525382077612032,31525321947545600,31525339128004608,31525459387875329,31525218868527104,31525480862384129,31525313357938688,31525386373169152,31525377783365632,31525489452122113,31806788334256130,31807015967522818,31806749679550466,31806771154386946,31806801219158018,31806680960073730,31806758269485058,31806805514125314,31806809809092610,31806676665106434,32088155937374210,32088246131687426,32088280491425794,32088276196458498,32088284786393090,32088151642406914,32088211774636032,32088254721622018,32088233246785538,32088263311556610,32088224656850946,32088490944823298,32369708222382082,32369935862792193,32369630920179712,32651110191923200,32932688239525890,32932915872792578,33214120267612160,33214150332252162,33495608130207746,33495655381270528,33495526525829122,33495599540273154,33495621015109634,33495865828245506,33495530820796418,33495638194978818,33495651079880706,33495659669815298,33495749870485505,33777100293275648,33777070221033472,34058570975084544,34339955750666242,34340033060077570,34340076009750530,34339951455698946,34340080304717826,34340045944979458,34340084599685122,34340290758115330,34340063124848642,34340024470142978,34621430729342978,34621465089081346,34621520923656194,34621486563917826,34621495154180098,34621443614244866,34621460794114050,34621447909212162,34621559578361858,34621477973983234,34621538103525378,34621550988427266,34621456499146754,34621426434375682,34621452204179458,34621439319277570,34621765736792066,34621499448819714,34621555283394562,34621469384048642,34621516628688898,34621508038754306,34621482268950530,34621529513590786,34621473679015938,34903034553040898,34902983013433346,34903025963106306,34902901409054722,34903013078204418,34903030258073602,34903240711471106,34902905704022018,34902974423498754,34902995898335234,35184449407156224,35465855664455680,35465932969279490,35466177787068417,35747364995858434,35747382175727618,35747429420367874,35747386470694914,35747416535465986,35747343521021954,35747352110956546,35747369290825730,35747420830433282,35747438010302466,35747455190171650,35747459485138946,35747360700891138,35747377880760322,35747339226054658,35747356405923842,35747330636120066,35747407945531394,35747450895204354,35747399355596802,35747326341152770,35747373585793026,35747665643569154,35747347815989250,36028930164654082,36028882920013826,36028805610602498,36028874330079234,36028934459621378,36028912984784898,36029140618051586,36028925869686786,36028895804915714,36028801315635202,36310357896527874,36310280587116546,36591910181994496,36591923066699776,36591948844957697,36591914476830720,36591918771994624,36591991786504193,36591996081537025,36873389453541376,36873393748705280,36873385158705152,36873398043410432,36873423821733889,36873471058247681,36873466763214849,37154830071955458,37154774237380610,37155040525352962,37154705517903874,37154812892086274,37154701222936578,37154782827315202,37154834366922754,37154795712217090,37154825776988162,37436253508534272,37436317933764608,37436459668668417,37436433898799105,37436352294289408,37436287868862464,37436360884092928,37436403833634817,37436438193307649,37436378070188033,37436322228928512,37436193379450880,37436425307881473,37436446782193665,37436468257226753,37436240624156672,37436313638928384,37436292164681728,37436451077226497,37436429603766273,37436356588535808,37436463963045889,37436296458469376,37436330818011136,37436455373307905,37436283574288384,37436326524026880,37436442487029761,37717758550999040,37717767141392384,37717921758904321,37717913170018305,37717827271000064,37717908875509761,37717771435180032,37717900284592129,37717926053937153,37717762845573120,37717835860803584,37717904580476929,37717668356161536,37717801500737536,37717831565246464,37717797205639168,37717938939756545,37717943233937409,37717930350018561,37717792910475264,37717715600867328,37717853046964225,37717917463740417,37717805794721792,37717934645379073,37717728485244928,37717878810345473,37717788615639040,37999388146728961,37999375261302785,37999276477448192,37999246411890688,37999383852220417,37999267887185920,37999190577577984,37999272182349824,37999203461955584,37999379557187585,37999143332872192,37999306541957120,37999302247710720,37999328023740417,37999263592349696,37999413916467201,37999418210648065,37999237822283776,37999392440451073,37999405326729217,37999310837514240,37999280771432448,37999353787056129,37999396735614977,37999401030647809,37999409622089729,37999233527709696,37999242118103040,38280669851418626,38280699916189698,38562329510608897,38562252201132032,38562363869888513,38562192071524352,38562346689036289,38562217840607232,38562140530999296,38562213545771008,38562303740477441,38562256495378432,38562187775705088,38562368164069377,38562355280150529,38562325214724097,38562333805641729,38562342393872385,38562153415376896,38562196365312000,38562338100150273,38562277977227265,38562359575511041,38562226430869504,38562260790935552,38562350984069121,38562093286293504,38562183481131008,38562230724853760,38562222135771136,38843555380592642,38843632690003970,39125107663503362,39125030354092034,39125094778535936,39406599819952130,39406569755246592,39688070502678530,39688100567449602,39688057617776642,39688049027842050,39687980308365314,39688104862416898,39688315315814402,39688109157384194,39687976013398018,39688087682547714,39969579838799874,39969790292197378,39969575543832578,39969545479061506,39969450989780994,39969524004225026,39969584133767170,39969562658930690,39969455284748290,39969532594159618,40250998988537856,40532405240725506,40532482550136834,40813875920109570,40813957524488194,40813987589259266,40813970409390082,40814004769128450,40813948934553602,40814215222525954,40814009064095746,40814000474161154,40813880215076866,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_50(_x_50)=parser.popstack().value { _x_50 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Decl::Var{_item0_:_item0_,id:id,ty:ty,expr:expr} }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<FunType<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut params = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Decl::Fun{_item0_:_item0_,id:id,params:params,ty:ty,expr:expr} }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  _item1_ }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::Int(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::Bool(_item0_) }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::Unit(_item0_) }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::String(_item0_) }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()};  Type::Array(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()};  FunType::SingleParam{ty:ty,ret:ret} }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<TypeList<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  FunType::MultiParam{ty:ty,ret:ret} }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<Vec<LC<Type<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()};  TypeList::TypeList(_item0_,_item1_) }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  _item1_ }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
 Vec::new() }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<Vec<LC<Type<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Chain(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  _item1_ }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Let{_item0_:_item0_,id:id,ty:ty,expr:parser.lbx(5,expr)} }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut lhs = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<Lhs<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Set{_item0_:_item0_,lhs:parser.lbx(1,lhs),expr:parser.lbx(3,expr)} }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::While{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,expr:parser.lbx(3,expr)} }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut init = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut size = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::New{_item0_:_item0_,ty:ty,size:parser.lbx(3,size),init:parser.lbx(5,init)} }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut els = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<Else<'lt>>::default()}; let mut then = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::If{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,then:parser.lbx(3,then),els:parser.lbx(4,els)} }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Else::Else(_item0_,parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Unit }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Add(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Sub(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Mul(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  Expr::Pow(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<ExprList<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::FunCall(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<Lhs<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Id(_item0_) }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  Expr::Paren(parser.lbx(1,_item1_)) }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Lhs::Id(_item0_) }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<Lhs<'lt>>::default()};  Lhs::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ExprList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()};  ExprList(parser.lbx(0,_item0_),_item1_,) }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<()>::default()};  _item1_ }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<i64>::default()};  Expr::Num(_item0_) }

fn _semaction_rule_72_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::String(_item0_) }

fn _semaction_rule_73_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::True(_item0_) }

fn _semaction_rule_74_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::False(_item0_) }

fn _semaction_rule_75_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Null(_item0_) }

fn _semaction_rule_76_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Unit(_item0_) }

fn _semaction_rule_77_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(78,146,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_50(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_50(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_6_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_77(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ArrayType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("SingleParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MultiParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_21_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_68_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_69_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_69_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1803 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_2((usize,usize)),
  Enumvariant_67(ExprList<'lt>),
  Enumvariant_78(Vec<LC<Expr<'lt>>>),
  Enumvariant_73(Vec<LC<&'lt str>>),
  Enumvariant_20(i64),
  Enumvariant_74(Type<'lt>),
  Enumvariant_61(()),
  Enumvariant_0(Program<'lt>),
  Enumvariant_63(Lhs<'lt>),
  Enumvariant_59(Decl<'lt>),
  Enumvariant_75(TypeList<'lt>),
  Enumvariant_76(Expr<'lt>),
  Enumvariant_70(ParamList<'lt>),
  Enumvariant_66(FunType<'lt>),
  Enumvariant_65(Vec<LC<Type<'lt>>>),
  Enumvariant_54(Else<'lt>),
  Enumvariant_50(Vec<LC<Decl<'lt>>>),
  Enumvariant_77(&'lt str),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct rustlrlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> rustlrlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> rustlrlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["_WILDCARD_TOKEN_",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')',':','|','%','=',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#":"#,"COLON"),(r#"|"#,"PIPE"),(r#"||"#,"OR"),(r#"%"#,"MOD"),(r#"="#,"ASSIGN"),] {lexnames.insert(k,v);}
    stk.add_custom("WHILE", r"\bwhile\b");
    stk.add_custom("LET", r"\blet\b");
    stk.add_custom("SET", r"\bset\b");
    stk.add_custom("IF", r"\bif\b");
    stk.add_custom("THEN", r"\bthen\b");
    stk.add_custom("ELSE", r"\belse\b");
    stk.add_custom("DO", r"\bdo\b");
    stk.add_custom("NEW", r"\bnew\b");
    stk.add_custom("TRUE", r"\btrue\b");
    stk.add_custom("FALSE", r"\bfalse\b");
    stk.add_custom("NULL", r"\bnull\b");
    stk.add_custom("UNIT", r"\bunit\b");
    stk.add_custom("TINT", r"\bInt\b");
    stk.add_custom("TBOOL", r"\bBool\b");
    stk.add_custom("TSTRING", r"\bString\b");
    stk.add_custom("TUNIT", r"\bUnit\b");
    stk.add_custom("Id", r"[a-zA-Z_][a-zA-Z0-9'_]*");
    stk.set_line_comment("--");
    rustlrlexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for rustlrlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Custom("W", WHILE)          => Some(TerminalToken::from_raw(token,"WHILE",RetTypeEnum::Enumvariant_77( WHILE
))),
      RawToken:: Custom("LET", LET)          => Some(TerminalToken::from_raw(token,"LET",RetTypeEnum::Enumvariant_77( LET
))),
      RawToken:: Custom("SET", SET)          => Some(TerminalToken::from_raw(token,"SET",RetTypeEnum::Enumvariant_77( SET
))),
      RawToken:: Custom("IF", IF)            => Some(TerminalToken::from_raw(token,"IF",RetTypeEnum::Enumvariant_77( IF
))),
      RawToken:: Custom("THEN", THEN)        => Some(TerminalToken::from_raw(token,"THEN",RetTypeEnum::Enumvariant_77( THEN
))),
      RawToken:: Custom("ELSE", ELSE)        => Some(TerminalToken::from_raw(token,"ELSE",RetTypeEnum::Enumvariant_77( ELSE
))),
      RawToken:: Custom("DO", DO)            => Some(TerminalToken::from_raw(token,"DO",RetTypeEnum::Enumvariant_77( DO
))),
      RawToken:: Custom("NEW", NEW)          => Some(TerminalToken::from_raw(token,"NEW",RetTypeEnum::Enumvariant_77( NEW
))),
      RawToken:: Custom("TRUE", TRUE)        => Some(TerminalToken::from_raw(token,"TRUE",RetTypeEnum::Enumvariant_77( TRUE
))),
      RawToken:: Custom("FALSE", FALSE)      => Some(TerminalToken::from_raw(token,"FALSE",RetTypeEnum::Enumvariant_77( FALSE
))),
      RawToken:: Custom("NULL", NULL)        => Some(TerminalToken::from_raw(token,"NULL",RetTypeEnum::Enumvariant_77( NULL
))),
      RawToken:: Custom("UNIT", UNIT)        => Some(TerminalToken::from_raw(token,"UNIT",RetTypeEnum::Enumvariant_77( UNIT
))),
      RawToken:: Custom("TINT", TINT)        => Some(TerminalToken::from_raw(token,"TINT",RetTypeEnum::Enumvariant_77( TINT
))),
      RawToken:: Custom("TBOOL", TBOOL)      => Some(TerminalToken::from_raw(token,"TBOOL",RetTypeEnum::Enumvariant_77( TBOOL
))),
      RawToken:: Custom("TSTRING", TSTRING)  => Some(TerminalToken::from_raw(token,"TSTRING",RetTypeEnum::Enumvariant_77( TSTRING
))),
      RawToken:: Custom("TUNIT ", TUNIT)     => Some(TerminalToken::from_raw(token,"TUNIT",RetTypeEnum::Enumvariant_77( TUNIT
))),
      RawToken:: Custom("Id", id)  => Some(TerminalToken::from_raw(token,"Id",RetTypeEnum::Enumvariant_77( id
))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"Num",RetTypeEnum::Enumvariant_20( n
))),
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"Str",RetTypeEnum::Enumvariant_77(_tt))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_77(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
