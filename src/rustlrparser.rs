//Parser generated by rustlr for grammar rustlr
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::rustlr_ast::*;

static SYMBOLS:[&'static str;81] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","!","[","]","(",")","COLON","MOD","PIPE","ASSIGN","OR","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","TRUE","FALSE","NULL","UNIT","TINT","TBOOL","TSTRING","TUNIT","Id","Num","Str","Program","Decl","Type","Expr","ParamList","TypeList","ExprList","Else","FunType","SingleParam","MultiParam","ArrayType","BaseType","Chain","Stmt","Or","And","Comp","AddSub","MulDiv","Pow","Primary","Literal","Unary","Lhs","NEWRENT_1_0","NEWSEQNT_6_0","NEWRENT_7_1","NEWSEQNT_22_0","NEWRENT_23_1","NEWSEQNT_27_0","NEWRENT_28_1","NEWSEQNT_69_0","NEWRENT_70_1","START","EOF"];

static TABLE:[u64;1857] = [193273659393,343597449218,300647776257,115964182530,281818574094338,281590941089792,281672545402881,563293550804995,844768527646722,844540894380034,1126080295796736,1407465078259712,1407456488390656,1689094674251777,1689025954906112,1689017365168128,1689090379022337,1688931465756672,1689051724513281,1689077494185985,1689013069545472,1689021660004352,1689086084186113,1689081789415425,1970505226846208,1970535291682817,2251885713752066,2251812699308034,2251902893621250,2251872828850178,2251808404340738,2533360690397186,2533287675953154,2533283380985858,2533377870266370,2533347805495298,2814762653057026,2814835667501058,2814822782599170,2814852847370242,2814758358089730,3096327824211970,3096310644342786,3096233334931458,3096237629898754,3096297759440898,3377772736413696,3377802801250304,3377712606806016,3659183287762946,3659277777043458,3659247712272386,3659187582730242,3659260597174274,3940752754278402,3940735574409218,3940722689507330,3940662559965186,3940658264997890,4222210550857730,4222133241446402,4222137536413698,4222227730726914,4222197665955842,4503672642732034,4503685527633922,4503608218222594,4503702707503106,4503612513189890,4785246403821568,4785310828003329,4785302238003201,4785306533232641,4785242108985344,4785289354084353,4785237813362688,4785250698723328,4785315122839553,4785276469116929,4785319418068993,4785156209573888,5066558171512834,5066652660793346,5066562466480130,5066622596022274,5066635480924162,5348110457307138,5348033147895810,5348333796851713,5629585435328512,5911202144845825,5911056116416512,5911150605565952,5911142015827968,5911137720205312,5911210734845953,5911206440075265,5911219324911617,5911176376221697,5911146310664192,5911215029682177,6192526798946304,6474220819906561,6474186460495873,6474083380428800,6474113445068800,6474207934742529,6473945942392832,6474177870299137,6474044725395456,6474079086444544,6474104855920640,6474066201804800,6474070495461376,6474109150691328,6474173575135233,6474212230561793,6474049020887040,6474036137230336,6474199344611329,6474195049709569,6474203640692737,6474040432066560,6474190755332097,6474006070820864,6473993186902016,6474216524152833,6474074790821888,6474182165725185,6474130626445313,6755408032497666,6755412327333888,6755472456941568,6755717272436737,6755485341908994,7036960320978944,7318357988343808,7318435294150658,7318654341152769,7599914569564160,7881307939078146,7881385248489474,7881402428358658,7881372363587586,7881312234176512,8162877404807170,8162782915526658,8162860224937986,8162847340036098,8162787210493954,8444545658191873,8444429694140416,8725745756602370,8725853130784770,8725750051569666,8725732871700482,8725831655948290,8726067879149570,8725767231438850,8725741461635074,8725780116340738,8725861720719362,8725758642028544,8725788706275330,8725801591177218,8725857425752066,8725762936471554,8725754346536962,8725728576733186,8725771526406146,8725840245882882,8725823066013698,8725784411308034,8725810181111810,8725818771046402,8725775821373442,9007465545728001,9007487020957697,9007220732788736,9007478431088641,9007491314548737,9007448365531137,9007469840105473,9007456956121089,9007379646316544,9007474135007233,9007319515791360,9007358170824704,9007482725138433,9007353876840448,9007323811282944,9007315222462464,9007388235464704,9007349581217792,9007461250891777,9007345285857280,9007405417496577,9007383941087232,9007267977297920,9007495610302465,9007452660695041,9007310927626240,9007340992200704,9007280861216768,9288811675189250,9288691416104962,9288803085254658,9288807380221954,9288725775843330,9288704301006850,9288712890941442,9288682826170370,9288751545647106,9288781610418178,9288760135581698,9288768725516290,9288708595974146,9288738660745218,9288695711072258,9288721480876034,9288700006039554,9288678531203074,9288790200352770,9289017833619458,9288730070810626,9288734365777922,9288773020483586,9288717185908738,9570174982815746,9570278062030850,9570187867717634,9570282356998146,9570157802946562,9570209342554114,9570243702292482,9570179277783042,9570205047586818,9570256587194370,9570247997259778,9570492810395650,9570183572750338,9570196457652226,9570170687848450,9570213637521410,9570226522423298,9570265177128962,9570235112357890,9570153507979266,9570200752619522,9570286651965442,9570192162684930,9570166392881154,9851662844624898,9851667139592194,9851649959723010,9851680024494082,9851722974167042,9851701499330562,9851658549657602,9851718679199746,9851967787302914,9851761628872706,9851654254690306,9851632779853826,9851757333905410,9851641369788418,9851675729526786,9851710089265154,9851688614428674,9851684319461378,9851671434559490,9851753038938114,9851731564101634,9851628484886530,9851645664755714,9851740154036226,10133150704533506,10133142114598914,10133197949173762,10133103459893250,10133137819631618,10133193655255040,10133129230876672,10133442762309634,10133146409566210,10133215129042946,10133176474337282,10133163589435394,10133236603879426,10133228013944834,10133120639762434,10133154999500802,10133124935843840,10133232308912130,10133107754860546,10133116344795138,10133185064271874,10133206539108354,10133159294468098,10414638565949442,10414629976014850,10414660040785922,10414672925687810,10414612796145666,10414707285426178,10414582731374594,10414651450851330,10414634270982146,10414625681047554,10414578436407298,10414621386080258,10414702990458882,10414711580393474,10414690105556994,10414595617718272,10414917738823682,10414591322816512,10414617091112962,10414681515622402,10696173671546880,10696341174812673,10696070593052672,10696203737104384,10696302520958977,10696328291352577,10696319700369409,10696315405991937,10696195146121216,10696169376055296,10696117837561856,10696311111155713,10696238095728640,10696306816385025,10696255278153729,10696298225795073,10696165082726400,10696229506580480,10696160787890176,10696233801351168,10696208031088640,10696332585402369,10696345470566401,10696199441481728,10696190852464640,10696323995271169,10696130721480704,10696336881221633,10977652944666626,10977609994993666,10977601405059074,10977571340288002,10977640059764738,10977562750353410,10977567045320706,10977558455386114,10977528390615042,10977584225189890,10977532685582338,10977541275516930,10977554160418818,10977588520157186,10977631469830146,10977575635255298,10977657239633922,10977545570484226,10977549865451522,10977579930222594,10977867693031426,10977618584928258,10977661534601218,10977622879895554,11259037728047106,11259084972687362,11259050612948994,11259042023014402,11259132217327618,11259342670725122,11259115037458434,11259063497850882,11259033433079810,11259016253210626,11259076382752770,11259046317981698,11259059202883586,11259127922360322,11259029138112514,11259136512294914,11259020548177922,11259106447523842,11259007663276034,11259003368308738,11259054907916290,11259024843145218,11259097857589250,11259093562621954,11540559946121218,11540482636709890,11540478341742594,11540551356186626,11540817644158978,11540572831023106,11540602895794178,11540590010892290,11540611485728770,11540607190761474,11822077875585026,11822086465519618,11822064990683138,11822000566173698,11822043515846658,11822013451075586,11821987681271810,11821983386304514,11821979091337218,11822047810813954,11822026335977474,11821974796369922,11822009156108290,11822034925912066,11822292623949826,11821957616500738,11822082170552322,11821996271206402,11821991976239106,11821970501402626,11822004861140994,11821953321533442,11821966206435330,11822056400748546,12103497017786368,12385242574487554,12385225397633025,12384903272071170,12384976286515202,12384997761351682,12385027826122754,12385032121090050,12385014941220866,12385036416057346,12384907567038466,12384984876449794,12666378251075586,12666502805127170,12666421200748546,12666472740356098,12666459855454210,12666438380617730,12666455561273344,12666468445388802,12666391135977474,12666404020879362,12666446970748930,12666717553491970,12666451265519618,12666507100094466,12666434085650434,12666511395061762,12666408315846658,12666481330290690,12666429790683138,12666425495715842,12666489920225282,12666395430944770,12666399725912066,12666416905781250,12666382546042882,12666412610813954,12947982075363330,12947913355886594,12947909063278592,12947977780396034,12947934830723074,12947986370330626,12947956305559554,12947857521311746,12948192528760834,12947900473475072,12947887588704256,12947926240788482,12947964895494146,12947947715624962,12947853226344450,12947904768376832,12947891883343872,12947896178573312,13229615968550913,13229345383448576,13229392627957760,13229504296976384,13229474231877632,13229508591747072,13229405511876608,13229482821484544,13229620260962305,13229611671617537,13229469936517120,13229478527500288,13229512886124544,13229607375798273,13510807474601986,13510914848784386,13510884784013314,13510936323620866,13510897668915202,13510803179634690,13511142482051074,13510932028653570,13510906258849794,13510927733686274,13510863312060416,13510876194078722,13792295336869888,13792570214383617,13792454250397696,13792342581379072,13792458545168384,13792462839545856,13792428480921600,13792419889938432,13792561625038849,13792432774905856,13792355465297920,13792424185298944,13792565922103297,13792557329219585,14073753135480834,14073864804630530,14073804675088386,14073757430448130,14073787495219202,14073877689532418,14073843329794050,14073766020382722,14073826149924866,14073834739859458,14073800380121090,14073881984499714,14074092437897218,14073886279467010,14073783200251906,14073856214695938,14073808970055682,14073791790186498,14073847624761346,14073770315350018,14073796085153794,14073778905284610,14073774610317314,14073813265022978,14355228109635586,14355567412051970,14355322598916098,14355232404602882,14355331191996416,14355301124079618,14355339778785282,14355361253621762,14355309714014210,14355356958654466,14355352663687170,14636720268050434,14636763217723394,14636728857985026,14636746037854210,14636814757330946,14636707383148546,14636797577461762,14636784692559874,14636776102625282,14636724563017730,14636737447919618,14636836232167426,14637042390597634,14636806167396354,14636758922756098,14636741742886914,14636715973083138,14636703088181250,14636733152952322,14636831937200130,14636793282494466,14636750332821506,14636827642232834,14636754627788802,14918216718942210,14918238193778690,14918225308876802,14918289733386242,14918229603844098,14918268258549762,14918517366652930,14918199539073026,14918272553517058,14918306913255426,14918281143451650,14918178064236546,14918195244105730,14918311208222722,14918212423974914,14918251078680578,14918182359203842,14918190949138434,14918302618288130,14918259668615170,14918233898811394,14918221013909506,14918203834040322,15199824837017600,15199876376297473,15199850611474433,15199811951656960,15199730347868160,15199893556363265,15199884966297601,15199889261133825,15199880671526913,15199816247279616,15199820542115840,15481304113414144,15762714660110338,15762942293377026,16044262653231104,16044335668658177,16044361438724097,16044348552773633,16044219703623680,16044258358853632,16044215409967104,16044331373887489,16044155278983168,16044357142904833,16044365732315137,16044232588591104,16044185345392640,16044228294606848,16044198229049344,16044352848855041,16044189640228864,16044370028068865,16044095150555136,16044327078461441,16044193933557760,16044322783297537,16044223998984192,16044254064082944,16044344257871873,16044279836704769,16044142395064320,16044339963494401,16325862187663361,16325557245050880,16325634549940226,16607036516794368,16888678997295104,17170059479220226,17169982169808898,17451693370048513,17451689074819073,17451650425618433,17451530161553408,17451680485212161,17451684779982849,17451611765342208,17451624650702848,17451616060964864,17451620355801088,17451676195487745,17732996553441280,17733026618277888,18014501593022466,18014471528251394,18296032402276352,18296165546000385,18296023812669440,18296156956590081,18296053877768192,18296058172538880,18295955092668416,18296062466916352,18295942208749568,18296152665423873,18295894964240384,18296028108292096,18296169841754113,18296161252409345,18296019517308928,18577434368671744,18859012420337664,18858978061713408,18858892162170880,18858973766090752,18858969470730240,18859106910011393,18858982355697664,18858905046089728,18858844917661696,18859102618976257,18859008125960192,18859111205830657,18859003831189504,18859115499421697,18859119795175425,19140483102670848,19140380022800384,19140577595752449,19140444447440896,19140367138881536,19140478807900160,19140319894372352,19140581886722049,19140457332408320,19140586182541313,19140448742801408,19140453038424064,19140590476132353,19140594771886081,19140487397048320,19421928015134720,19421958079381504,19422052572528641,19421842115592192,19422065452843009,19421962373758976,19421794871083008,19422061159251969,19421854999511040,19421923719512064,19421919424151552,19421953784610816,19422069748596737,19422056863432705,19421932309118976,19703523254337537,19703544725307393,19703433056092160,19703437350469632,19703329976221696,19703527546093569,19703540429553665,19703317092302848,19703407285829632,19703269847793664,19703536135962625,19703394400862208,19703531840143361,19703428761321472,19703402991845376,19703398696222720,19984903738032128,19985002522804225,19985006816854017,19984869377572864,19985011112673281,19984877968556032,19984912327180288,19985015406264321,19984804952932352,19984792069013504,19984873672933376,19984908032802816,19984882262540288,19985019702018049,19984744824504320,19984998231113729,20266327179001856,20547965359685633,20547857986224128,20547952476225537,20547827921977344,20547922410668033,20547961066094593,20547823626354688,20547879465189377,20547742022434816,20547969655439361,20547931001257985,20547815037337600,20547789267599360,20547926705831937,20547819330994176,20547793560928256,20547694777925632,20547935296028673,20547797856419840,20547853691453440,20547956770275329,20547862280601600,20547939590864897,20547754906353664,20547948180144129,20547832215961600,20547784972763136,20547943885242369,20829225587703810,20829152578568192,20829281422278658,20829234177638402,20829264242409474,20829277127311362,20829470406082561,20829285717245954,20829247062540290,20829156868227074,20829491875676162,21110911019515905,21110872364089345,21110842303774721,21110889544286209,21110829418807297,21110898133565441,21110807939645440,21110644731346944,21110782169382912,21110876659253249,21110880954679297,21110691975856128,21110919608860673,21110885249449985,21110739221020672,21110777875398656,21110704859774976,21110747809841152,21110773579776000,21110906723696641,21110812234022912,21110902429646849,21110734926184448,21110764990758912,21110893838663681,21110803644874752,21110743514349568,21110769284415488,21110915313106945,21392248556486656,21392381700407297,21392119708057600,21392244261126144,21392390289817601,21392394585571329,21392179836485632,21392373110276097,21392257146093568,21392166952566784,21392278621585408,21392385996226561,21392377406357505,21392287210733568,21392368820158465,21392282916356096,21392252852109312,21673869562281985,21673723533197312,21673848086986753,21673732122804224,21673654813196288,21673594684768256,21673865266528257,21673757893066752,21673852383068161,21673843796934657,21673762187444224,21673856677117953,21673860972937217,21673753598296064,21673719237836800,21673727828819968,21673641929277440,21955335949647873,21955129789906944,21955207099514880,21955237164154880,21955228575006720,21955116905988096,21955198509907968,21955232869777408,21955340243238913,21955323063697409,21955194214547456,21955331653828609,21955318773710849,21955069661478912,21955327359778817,21955202805530624,21955344538992641,22236815219949569,22236802336489473,22236673486618624,22236703551717376,22236707846488064,22236806630539265,22236793750487041,22236604766617600,22236682076225536,22236591882698752,22236544638189568,22236712140865536,22236798040408065,22236677782241280,22236810926358529,22236819515703297,22236669191258112,22518290196660225,22518079743328256,22518019614900224,22518268727263233,22518157052936192,22518294492413953,22518273017118721,22518182823198720,22518281607249921,22518178528428032,22518144167968768,22518285903069185,22518148463329280,22518187117576192,22518066859409408,22518152758951936,22518277313200129,22799554720038912,22799632029646848,22799752289910785,22799619144679424,22799494591610880,22799662094286848,22799760879779841,22799769469124609,22799653505138688,22799623440039936,22799756583960577,22799747993829377,22799657799909376,22799541836120064,22799627735662592,22799765173370881,22799743704039425,23080956684009474,23081046878322690,23080973863878658,23080982453813250,23081055468257282,23080991043747842,23081076943093762,23080965273944066,23080986748780546,23080952389042178,23081033993420802,23081012518584322,23081064058191874,23081042583355394,23081003928649730,23081081238061058,23081025403486210,23081291691458562,23080969568911362,23080978158845954,23081008223617026,23080999633682434,23081085533028354,23080995338715138,23362569098100736,23362702243332097,23362444545032192,23362573393461248,23362607753330688,23362504673460224,23362603458560000,23362715126792193,23362577689083904,23362491789541376,23362710833201153,23362697947250689,23362689362558977,23362693652348929,23362706537381889,23362612047708160,23362719422545921,23362581983068160,23643949587169282,23643923817365506,23643953882136578,23643975356973058,23643902342529026,23644031191547906,23644026896580610,23643945292201986,23644005421744130,23643936702267394,23643915227430914,23643928112332802,23643932407300098,23643983946907650,23643996831809538,23643992536842242,23643919522398210,23643958177103874,23643962472071170,23643906637496322,23644014011678722,23644035486515202,23644241644945410,23643940997234690,23925643605770241,23925527642505216,23925523346882560,23925669375967233,23925394498453504,23925519051522048,23925660786622465,23925665080213505,23925441742962688,23925454626881536,23925562001129472,23925656490803201,23925553411981312,23925652196753409,23925531936489472,23925557706752000,23925639311392769,23925647900672001,23925635021078529,24206921019293696,24206860883394560,24488413175939072,24769935397355520,25051281518755842,25051358828167170,25332975537881089,25332911113240576,25332915408863232,25332829509451776,25332923998601216,25332988422717441,25332949775351809,25332919703699456,25332992717946881,25332979833110529,25332984127881217,25614463399428097,25614398975311872,25614390385573888,25614450514591745,25614454809821185,25614304486162432,25614424752128001,25614459104591873,25614467694657537,25614386089951232,25614394680410112,25895783757119490,25895706447708162,26177185720369152,26177245849976832,26458750898077696,26458660696752130,26458720826294274,26740397667778561,26740406257909761,26740264524972032,26740307473858560,26740410553729025,26740414847320065,26740204393988096,26740393372876801,26740243048562688,26740238755233792,26740419143073793,26740371898302465,26740303179087872,26740380488892417,26740268818628608,26740234460397568,26740376193466369,26740247344054272,26740389078499329,26740311768236032,26740144265560064,26740384783663105,26740273113989120,26740191510069248,26740281703596032,26740328954068993,26740401963859969,26740277409611776,27021619242270720,27021885530439681,27021666486779904,27021851170177025,27021743795339264,27021889824030721,27021786744946688,27021739501682688,27021803930845185,27021713731944448,27021864055209985,27021778155798528,27021859760373761,27021872644489217,27021855465603073,27021718025273344,27021709437108224,27021782450569216,27021881234620417,27021894119784449,27021876940570625,27021756680306688,27021846875013121,27021722320764928,27021748090699776,27021868349587457,27021679370698752,27021752386322432,27303171528851458,27303115694276610,27303119989243906,27303137169113090,27303111399309314,27303416341987330,27303150054014978,27303077039570946,27303205888589826,27303128579178498,27303132874145794,27303188708720642,27303102809374722,27303081334538242,27303167233884162,27303094219440130,27303098514407426,27303089924472834,27303124284211202,27303210183557122,27303180118786050,27303158643949570,27303201593622530,27584685160792066,27584607851380738,27584625031249922,27584891319222274,27584680865824770,27584603556413442,27584599261446146,27584655096020994,27584582081576962,27584564901707778,27584573491642370,27584663685955586,27584646506086402,27584642211119106,27584590671511554,27584577786609666,27584586376544258,27584569196675074,27584594966478850,27584556311773186,27584633621184514,27584552016805890,27584676570857474,27584612146348034,27866121482141698,27866052762664962,27866048467697666,27866031287828482,27866366295277570,27866087122403330,27866069942534146,27866138662010882,27866082827436034,27866044172730370,27866065647566850,27866117187174402,27866108597239810,27866078532468738,27866026992861186,27866039877763074,27866160136847362,27866100007305218,27866130072076290,27866155841880066,27866151546912770,27866061352599554,27866074237501442,28147630818459650,28147523444277250,28147514854342658,28147592163753986,28147540624146434,28147574983884802,28147613638590466,28147506264408066,28147536329179138,28147519149309954,28147501969440770,28147841271857154,28147527739244546,28147626523492354,28147562098982914,28147635113426946,28147596458721282,28147544919113730,28147553509048322,28147583573819394,28147605048655874,28147557804015618,28147549214081026,28429028485824514,28429088615366658,28429316248633346,28428994126086146,28429058550595586,28429019895889922,28428976946216962,28429067140530178,28429024190857218,28429110090203138,28429011305955330,28429032780791810,28428989831118850,28429002716020738,28429101500268546,28429037075759106,28429049960660994,28429105795235842,28428998421053442,28428981241184258,28429080025432066,28429071435497474,28429015600922626,28710464807632898,28710494872403970,28710473398747136,28710490577436674,28710451922731010,28710580771749890,28710533527109634,28710499167371266,28710563591880706,28710555001946114,28710546412011522,28710477693779968,28710469102600194,28710576476782594,28710791225147394,28710486282469378,28710503462338562,28710507757305858,28710456217698306,28710585066717186,28710524937175042,28710512052273154,28710542118158336,28991974144016386,28991961259114498,28991965554081794,28991952670490624,28992017094868992,28992008503754754,28992055748395010,28991944079245314,28991969849049090,28991978438983682,28991939784278018,28991948375457792,28991987028918274,28992060043362306,28992266201792514,28991931194343426,28991926899376130,28992038568525826,28992051453427714,28991982733950978,28991999913820162,28992021388656642,28992029978591234,29273577969483776,29273556493991936,29273582264254464,29273466300465152,29273672458174465,29273668163272705,29273663868895233,29273693933469697,29273650983862273,29273522134450176,29273689637715969,29273646688698369,29273543609024512,29273479184384000,29273513545629696,29273509250793472,29273655279288321,29273685344124929,29273676754255873,29273552200007680,29273419055955968,29273517838958592,29273603744595969,29273547904385024,29273539315367936,29273659574059009,29273681048305665,29273586558631936,29554949872353280,29836446317477890,29836424842641410,29836351828197378,29836691130613762,29836476382248962,29836356123164674,29836433432576002,29836463497347074,29836484972183554,29836480677216258,30118080209420289,30118084504190977,30117968539156480,30118093093404673,30117891230597120,30117972834516992,30117843986087936,30117938475761664,30118088799027201,30118002899615744,30117934180925440,30118075913994241,30118105978437633,30117942769090560,30117981424123904,30118110274256897,30118071624531969,30117977130139648,30118118863601665,30117904114515968,30117964245499904,30118011488763904,30118007194386432,30118097388306433,30118114567847937,30118101684387841,30117947064582144,30399306079272962,30399383388684290,30399632500654081,30680858369327104,30962298980597762,30962264622694400,30962307570532354,30962333340336130,30962591038373890,30962268917596160,30962303275565058,30962376290009090,30962256030924802,30962380584976386,30962324750401538,30962286095695874,30962354815172610,30962384879943682,30962363405107202,30962346225238018,30962294685630466,30962311865499650,30962251735957506,30962290390663170,31243851266981890,31243859856916482,31243808317308930,31243786842472450,31243731007897602,31243782547505154,31243829792145410,31243761072668674,31243743894306816,31243769662603266,31243799727374338,31243838382080002,31243739599405056,31244066015346690,31243773957570562,31243855561949186,31243765367635970,31243726712930306,31243821202210818,31243778252537858,31525313358725122,31525205984542722,31525218871017472,31525248934215682,31525326243627010,31525240344281090,31525201689575426,31525296178855938,31525236049313794,31525257524150274,31525283293954050,31525330538594306,31525334833561602,31525253229182978,31525214576115712,31525244639248386,31525274704019458,31525540991991810,31525261819117570,31525304768790530,31806771155501058,31806779745435650,31806723910860802,31806719615893506,31807015968636930,31806728205828098,31806801220272130,31806805515239426,31806711025958914,31806689552826368,31806809810206722,31806715320926210,31806732500795394,31806749680664578,31806676666220546,31806680961187842,31806736795762690,31806693847728128,31806788335370242,31806758270599170,32088276196917250,32088490945282050,32088186002604034,32088211772407810,32088233247244290,32088263312015362,32088224657309698,32088168824438784,32088198887505922,32088155937832962,32088151642865666,32088280491884546,32088254722080770,32088246132146178,32088164529537024,32088284786851842,32088207477440514,32088203182473218,32088194592538626,32088190297571330,32369665274150914,32369751173496834,32369721108725762,32369755468464130,32369669569118210,32369682454020098,32369699633889282,32369708223823874,32369643801149440,32369639506247680,32369673864085506,32369630914412546,32369678159052802,32369738288594946,32369626619445250,32369759763431426,32369660979183618,32369686748987394,32369729698660354,32369965921861634,32651204675239938,32651161725566978,32651148843220992,32651153138122752,32651174610468866,32651440898441218,32651213265174530,32651196085305346,32651234740011010,32651101596024834,32651140253089792,32651105890992130,32651230445043714,32651135958450176,32651226150076418,32651157433024512,32651183200403458,32651144548319232,32932701126656002,32932576572604418,32932709716590594,32932688241754114,32932705421623298,32932649587048450,32932580867571714,32932671061884930,32932636705095680,32932658176983042,32932679651819522,32932915875020802,33214167512907776,33214339311665153,33214313542844417,33214201873956864,33214300657811457,33214158924742656,33214330722254849,33214206167941120,33214124563169280,33214231938203648,33214115974414336,33214317837221889,33214171808399360,33214193282973696,33214326428205057,33214163219578880,33214068729905152,33214335018074113,33214253418872833,33214304953237505,33214296362647553,33214197578334208,33214236232581120,33214343607418881,33214128858333184,33214309248008193,33214188989317120,33214227643432960,33214322132123649,33495694028308480,33495724100681729,33495749862490113,33495767042555905,33495689733472256,33495698323210240,33495685437849600,33495762747326465,33495754157719553,33495603834060800,33495758452490241,33777263496265729,33777259201429505,33777203372425217,33777143236395008,33777250611232769,33777108878163968,33777181891624960,33777276381626369,33777280675676161,33777138942738432,33777078811754496,33777293560840193,33777065927835648,33777151827378176,33777121761820672,33777284971495425,33777289265086465,33777156121362432,33777254906658817,33777246316068865,33777117466329088,33777177596854272,33777018683326464,33777113173000192,33777186186002432,33777147531755520,33777272085544961,33777267790643201,34058545197875200,34058558082777090,34058480773365762,34058485068267520,34340033059356674,34339960044978176,34340050239225858,34339955749945346,34340020174454786,34621611116134400,34621697015676929,34621563872870400,34621692720775169,34621542396461056,34621684131561473,34621602526986240,34621576757510144,34621705605808129,34621581051494400,34621538103132160,34621490857967616,34621628302622721,34621679836790785,34621568166526976,34621688426397697,34621606821756928,34621718490972161,34621503741886464,34621546691952640,34621533808295936,34621572461887488,34621701311758337,34621709901627393,34621675541364737,34621443613458432,34621671246200833,34621714195218433,34902974430380032,35184376385830914,35184715688247298,35184500939882498,35184505234849794,35184488054980610,35184509529817090,35184470875111426,35184457990209538,35184380680798210,35184449400274946,35465980218507264,35466070412754945,35465932967247874,35465984506855426,35465851362869250,35465855657836546,35466190665285634,35465945852149762,35465975916920834,35465963032018946,35465924377313282,35747373585924098,35747382175858690,35747326341283842,35747339226185730,35747386470825986,35747360701022210,35747347816120322,35747429420498946,35747407945662466,35747395061088258,35747352111087618,35747343521153026,35747369290956802,35747420830564354,35747455190302722,35747665643700226,35747330636251138,35747450895335426,35747438010433538,35747399355727874,35747356406054914,35747416535597058,35747364995989506,35747377880891394,35747459485270018,36028925869752322,36028930164719618,36028882920079362,36029140618117122,36028895804981250,36028801315700738,36028874330144770,36028934459686914,36028912984850434,36028805610668034,36310280594718720,36310602717200385,36310357899476994,36591807105925122,36591862940499970,36591781336121346,36591845760630786,36591811400892418,36591875825401858,36591832875728898,36591794221023234,36591755566317570,36591777041154050,36591768451219458,36592090573766658,36591772746186754,36591841465663490,36591798515990530,36591880120369154,36591789926055938,36591884415336450,36591785631088642,36591854350565378,36591802810957826,36591751271350274,36591764156252162,36591824285794306,36873320742518784,37154769941692416,37154800014262272,37154709812084736,37436305048600578,37436309343567874,37436249214025730,37436270688862210,37436176199581698,37436257803960322,37436287868731394,37436180494548994,37436515501998082,37436300753633282,37717762843607042,37717990476873730,37999194874773506,37999224939544578,38280729978863618,38280734273830914,38280601129844738,38280725683896322,38280605424812034,38280695619125250,38280712798994434,38280682734223362,38280940432261122,38280674144288770,38562256495706112,38562196365901824,38562325215313921,38562140531916800,38562093287407616,38562252200935424,38562342394724353,38562363869167617,38562153415835648,38562183482245120,38562192070410240,38562350985707521,38562355279757313,38562217840476160,38562338100346881,38562213546819584,38562320920150017,38562359575576577,38562230725443584,38562260790083584,38562329510739969,38562333805510657,38562226431459328,38562187777081344,38562222135836672,38562277977096193,38562346689626113,38562368164921345,38843632690069506,38843555380658178,39125313822588929,39125309528997889,39125043240828928,39125133435666432,39125103369256960,39125318118342657,39125305233178625,39125146319323136,39125275168735233,39125292348145665,39125283758931969,39125300939128833,39125279464161281,39125206449127424,39125227930583041,39125142023831552,39125180678864896,39125288053768193,39125137730502656,39125202154356736,39125296643047425,39125090485338112,39125167793897472,39125270873571329,39125163500240896,39125210743504896,39125172089257984,39125176384880640,39406578345967616,39406750145445889,39406784505708545,39406608412377088,39406780209889281,39406702907359233,39406518217539584,39406681425838080,39406677131067392,39406565462048768,39406651361591296,39406647065968640,39406638476951552,39406685720215552,39406758735642625,39406771619758081,39406612707213312,39406617000542208,39406775915839489,39406642770608128,39406788799299585,39406793095053313,39406763030478849,39406767324856321,39406754440871937,39406745850281985,39406655655575552,39406621296033792,39688238007189505,39688225122156545,39688096272744448,39688122042679296,39688242301566977,39688126338301952,39688083389087744,39687993194250240,39688246596468737,39688263776010241,39688152107778048,39688053322678272,39688220826992641,39688259482419201,39688117747318784,39688113453662208,39688255186599937,39688229417582593,39688250892550145,39688160696926208,39688177884135425,39688130632286208,39688156402548736,39688087683923968,39688040438759424,39688233712353281,39688091977252864,39688268071763969,39969545479454722,39969579839193090,39969584134160386,39969450990174210,39969790292590594,39969575544225794,39969562659323906,39969455285141506,39969532594552834,39969524004618242,40250930264080386,40251007573491714,40532473965314048,40814004768997378,40813970409259010,40813957524357122,40813948934422530,40813880214945794,40813875919978498,40814000474030082,40814009063964674,40813987589128194,40814215222394882,41095690199302146,41095479745904642,41095445386166274,41095484040871938,41095432501264386,41095423911329794,41095355191853058,41095475450937346,41095350896885762,41095462566035458,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_42(_x_42)=parser.popstack().value { _x_42 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Decl::Var{_item0_:_item0_,id:id,ty:ty,expr:expr} }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<FunType<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut params = if let RetTypeEnum::Enumvariant_53(_x_53)=parser.popstack().value { _x_53 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Decl::Fun{_item0_:_item0_,id:id,params:params,ty:ty,expr:expr} }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Type::Int(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Type::Bool(_item0_) }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Type::Unit(_item0_) }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Type::String(_item0_) }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()};  Type::Array(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<FunType<'lt>>::default()};  Type::FunType(parser.lbx(0,_item0_)) }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()};  FunType::FunSingle{ty:parser.lbx(0,ty),ret:parser.lbx(2,ret)} }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<TypeList<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  FunType::FunMulti{ty:parser.lbx(1,ty),ret:parser.lbx(4,ret)} }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<Vec<LC<Type<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()};  TypeList::TypeList(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
 Vec::new() }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<Vec<LC<Type<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Chain(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::Let{_item0_:_item0_,id:id,ty:ty,expr:parser.lbx(5,expr)} }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut lhs = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<Lhs<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::Set{_item0_:_item0_,lhs:parser.lbx(1,lhs),expr:parser.lbx(3,expr)} }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::While{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,expr:parser.lbx(3,expr)} }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut init = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut size = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::New{_item0_:_item0_,ty:ty,size:parser.lbx(3,size),init:parser.lbx(5,init)} }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item4_ = if let RetTypeEnum::Enumvariant_65(_x_65)=parser.popstack().value { _x_65 } else {<Else<'lt>>::default()}; let mut THEN = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::If{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,THEN:parser.lbx(3,THEN),_item4_:parser.lbx(4,_item4_)} }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut els = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Else::Else{_item0_:_item0_,els:parser.lbx(1,els)} }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Unit }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Add(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Sub(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Mul(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Pow(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<ExprList<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::FunCall(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<Lhs<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::Id(_item0_) }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  Expr::Paren(parser.lbx(1,_item1_)) }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Lhs::Id(_item0_) }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_43(_x_43)=parser.popstack().value { _x_43 } else {<Lhs<'lt>>::default()};  Lhs::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ExprList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  ExprList(parser.lbx(0,_item0_),_item1_,) }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_72_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<i64>::default()};  Expr::Num(_item0_) }

fn _semaction_rule_73_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::String(_item0_) }

fn _semaction_rule_74_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::True(_item0_) }

fn _semaction_rule_75_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::False(_item0_) }

fn _semaction_rule_76_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::Null(_item0_) }

fn _semaction_rule_77_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<&'lt str>::default()};  Expr::Unit(_item0_) }

fn _semaction_rule_78_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(79,147,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_42(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_53(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_6_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ArrayType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("SingleParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MultiParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_22_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_23_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_23_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_27_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_28_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_28_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_65(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_43(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_69_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_70_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_70_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_78_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1857 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_43(Lhs<'lt>),
  Enumvariant_73(Vec<LC<Decl<'lt>>>),
  Enumvariant_53(ParamList<'lt>),
  Enumvariant_68(TypeList<'lt>),
  Enumvariant_54(Vec<LC<Type<'lt>>>),
  Enumvariant_76(Type<'lt>),
  Enumvariant_63(&'lt str),
  Enumvariant_20(i64),
  Enumvariant_65(Else<'lt>),
  Enumvariant_61(Vec<LC<&'lt str>>),
  Enumvariant_59(ExprList<'lt>),
  Enumvariant_0(Program<'lt>),
  Enumvariant_56(FunType<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_42(Decl<'lt>),
  Enumvariant_75(Expr<'lt>),
  Enumvariant_69(()),
  Enumvariant_74(Vec<LC<Expr<'lt>>>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct rustlrlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> rustlrlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> rustlrlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["_WILDCARD_TOKEN_",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')',':','%','=','|',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#":"#,"COLON"),(r#"%"#,"MOD"),(r#"="#,"ASSIGN"),(r#"|"#,"PIPE"),(r#"||"#,"OR"),] {lexnames.insert(k,v);}
    stk.add_custom("WHILE", r"\bwhile\b");
    stk.add_custom("LET", r"\blet\b");
    stk.add_custom("SET", r"\bset\b");
    stk.add_custom("IF", r"\bif\b");
    stk.add_custom("THEN", r"\bthen\b");
    stk.add_custom("ELSE", r"\belse\b");
    stk.add_custom("DO", r"\bdo\b");
    stk.add_custom("NEW", r"\bnew\b");
    stk.add_custom("TRUE", r"\btrue\b");
    stk.add_custom("FALSE", r"\bfalse\b");
    stk.add_custom("NULL", r"\bnull\b");
    stk.add_custom("UNIT", r"\bunit\b");
    stk.add_custom("TINT", r"\bInt\b");
    stk.add_custom("TBOOL", r"\bBool\b");
    stk.add_custom("TSTRING", r"\bString\b");
    stk.add_custom("TUNIT", r"\bUnit\b");
    stk.add_custom("Id", r"[a-zA-Z_][a-zA-Z0-9'_]*");
    stk.set_line_comment("--");
    rustlrlexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for rustlrlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Custom("W", WHILE)          => Some(TerminalToken::from_raw(token,"WHILE",RetTypeEnum::Enumvariant_63( WHILE
))),
      RawToken:: Custom("LET", LET)          => Some(TerminalToken::from_raw(token,"LET",RetTypeEnum::Enumvariant_63( LET
))),
      RawToken:: Custom("SET", SET)          => Some(TerminalToken::from_raw(token,"SET",RetTypeEnum::Enumvariant_63( SET
))),
      RawToken:: Custom("IF", IF)            => Some(TerminalToken::from_raw(token,"IF",RetTypeEnum::Enumvariant_63( IF
))),
      RawToken:: Custom("THEN", THEN)        => Some(TerminalToken::from_raw(token,"THEN",RetTypeEnum::Enumvariant_63( THEN
))),
      RawToken:: Custom("ELSE", ELSE)        => Some(TerminalToken::from_raw(token,"ELSE",RetTypeEnum::Enumvariant_63( ELSE
))),
      RawToken:: Custom("DO", DO)            => Some(TerminalToken::from_raw(token,"DO",RetTypeEnum::Enumvariant_63( DO
))),
      RawToken:: Custom("NEW", NEW)          => Some(TerminalToken::from_raw(token,"NEW",RetTypeEnum::Enumvariant_63( NEW
))),
      RawToken:: Custom("TRUE", TRUE)        => Some(TerminalToken::from_raw(token,"TRUE",RetTypeEnum::Enumvariant_63( TRUE
))),
      RawToken:: Custom("FALSE", FALSE)      => Some(TerminalToken::from_raw(token,"FALSE",RetTypeEnum::Enumvariant_63( FALSE
))),
      RawToken:: Custom("NULL", NULL)        => Some(TerminalToken::from_raw(token,"NULL",RetTypeEnum::Enumvariant_63( NULL
))),
      RawToken:: Custom("UNIT", UNIT)        => Some(TerminalToken::from_raw(token,"UNIT",RetTypeEnum::Enumvariant_63( UNIT
))),
      RawToken:: Custom("TINT", TINT)        => Some(TerminalToken::from_raw(token,"TINT",RetTypeEnum::Enumvariant_63( TINT
))),
      RawToken:: Custom("TBOOL", TBOOL)      => Some(TerminalToken::from_raw(token,"TBOOL",RetTypeEnum::Enumvariant_63( TBOOL
))),
      RawToken:: Custom("TSTRING", TSTRING)  => Some(TerminalToken::from_raw(token,"TSTRING",RetTypeEnum::Enumvariant_63( TSTRING
))),
      RawToken:: Custom("TUNIT ", TUNIT)     => Some(TerminalToken::from_raw(token,"TUNIT",RetTypeEnum::Enumvariant_63( TUNIT
))),
      RawToken:: Custom("Id", id)  => Some(TerminalToken::from_raw(token,"Id",RetTypeEnum::Enumvariant_63( id
))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"Num",RetTypeEnum::Enumvariant_20( n
))),
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"Str",RetTypeEnum::Enumvariant_63(_tt))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_63(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
