//Parser generated by rustlr for grammar rustlr
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::rustlr_ast::*;

static SYMBOLS:[&'static str;75] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","!","[","]","(",")","COLON","MOD","PIPE","ASSIGN","OR","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","TRUE","FALSE","NULL","UNIT","TINT","TBOOL","TSTRING","TUNIT","Id","Num","Str","Program","Decl","Type","Expr","ParamList","TypeList","ExprList","FunType","Else","Lhs","SingleParam","MultiParam","ArrayType","BaseType","Chain","Stmt","Op","Primary","Literal","NEWRENT_1_0","NEWSEQNT_6_0","NEWRENT_7_1","NEWSEQNT_21_0","NEWRENT_22_1","NEWSEQNT_26_0","NEWRENT_27_1","NEWSEQNT_62_0","NEWRENT_63_1","START","EOF"];

static TABLE:[u64;1577] = [193273659393,274877972481,115964182530,317827645442,281672545468417,281590941024256,281792804290562,563267781001219,844605319086080,1126217734553602,1126015871090690,1407465078259712,1407456488390656,1689094673989633,1689098969022465,1689025954775040,1689051724447745,1689013069938688,1689021659480064,1689017364774912,1970535291355137,1970505226649600,2251808404537346,2251872829046786,2251812699504642,2251902893817858,2251885713948674,2533283380985858,2533360690397186,2533347805495298,2533287675953154,2533377870266370,2814762652598274,2814835667042306,2814822782140418,2814758357630978,2814852846911490,3096327824211968,3096297759375360,3377802800529410,3377708311248898,3377785620660226,3377772735758338,3377712606216194,3659187582992386,3659183288025090,3659260597436418,3659277777305602,3659247712534530,3940735574016002,3940722689114114,3940658264604674,3940662559571970,3940752753885186,4222210551250944,4503685527175170,4503883096522753,4503608217763842,4785151914868736,5066807280533505,5066631187070976,5066755741188097,5066815870861313,5066704201973760,5066738561581056,5066674137661440,5066669841645568,5066781511778305,5066571058118656,5066802985697281,5066661252235264,5066729971056640,5066734267072512,5066691316744192,5066820165894145,5066811575369729,5066699907268608,5066618302824448,5066695611121664,5066708497006592,5066665546416128,5348114754699264,5629778710036481,5629585433886722,5629508127162368,5910983101841410,5910987396808706,5911077591121922,5911047526350850,5911060411252738,6192466671894530,6192475261829122,6192565456142338,6192458081959938,6192513916534786,6192767319605250,6192492441698306,6192479556796418,6192548276273154,6192505326600194,6192578341044226,6192496736665602,6192509621567490,6192488146731010,6192556866207746,6192586930978818,6192543981305858,6192453786992642,6192582636011522,6192501031632898,6192535391371266,6192483851763714,6192526801436674,6192470966861826,6474104856051712,6755528292433922,6755485342760962,6755442393874432,6755717270994946,6755536882368514,6755425214267392,6755429509496832,6755498227662850,6755459574530048,6755403738382338,6755455279497216,6755476752826370,6755493933875200,6755408033349634,6755433804398592,6755450984660992,6755515407532034,6755506818514944,6755416624660480,6755532587401218,6755446688907264,6755463869038592,6755438099103744,6755420919693312,7036895896272898,7036938845945858,7036891601305602,7036981795618818,7036951730847746,7036904486207490,7036913076142082,7037011860389890,7036883011371010,7036908781174786,7036900191240194,7036921666076674,7036930256011266,7037007565422594,7036968910716930,7036990385553410,7036878716403714,7036947436077058,7036956026208256,7036925961043970,7036934550978562,7037192249016322,7037003270455298,7036917371109378,7036960320782338,7036973205684226,7318448180494338,7318465360363522,7318650046316545,7318426705657858,7318435295592450,7318357986181122,7318667223826434,7318353691213826,7600056303681537,7600004764008448,7881385248817154,7881376658882562,7881398133719042,7881617177051138,7881415313588226,7881307939405826,8162954714873856,8162920354938880,8162894585462784,8163032024350721,8163036319186945,8162885996052480,8162890290233344,8162916060561408,8162959010889728,8163027729514497,8162795801935872,8162898881478656,8162924651085824,8162933240823808,8162843046641664,8163006255595521,8162928945790976,8162855930888192,8162963305398272,8162980487364609,8163044909711361,8163040614678529,8444567129096194,8444365265633282,8725969091756033,8725896077246464,8725887487705088,8725973386788865,8725891782541312,8725900372541440,8725926145884161,9007298042462210,9007246502854658,9007250797821954,9007259387756546,9007237912920066,9007229322985474,9007276567625730,9007315222331394,9007242207887362,9007216438083586,9007263682723842,9007336697167874,9007328107233282,9007220733050882,9007225028018178,9007233617952770,9007285157560322,9007203553181698,9007306632396802,9007255092789250,9007207848148994,9007332402200578,9007517085794306,9007293747494914,9288760134598658,9288721479892994,9288992062832642,9288768724533250,9288717184925698,9288803084271618,9288734364794882,9288691415121922,9288751544664066,9288811674206210,9288712889958402,9288700005056514,9288730069827586,9288708594991106,9288738659762178,9288678530220034,9288704300023810,9288781609435138,9288695710089218,9288790199369730,9288773019500546,9288725774860290,9288807379238914,9288682825187330,9570200752095234,9570179277258754,9570265176604674,9570213636997122,9570174982291458,9570235111833602,9570243701768194,9570247996735490,9570170687324162,9570183572226050,9570226521899010,9570282356473858,9570256586670082,9570209342029826,9570196457127938,9570153507454978,9570278061506562,9570192162160642,9570157802422274,9570166392356866,9570205047062530,9570467040067586,9570286651441154,9570187867193346,9851765920825344,9851894769975297,9851890474942465,9851744445726720,9851778806054912,9851881887367169,9851804575137792,9851808871153664,9851740150497280,9851774511349760,9851886179450881,9851748741742592,9851645662199808,9851705791152128,9851692906905600,9851813165662208,9851735856316416,9851770215202816,9851783101087744,9851856115859457,10133416993685506,10133150705713154,10133228015124482,10133146410745858,10133185065451522,10133163590615042,10133120640942082,10133197950353410,10133159295647746,10133116345974786,10133155000680450,10133133525843970,10133206540288002,10133215130222594,10133236605059074,10133107756040194,10133103461072898,10133176475516930,10133142115778562,10133129230876674,10133232310091778,10133193655386114,10133137820811266,10133124935909378,10414599912685570,10414629977456642,10414578437849090,10414891970461698,10414702991900674,10414582732816386,10414608502620162,10414634272423938,10414711581835266,10414625682489346,10414672927129602,10414612797587458,10414595617718274,10414660042227714,10414707286867970,10414604207652866,10414668632162306,10414621387522050,10414681517064194,10414591322750978,10414638567391234,10414617092554754,10414690106998786,10414651452293122,10696281045991425,10696070592331776,10696229505269760,10696233801285632,10696238095794176,10696195145334784,10696315405074433,10696203736186880,10696319700107265,10696117837037568,10696208031219712,10696130721284096,10696199441481728,10696311112531969,10977790381785089,10977670122045440,10977713072504832,10977794676817921,10977605697994752,10977786089308161,10977545569042432,10977674418192384,10977678712897536,10977592813748224,10977683007930368,10977704481980416,10977756022702081,10977708777996288,11259024842686466,11259084972228610,11259016252751874,11259093562163202,11259076382294018,11259029137653762,11259316900462594,11259127921901570,11259007662817282,11259050612490242,11259106447065090,11259042022555650,11259020547719170,11259132216868866,11259046317522946,11259003367849986,11259037727588354,11259063497392130,11259054907457538,11259136511836162,11259097857130498,11259059202424834,11259115036999682,11259033432621058,11540602898415618,11540538473906178,11540504114167810,11540568538677250,11540512704102402,11540478344364034,11540495524233218,11540581423579138,11540521294036994,11540516999069698,11540508409135106,11540559948742658,11540499819200514,11540525589004290,11540607193382914,11540590013513730,11540529883971586,11540491229265922,11540482639331330,11540534178938882,11540572833644546,11540791876976642,11540551358808066,11540611488350210,11822022040944640,12103505604837376,12103604388823040,12103578619740160,12103548555427840,12103445475885056,12103685993136129,12103574325035008,12103535670001664,12103582914772992,12103612979347456,12103694583660545,12103681701314561,12103544259411968,12103539964182528,12103492720590848,12103690288627713,12103570028888064,12103655929544705,12103565734510592,12103608684838912,12384980584693760,12385070774484992,12385135203450881,12385062184943616,12385122318417921,12385066479779840,12385143788994561,12385139498352641,12385148084027393,12385100843515905,12385075069779968,12666382542438402,12666459851849730,12948029322428416,13229414104891392,13510979272376320,13510867604144128,13510880488390656,13510820359438336,13510944912441344,13511065172180993,13510987862900736,13510953503293440,13511060880359425,13511069467213825,13511030813097985,13510983568392192,13510949208588288,13510957798326272,13792544443924481,13792454249086976,13792424185298944,13792535857135617,13792505789808641,13792462839611392,13792342580854784,13792295336148992,13792355465101312,13792419889152000,13792540148891649,13792428480004096,13792432775036928,13792458545102848,14073903456714752,14073899162009600,14073933521813504,14074019420635137,14073907751747584,14073817557565440,14073980766519297,14074010833911809,14074015125602305,14073770312859648,14073929225797632,14073894865862656,14073830441811968,14073937816322048,14355494397345793,14355292534276096,14355490102312961,14355245289570304,14355408498524160,14355374138720256,14355455743229953,14355378433425408,14355404202508288,14355485810688001,14355369842573312,14355305418522624,14355412793032704,14355382728458240,14636720266280960,14636887769743360,14636767510986752,14636960787464193,14636849115430912,14636853410136064,14636883475234816,14636844819283968,14636780395233280,14636965079023617,14636930719940609,14636969374056449,14636857705168896,14636879179218944,14918255371943936,14918332681879552,14918440055734273,14918444350767105,14918328386846720,14918358451945472,14918242487697408,14918362746454016,14918319795994624,14918435764240385,14918195242991616,14918405696651265,14918354155929600,14918324092141568,15199799068852224,15199829132640256,15199794772705280,15199910741016577,15199833428656128,15199919327477761,15199880673361921,15199807658590208,15199915032444929,15199730348654592,15199837723164672,15199717464408064,15199803363557376,15199670219702272,15481304109350912,15481355650072577,15481205325365248,15481274045562880,15481312699875328,15481282635300864,15481192441118720,15481269749415936,15481278340268032,15481308405366784,15481385717792769,15481394304188417,15481390009155585,15481145196412928,15762749022273536,15762860694568961,15762753316978688,15762667417829376,15762757612011520,15762744726126592,15762783382077440,15762869280899073,15762680302075904,15762779086061568,15762620173123584,15762830626783233,15762787676585984,15762864985866241,16044258358788096,16044142394540032,16044254062772224,16044228293689344,16044335671345153,16044344257609729,16044223998984192,16044339962576897,16044219702837248,16044095149834240,16044305603493889,16044155278786560,16044232588722176,16044262653296640,16325733335498752,16325819234320385,16325617371250688,16325737630007296,16325630255497216,16325694679547904,16325698975694848,16325570126544896,16325810648121345,16325703270400000,16325729039482880,16325707565432832,16325780580204545,16325814939287553,16607092347961344,16607208312209408,16607173952405504,16607105232207872,16607294211031041,16607255556915201,16607204016193536,16607289915998209,16607285624897537,16607045103255552,16607178247110656,16607182542143488,16607212606717952,16607169656258560,16888730533625857,16888764892708865,16888520079966208,16888683288920064,16888648929116160,16888567324672000,16888653223821312,16888769187741697,16888580208918528,16888657518854144,16888678992904192,16888644632969216,16888687583428608,16888760601673729,17170153969614848,17170128200531968,17170158265630720,17170235578449921,17170132495564800,17170055185629184,17170205510336513,17170244164452353,17170239869419521,17169995056676864,17170042301382656,17170119609679872,17170123905826816,17170162560139264,17451517278093312,17451470033387520,17451560227504128,17451590292013056,17451564521684992,17451667605553153,17451594586390528,17451714846130177,17451530162339840,17451607472275456,17451603177242624,17451719141163009,17451598882537472,17451568816914432,17451710550638593,17451633242341376,17451654720716801,17451573112930304,17451701960966145,17451628946325504,17451706255802369,17451680487047169,17451637536849920,17732932124344322,17733000843821058,17732927834030080,17733219891871745,17733009433755650,17733039498526722,17733241361989634,17733022318657538,18014501592563714,18014471527792642,18295976571895808,18295946507059200,18577434368802816,18858896460677120,19140435861962752,19422091224023042,19421816346116098,19421790576312322,19421872180690946,19421910835396610,19421799166246914,19421902245462018,19421777691410434,19421867885723650,19421803461214210,19421781986377730,19421880770625538,19421824936050690,19421820641083394,19421837820952578,19421807756181506,19421794871672832,19421889360560130,19421906540429314,19421829231017986,19421833525985282,19421812051148802,19421859295789058,19421850705854466,19703287027793922,19703269848383488,19703364337205250,19703385812041730,19703282732826626,19703347157336066,19703278437859330,19703265552957442,19703381517074434,19703355747270658,19703252668055554,19703312797597698,19703256963022850,19703325682499586,19703308502630402,19703377222107138,19703334272434178,19703295617728514,19703304207663106,19703566200668162,19703274142892034,19703342862368770,19703299912695810,19703291322761218,19984976751362049,19984869376786432,19984839312080896,19984993931558913,19984912327245824,19984744823783424,19984792068489216,19984877967638528,19984843607310336,19984835017900032,19984955277443073,19984903736721408,19984865082408960,19984804952735744,19984981046198273,19984989636526081,19984985341034497,19984908032737280,19984882262671360,19984873672933376,19984847903326208,19984929511636993,20266327179001856,20547746315436032,20547686191661056,20829251362750464,21110726333628418,21392201310273538,21673736416395264,21673749301231616,21673740711231488,21673745005936640,21673775077261313,21673822315479041,21673787962097665,21673818020446209,21955056773758978,21955134083170306,22236725030748161,22236767973867521,22236694959357952,22236690664652800,22236686369816576,22236772268900353,22236699254652928,22518114103590914,22518126988492802,22518028205293568,22518058270326784,22518135578427394,22518053975293952,22518315967053826,22518105513656322,22518096923721730,22518084038819842,22518019615490048,22518049680457728,22518045384704000,22518015320457216,22518131283460098,22518041089146882,22518006729408514,22518062563983362,22518023910064128,22518036794179586,22518075448885250,22518002434441218,22518032500195328,22518092629671936,22799528950824962,22799790943830018,22799550425661442,22799481706184706,22799498886774784,22799503182004224,22799490297167872,22799559015596034,22799606260236290,22799533245792258,22799507476905984,22799571900497922,22799524655857666,22799511770955778,22799601965268994,22799580490432514,22799567606382592,22799537540759554,22799494592200704,22799516065923074,22799589080367106,22799477411217410,22799610555203586,22799520360890370,23081008223748096,23081265920278530,23081081236684802,23081046876946434,23080982453616640,23081033992044546,23080999633879040,23081055466881026,23080991043092480,23081003928715264,23081076941717506,23080995338125312,23080956682633218,23080965273878528,23080952387665922,23080973863485440,23081025402109954,23080978158714880,23081085531652098,23081064056815618,23081042583093248,23080969568911360,23081012518256640,23080986748321792,23362740897120258,23362448840196096,23362427364507650,23362530443722754,23362556213526530,23362470314835968,23362500378951682,23362474610589696,23362440250589184,23362453135425536,23362478905425920,23362483200458752,23362461724246018,23362517559803904,23362551918559234,23362560508493826,23362444545622016,23362539033657346,23362457430327296,23362466019213314,23362521853788162,23362487494049794,23362431659474946,23362508968886274,23643992536055810,23643958176317442,23643923816579074,23643996831023106,23644215874355202,23643953881350146,23644005420957698,23643936701480962,23643902341742594,23643932407037952,23644014010892290,23644026895794178,23643945291415554,23643928111546370,23644035485728770,23643940996448258,23643919522332672,23643906636709890,23643962471284738,23643949586382850,23643915226644482,23643975356186626,23643983946121218,23644031190761474,23925690850476034,23925394499043328,23925480397078530,23925377317863426,23925488987013122,23925433153880064,23925398793617408,23925510461849602,23925428858847232,23925501871915010,23925467513225216,23925506166882306,23925458922242050,23925381612830722,23925415973224448,23925390204010496,23925420268257280,23925437447405570,23925450332307458,23925411678453760,23925403088846848,23925407383748608,23925424564011008,23925471807143938,24206942489608194,24206946784575490,24206852295294978,24206895244967938,24206869475753984,24206882360459264,24206925309739010,24206903834902530,24206933899673602,24206955374510082,24206878065098754,24206981144313858,24207165827907586,24206865180196866,24206899539935234,24206985439281154,24206976849346562,24206963964444674,24206890950000642,24206886655033346,24206873770131458,24206908129869826,24206856590262274,24206912424837122,24488331567038466,24488417466384386,24488327272071170,24488451826122754,24488340156973058,24488421761351682,24488353041874946,24488387401613314,24488370221744130,24488460416057346,24488400286515202,24488378811678722,24488456121090050,24488438941220866,24488365926776834,24488348746907650,24488361631809538,24488344452464640,24488408876449794,24488374516711426,24488640804683778,24488383106646018,24488357337169920,24488430351286274,24769828018454530,24769926802702338,24769931097669634,24769862378192898,24769823723487234,24769845198323714,24769892442963970,24769819429175296,24769849493291010,24769853788258306,24769913917800450,24769896737931266,24769836608389122,24769802248650754,24769858083225602,24769935392636930,24770115781263362,24769875263094786,24769905327865858,24769806543618050,24769840903356418,24769883853029378,24769832313880576,24769815133552642,25051320174837762,25051590757777410,25051388894314498,25051401779216386,25051290110066690,25051298700460032,25051281520132098,25051350239608834,25051302995689472,25051324469805058,25051294405885952,25051406074183682,25051277225164802,25051333059739650,25051315879870466,25051410369150978,25051328764772354,25051380304379906,25051367420067840,25051337354706946,25051311584903170,25051358829543426,25051371714445314,25051307290591232,25332855281156098,25332842396254210,25333065734553602,25332803741548546,25332752201940994,25332808036515842,25332777971744770,25332833806319618,25332863871090690,25332881050959874,25332773676777474,25332885345927170,25332790856646658,25332825216385026,25332786561679362,25332795151613954,25332876755992578,25332756496908290,25332782266712066,25332812331483138,25332769382596608,25332846691221506,25332765086842882,25332799446581250,25614231473422338,25614287307997186,25614351732506626,25614240064274432,25614317373489152,25614300192899074,25614360322441218,25614283013029890,25614257244012544,25614270128128002,25614278718062594,25614308782833666,25614248653881344,25614244359307264,25614227178455042,25614274423095298,25614252949110784,25614338847604738,25614321667735554,25614540711067650,25614265833160706,25614356027473922,25614261538193410,25614330257670146,25896015687843842,25895715040985088,25895706450198530,25895826709282818,25895719336017920,25895783759609858,25895736514969602,25895831004250114,25895745104904194,25895702155231234,25895749399871490,25895753694838786,25895813824380930,25895732220723200,25895727925821440,25895723630592000,25895762284773378,25895757989806082,25895805234446338,25895775169675266,25895792350199808,25895740809936898,25895796644511746,25895835299217410,26177301685862402,26177258736189442,26177232966385666,26177181426778114,26177267326910464,26177490664423426,26177211491549186,26177177131810818,26177310275796994,26177198607302656,26177194312728576,26177215786516482,26177207197433856,26177280211025922,26177305980829698,26177250146254850,26177220081483778,26177288800960514,26177237261352962,26177271621091330,26177224376451074,26177190017695744,26177202902532096,26177228671418370,26458733717356544,26740131381575682,26740432032432129,26740208690987010,27021855463964673,27021666486255616,27021679370502144,27021619241549824,27021829695209473,27021743794552832,27021756680437760,27021752385404928,27021722321092608,27021782450503680,27021786745012224,27021778154487808,27021718025076736,27021851174633473,27021739500175360,27021859758800897,27021864054292481,27021713729847296,27021868349325313,27021709435666432,27021748090699776,27303081332703234,27303150052179970,27303077037735938,27303171527016450,27303390570348546,27303158642114562,27303188706885634,27584689453596672,27584732403924992,27584702338826240,27584809712222209,27584779648630785,27584801122549761,27584736698433536,27584805417385985,27584814007713793,27584659389087744,27584672274513920,27584616439676928,27584818302746625,27584698044121088,27584667978498048,27584728107909120,27584706633859072,27584629323923456,27584663683268608,27584753883480065,27584693747974144,27584569194971136,27866168724684800,27866284688932865,27866211675144192,27866173020831744,27866134365798400,27866203084619776,27866181610569728,27866142955208704,27866293279457281,27866147251224576,27866091416387584,27866138659979264,27866254625341441,27866280399863809,27866164430307328,27866288984424449,27866104300634112,27866177315536896,27866207380635648,27866044171681792,28147613638918146,28147596459048962,28147527739572226,28147574984212482,28147626523820034,28147536329506818,28147544919441410,28147519149637634,28147635113754626,28147501969768450,28147630818787330,28147523444604930,28147506264735746,28147532034539522,28147583574147074,28147562099310594,28147592164081666,28147553509376002,28147557804343298,28147549214408706,28147815502381058,28147605048983554,28147540624474114,28147514854670338,28429153038041088,28429204578762753,28429157334056960,28429122974253056,28429243232878593,28429088613400576,28429226052681729,28429084319219712,28429041369808896,28429092908630016,28429054254055424,28429238937845761,28429230347517953,28429097204645888,28429049958563840,28429114383728640,28429178813743105,28429118678106112,28429131563991040,28428994125103104,28429127268958208,28429234642354177,28429161628565504,28710709619064833,28710572181356544,28710597950963712,28710606540701696,28710636605276160,28710563590111232,28710602245668864,28710713914556417,28710559295930368,28710718209589249,28710567885340672,28710469101813760,28710632310767616,28710679555473409,28710628014751744,28710516346519552,28710529230766080,28710593654816768,28710705330126849,28710589360439296,28991999918276608,29273517838761984,29273552199090176,29273479184187392,29273509249351680,29273668163010561,29273577968173056,29273663867977729,29273466299940864,29273629508894721,29273556494123008,29273539313860608,29273547904385024,29273513543532544,29273543608238080,29273659572486145,29273655283679233,29273586558697472,29273419055235072,29273522134777856,29273582264188928,29555048649129984,29555044353835008,29555035764293632,29555121663377409,29555117368344577,29555074425880577,29555040059129856,29836605231071233,29836527921594368,29836472088199168,29836429137608704,29836463496953856,29836497857806336,29836613821399041,29836579462316033,29836489267281920,29836506447544320,29836618116431873,29836609525907457,29836467792183296,29836600936235009,29836553697624065,29836493561659392,29836369008656384,29836459202772992,29836416253362176,29836532217610240,29836502152511488,29836536512118784,30117908415315968,30399306076127234,30399589550522369,30399383385538562,30399370500308992,30680845477019648,30680875548737536,30962341930991618,30962376290729986,30962281801449474,30962380585697282,30962268916547586,30962354815893506,30962277506482178,30962311866220546,30962264621580290,30962384880664578,30962286096416770,30962290391384066,30962251736678402,30962565269291010,30962324751122434,30962273211514882,30962303276285954,30962298981318658,30962294686351362,30962333341057026,30962307571253250,30962346225958914,30962256031645698,30962363405828098,31244027365752833,31243808318226434,31243731012943872,31525515220877314,31525274702708738,31525201688264706,31525283292643330,31525296177545218,31525313357414402,31525205983232002,31806749685972992,32088151641948162,32088263311097858,32088465174560770,32088233246326786,32088246131228674,32088155936915458,32088276195999746,32088284785934338,32088280490967042,32088224656392194,32369721114296320,32651174609879042,32651213264584706,32651230444453890,32651101595435010,32651226149486594,32651105890402306,32651415128047618,32651196084715522,32651234739421186,32651183199813634,32932606638489602,32932688242868226,32932636703260674,32932593753587714,32932658178097154,32932628113326082,32932598048555010,32932645293522946,32932701127770114,32932632408293378,32932649588162562,32932602343522306,32932705422737410,32932666768031746,32932679652933634,32932671062999042,32932709717704706,32932580868685826,32932619523391490,32932615228424194,32932890106331138,32932589458620418,32932610933456898,32932576573718530,32932623818358786,33214176103170050,33214180404232192,33214146038398978,33214124563562498,33214055844085762,33214051549118466,33214184693104642,33214163218268162,33214133153497090,33214274893578241,33214365081731074,33495595244126208,33495625308962818,33777113169657858,33777315033120770,34058485075410944,34340234930159617,34340033059356674,34339955757219840,34621602525675520,34621533806854144,34621563871363072,34621692720513025,34621576756592640,34621611116199936,34621538101035008,34621581051625472,34621503741689856,34621490857443328,34621542396264448,34621568165740544,34621546692280320,34621654066397185,34621572461887488,34621679842164737,34621443612737536,34621688425480193,34621684129988609,34621606821691392,34903103279333377,34903086092910592,34903150517026817,34903043142451200,34903167697223681,34903077502386176,34902965834153984,34903021668990976,34903047438598144,34903013077745664,34903081798402048,34902918589448192,34903051733303296,34902978718400512,34903154811863041,34903159106699265,34903017372975104,34903129043107841,34903056028336128,34903163402190849,34903038848073728,34903008783564800,35184457992372226,35184380682960898,35465920083918850,35465950148689922,35747442303107072,35747472368730112,35747438007877632,35747528209530881,35747480958468096,35747446599122944,35747403648532480,35747511023042560,35747579741995009,35747584036831233,35747588332322817,35747468072583168,35747343519580160,35747390764285952,35747476663435264,35747592627355649,35747553973239809,35747506728534016,35747433713696768,35747502432518144,35747463778205696,35747575447158785,36029059013541889,36028908690407424,36028955935178752,36028977409228800,36028818496290816,36028912984588288,36028985999753216,36029063309033473,36028878625243136,36029054725914625,36029067604066305,36029028949950465,36028917279817728,36028947345440768,36028938754916352,36028951640145920,36028921575833600,36028981705244672,36028943049293824,36028865740996608,36310349307248642,36310387961954306,36310280587771906,36310409436790786,36310589825417218,36310357897183234,36310370782085122,36310400846856194,36310405141823490,36310276292804610,36591996081143809,36591991786110977,36591948844826625,36591910182060032,36591918771601408,36591914476896256,36591923066896384,36873389453606912,36873423821602817,36873393748312064,36873385158770688,36873398043607040,36873471057854465,36873466762821633,37154705517248514,37154782826659842,37436257803763714,37436287868534786,37436309343371266,37436489731997698,37436176199385090,37436300753436674,37436305048403970,37436270688665602,37436180494352386,37436249213829122,37717732782637058,37717655473225730,37999199174459392,38280914662457346,38280734273830914,38280729978863618,38280712798994434,38280725683896322,38280601129844738,38280695619125250,38280682734223362,38280605424812034,38280674144288770,38562174889820162,38562144824918016,38843619801628672,38843555377381378,38843632686792706,39125026059845634,39125099074289666,39125137728995330,39125159203831810,39125107664224258,39125030354812930,39125339592458242,39125154908864514,39125150613897218,39125120549126146,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Decl::Var{_item0_:_item0_,id:id,ty:ty,expr:expr} }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<FunType<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut params = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Decl::Fun{_item0_:_item0_,id:id,params:params,ty:ty,expr:expr} }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_54(_x_54)=parser.popstack().value { _x_54 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Type::Int(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Type::Bool(_item0_) }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Type::Unit(_item0_) }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Type::String(_item0_) }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()};  Type::Array(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()};  FunType::SingleParam{ty:ty,ret:ret} }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<TypeList<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  FunType::MultiParam{ty:ty,ret:ret} }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<Vec<LC<Type<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()};  TypeList::TypeList(_item0_,_item1_) }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
 Vec::new() }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_45(_x_45)=parser.popstack().value { _x_45 } else {<Vec<LC<Type<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Chain(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::Let{_item0_:_item0_,id:id,ty:ty,expr:parser.lbx(5,expr)} }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut lhs = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<Lhs<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::Set{_item0_:_item0_,lhs:parser.lbx(1,lhs),expr:parser.lbx(3,expr)} }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::While{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,expr:parser.lbx(3,expr)} }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut init = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut size = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::New{_item0_:_item0_,ty:ty,size:parser.lbx(3,size),init:parser.lbx(5,init)} }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut els = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Else<'lt>>::default()}; let mut then = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::If{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,then:parser.lbx(3,then),els:parser.lbx(4,els)} }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Else::Else(_item0_,parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Unit }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Add(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Sub(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Mul(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  Expr::Pow(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_71(_x_71)=parser.popstack().value { _x_71 } else {<ExprList<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::FunCall(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<Lhs<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::Id(_item0_) }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  Expr::Paren(parser.lbx(1,_item1_)) }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Lhs::Id(_item0_) }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<Lhs<'lt>>::default()};  Lhs::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ExprList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()};  ExprList(parser.lbx(0,_item0_),_item1_,) }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<()>::default()};  _item1_ }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<i64>::default()};  Expr::Num(_item0_) }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::String(_item0_) }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::True(_item0_) }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::False(_item0_) }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::Null(_item0_) }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<&'lt str>::default()};  Expr::Unit(_item0_) }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(72,140,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_6_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_54(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ArrayType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("SingleParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MultiParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_21_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_45(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Op");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_71(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_62_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_63_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_63_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";

 for i in 0..1577 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_0(Program<'lt>),
  Enumvariant_71(ExprList<'lt>),
  Enumvariant_55(Decl<'lt>),
  Enumvariant_60(Vec<LC<Decl<'lt>>>),
  Enumvariant_56(Else<'lt>),
  Enumvariant_63(FunType<'lt>),
  Enumvariant_54(Vec<LC<&'lt str>>),
  Enumvariant_70(Vec<LC<Expr<'lt>>>),
  Enumvariant_20(i64),
  Enumvariant_64(ParamList<'lt>),
  Enumvariant_45(Vec<LC<Type<'lt>>>),
  Enumvariant_69(()),
  Enumvariant_58(TypeList<'lt>),
  Enumvariant_67(&'lt str),
  Enumvariant_57(Type<'lt>),
  Enumvariant_72(Expr<'lt>),
  Enumvariant_2((usize,usize)),
  Enumvariant_66(Lhs<'lt>),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct rustlrlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> rustlrlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> rustlrlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["_WILDCARD_TOKEN_",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')','%',':','|','=',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#"%"#,"MOD"),(r#":"#,"COLON"),(r#"|"#,"PIPE"),(r#"||"#,"OR"),(r#"="#,"ASSIGN"),] {lexnames.insert(k,v);}
    stk.add_custom("WHILE", r"\bwhile\b");
    stk.add_custom("LET", r"\blet\b");
    stk.add_custom("SET", r"\bset\b");
    stk.add_custom("IF", r"\bif\b");
    stk.add_custom("THEN", r"\bthen\b");
    stk.add_custom("ELSE", r"\belse\b");
    stk.add_custom("DO", r"\bdo\b");
    stk.add_custom("NEW", r"\bnew\b");
    stk.add_custom("TRUE", r"\btrue\b");
    stk.add_custom("FALSE", r"\bfalse\b");
    stk.add_custom("NULL", r"\bnull\b");
    stk.add_custom("UNIT", r"\bunit\b");
    stk.add_custom("TINT", r"\bInt\b");
    stk.add_custom("TBOOL", r"\bBool\b");
    stk.add_custom("TSTRING", r"\bString\b");
    stk.add_custom("TUNIT", r"\bUnit\b");
    stk.add_custom("Id", r"[a-zA-Z_][a-zA-Z0-9'_]*");
    stk.set_line_comment("--");
    rustlrlexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for rustlrlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Custom("WHILE", WHILE)      => Some(TerminalToken::from_raw(token,"WHILE",RetTypeEnum::Enumvariant_67( WHILE
))),
      RawToken:: Custom("LET", LET)          => Some(TerminalToken::from_raw(token,"LET",RetTypeEnum::Enumvariant_67( LET
))),
      RawToken:: Custom("SET", SET)          => Some(TerminalToken::from_raw(token,"SET",RetTypeEnum::Enumvariant_67( SET
))),
      RawToken:: Custom("IF", IF)            => Some(TerminalToken::from_raw(token,"IF",RetTypeEnum::Enumvariant_67( IF
))),
      RawToken:: Custom("THEN", THEN)        => Some(TerminalToken::from_raw(token,"THEN",RetTypeEnum::Enumvariant_67( THEN
))),
      RawToken:: Custom("ELSE", ELSE)        => Some(TerminalToken::from_raw(token,"ELSE",RetTypeEnum::Enumvariant_67( ELSE
))),
      RawToken:: Custom("DO", DO)            => Some(TerminalToken::from_raw(token,"DO",RetTypeEnum::Enumvariant_67( DO
))),
      RawToken:: Custom("NEW", NEW)          => Some(TerminalToken::from_raw(token,"NEW",RetTypeEnum::Enumvariant_67( NEW
))),
      RawToken:: Custom("TRUE", TRUE)        => Some(TerminalToken::from_raw(token,"TRUE",RetTypeEnum::Enumvariant_67( TRUE
))),
      RawToken:: Custom("FALSE", FALSE)      => Some(TerminalToken::from_raw(token,"FALSE",RetTypeEnum::Enumvariant_67( FALSE
))),
      RawToken:: Custom("NULL", NULL)        => Some(TerminalToken::from_raw(token,"NULL",RetTypeEnum::Enumvariant_67( NULL
))),
      RawToken:: Custom("UNIT", UNIT)        => Some(TerminalToken::from_raw(token,"UNIT",RetTypeEnum::Enumvariant_67( UNIT
))),
      RawToken:: Custom("TINT", TINT)        => Some(TerminalToken::from_raw(token,"TINT",RetTypeEnum::Enumvariant_67( TINT
))),
      RawToken:: Custom("TBOOL", TBOOL)      => Some(TerminalToken::from_raw(token,"TBOOL",RetTypeEnum::Enumvariant_67( TBOOL
))),
      RawToken:: Custom("TSTRING", TSTRING)  => Some(TerminalToken::from_raw(token,"TSTRING",RetTypeEnum::Enumvariant_67( TSTRING
))),
      RawToken:: Custom("TUNIT", TUNIT)      => Some(TerminalToken::from_raw(token,"TUNIT",RetTypeEnum::Enumvariant_67( TUNIT
))),
      RawToken:: Custom("Id", id)  => Some(TerminalToken::from_raw(token,"Id",RetTypeEnum::Enumvariant_67( id
))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"Num",RetTypeEnum::Enumvariant_20( n
))),
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"Str",RetTypeEnum::Enumvariant_67(_tt))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_67(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
