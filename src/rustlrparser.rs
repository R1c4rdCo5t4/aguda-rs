//Parser generated by rustlr for grammar rustlr
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::rustlr_ast::*;

static SYMBOLS:[&'static str;81] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","!","[","]","(",")","COLON","MOD","PIPE","ASSIGN","OR","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","TRUE","FALSE","NULL","UNIT","TINT","TBOOL","TSTRING","TUNIT","Id","Num","Str","Program","Decl","Type","Expr","ParamList","TypeList","ExprList","FunType","Else","Lhs","SingleParam","MultiParam","ArrayType","BaseType","Chain","Stmt","Or","And","Comp","AddSub","MulDiv","Pow","Primary","Literal","Unary","NEWRENT_1_0","NEWSEQNT_6_0","NEWRENT_7_1","NEWSEQNT_21_0","NEWRENT_22_1","NEWSEQNT_26_0","NEWRENT_27_1","NEWSEQNT_68_0","NEWRENT_69_1","START","EOF"];

static TABLE:[u64;1773] = [343597449218,193273593857,300647841793,115964182530,281818574094339,563065917800448,563293550804994,563147522113537,844540894380034,844768527646722,1126080295796736,1407465078259712,1407456488390656,1689051724251137,1689021659676672,1689013069676544,1689094674186241,1689017364840448,1689025954840576,1689098968956929,1970505226649600,1970535291355137,2251902894080000,2251872829243392,2533360690331650,2533287675887618,2533283380920322,2533347805429762,2533377870200834,2814758357762050,2814822782271490,2814852847042562,2814835667173378,2814762652729346,3096297759178754,3096237629636610,3096233334669314,3096327823949826,3096310644080642,3377785620529154,3377802800398338,3377772735627266,3377708311117826,3377712606085122,3659277777240066,3659187582926850,3659247712468994,3659260597370882,3659183287959554,3940752754016258,3940662559703042,3940735574147074,3940722689245186,3940658264735746,4222210551250944,4503608217763842,4503685527175170,4503908866326529,4785151914868736,5066820165632001,5066828755304449,5066729970925568,5066669841645568,5066824460926977,5066738562236416,5066631187791872,5066802986221569,5066665546612736,5066841641320449,5066704202825728,5066708496744448,5066807281909761,5066833051779073,5066845934977025,5066837346549761,5066661252038656,5066755741188097,5066781511712769,5066618302300160,5066815871320065,5066691317727232,5066699906482176,5066734265958400,5066695612497920,5066674137268224,5066571057922048,5066811576287233,5348114755092480,5629508127555584,5629585433886722,5629804480233473,5911077591121922,5911060411252738,5910983101841410,5910987396808706,5911047526350850,6192470966140930,6192475261108226,6192586930257922,6192793088688130,6192582635290626,6192501030912002,6192496735944706,6192492440977410,6192565455421442,6192548275552258,6192556865486850,6192505325879298,6192479556075522,6192509620846594,6192535390650370,6192488146010114,6192526800715778,6192458081239042,6192453786271746,6192578340323330,6192483850846208,6192543980584962,6192466671173634,6192513915813890,6473928763375618,6473958828146690,6474061907361794,6474010367754242,6473963123113986,6473980302983170,6474040432525314,6473933058342914,6473984597950466,6473971713048578,6473976008015874,6473988892917762,6473954533179394,6474057612394498,6473997483048962,6474053317427202,6474006072262656,6474268065792002,6474018957688834,6473950238212098,6473945943244802,6474031842590722,6474001777819650,6474023252656130,6473941648277506,6473967418081282,6755528294727682,6755408035643394,6755429510479874,6755455280283650,6755743043092482,6755506819891202,6755446690349058,6755442395381762,6755476755120130,6755485345054722,6755416625577986,6755459575250946,6755425215512578,6755536884662274,6755403740676098,6755450985316354,6755463870218242,6755532589694978,6755420920545282,6755493934989314,6755498229956610,6755438100414466,6755515409825794,6755433805447170,7036960320389122,7036930255618050,7036925960650754,7036900191305728,7036990385160194,7037011859996674,7036891600912386,7036938845552642,7036981795225602,7036951730454530,7036904486141952,7036913075748866,7036921665683458,7036968910716928,7037007565029378,7036934550585346,7037003270062082,7036917370716162,7036895895879682,7037218018426882,7036973205291010,7036883010977794,7036878716010498,7318529786904576,7600056303353857,7600004763680768,7881325122551810,7881303647715330,7881385252093954,7881398136995842,7881346597388290,7881393842028546,7881342302420994,7881333712486402,7881350892355586,7881338007453698,7881355187322882,7881320827584514,7881329417519106,7881406726930434,7881436791701506,7881642950131714,7881307942682626,7881316532617218,7881428201766914,7881376662159362,7881363777257474,7881432496734210,7881359482290178,7881415316865026,8162881701412866,8162782917165058,8162911766183938,8162907471216642,8162817278541824,8162778622197762,8163117924614146,8162903176249346,8162821573246976,8162834458214400,8162838751739906,8162860226576386,8162851636641794,8162830163378176,8162825868541952,8162890291347458,8162873111478274,8162812983443456,8444592898899970,8444365265633282,8725745755160576,8725956208951297,8725874603720704,8725792999538688,8725883193982976,8726012043788289,8725870309736448,8725878900064256,8726020635164673,8726016338558977,8725908963196928,8725904668164096,8725805885030400,8725913259474944,9007469839581185,9007319515594752,9007280861741056,9007345286447104,9007482725728257,9007495608926209,9007465545269249,9007478429253633,9007487020498945,9007383939907584,9007388236185600,9007353876774912,9007491315269633,9007340991676416,9007349580431360,9007461250236417,9007220731871232,9007379644874752,9007474134876161,9007431185661953,9007315220561920,9007456957235201,9007310925987840,9007267976249344,9007323811217408,9007358170693632,9288773020680194,9288717186105346,9288712891138050,9289017833816066,9288708596170754,9288682826366978,9288695711268866,9288781610614786,9288700006236162,9288704301203458,9288678531399682,9288691416301570,9288811675385858,9288730071007234,9288751545843714,9288768725712898,9288725776039938,9288790200549378,9288738660941826,9288760135778306,9288721481072642,9288734365974530,9288807380418562,9288803085451266,9570226520653826,9570265175359490,9570282355228674,9570170687520768,9570196455882754,9570200750850050,9570192160915458,9570256585424898,9570157801177090,9570153506209794,9570247995490306,9570286650195970,9570209340784642,9570235110588418,9570492808626178,9570166392619008,9570205045817346,9570187865948162,9570278060261378,9570213635751938,9851920542269441,9851856115793921,9851813166317568,9851770216579072,9851645662003200,9851783100825600,9851804575006720,9851692906381312,9851774510563328,9851778806906880,9851911950630913,9851916245401601,9851808870039552,9851705791873024,10133215127273474,10133185062502402,10133176472567810,10133107753091074,10133197947404290,10133442760540162,10414831841050625,10414754528428032,10414861904052225,10414690104115200,10414866198822913,10414685809541120,10414836133789697,10414763119738880,10414655745294336,10414698694770688,10414720170000384,10414844723134465,10414733054246912,10414724463984640,10414849018429441,10414715875229696,10414728760328192,10414694399148032,10414870492479489,10414853312806913,10414857609281537,10414806069215233,10414758823460864,10414642859802624,10414840428822529,10414595615424512,10696156493971456,10696057707298818,10696182261350402,10696135016710146,10696126426775554,10696165081481218,10696186556317698,10696177966383106,10696147901612034,10696053412331522,10696392714747906,10977657238192130,10977652943224834,10977601403617282,10977622878453762,10977588521074688,10977528389173250,10977631468388354,10977609993551874,10977532684140546,10977640058322946,10977661533159426,10977867691589634,11259256769544193,11259149394116608,11259282539413505,11259230999347201,11259145100132352,11259080675426304,11259291128954881,11259153690460160,11259123624902656,11259110739673088,11259205231771649,11259269653266433,11259261063921665,11259115034247168,11259183753592832,11259252473856001,11259278242938881,11259273948561409,11259067789934592,11259020545556480,11259265358954497,11259188049870848,11259119329280000,11259286834184193,11259179458560000,11259157984378880,11259140805361664,11259295422611457,11540547064561664,11822013450551298,11822034925387778,11821974795845634,11821991975714818,11821979090812930,11822086464995330,11822043515322370,11821983385780226,11821953321009154,11821996270682114,11821957615976450,11821987680747522,11822082170028034,11822077875060738,11822064990158850,11822047810289666,11822056400224258,11822292623425538,11822009155584002,11821966205911042,11821970500878338,11822004860616706,11822000565649410,11822026335453186,12103462658048002,12103445478178818,12103428298309634,12103441183211522,12103561442295810,12103488427851778,12103501312753666,12103484132884482,12103458363080706,12103432593276930,12103466953015298,12103454068113410,12103518492622850,12103449773146114,12103475542949890,12103767600726018,12103539967459330,12103479837917186,12103471247982594,12103509902688258,12103531377524738,12103522787590146,12103557147328514,12103552852361218,12385027829006338,12384946224627714,12384993469267970,12384950519595010,12384941929660418,12384920454823938,12384929044758530,12384997764235266,12384937634693122,12384954814562306,12385032123973634,12384984879333378,12384907569922050,12384916159856642,12384976289398786,12384924749791234,12384959109529602,12385036418940930,12384903274954754,12384963404496898,12385006354169858,12385242577371138,12385014944104450,12384933339725826,12666468445126658,12666511394799618,12666481330028546,12666451265257474,12666489919963138,12666395430682626,12666438380355586,12666404020617218,12666378250813442,12666434085388290,12666421200486402,12666416905519106,12666425495453698,12666391135715330,12666472740093954,12666408315584514,12666502804865026,12666399725649922,12666459855192066,12666412610551810,12666382545780738,12666717553229826,12666429790420994,12666507099832322,12948098037383169,12948020728102912,12948012138102784,12948016433266688,12948093742612481,12948025023266816,12948050797199361,13229401216581634,13229328202137602,13229439871287298,13229422691418114,13229667504553986,13229650328027137,13229409806516226,13229332497104898,13510803180617730,13510841835323394,13510927734669314,13510837540356098,13510932029636610,13510863310159874,13510884784996354,13510936324603906,13510914849767426,13510828950421506,13510897669898242,13510876195061762,13510846130290690,13510807475585026,13510859015192578,13510850425257986,13510854720225282,13510893374930946,13511142483034114,13510906259832834,13510816065519618,13510824655454210,13510820360486914,13792316813410306,13792389827854338,13792372647985154,13792368353017858,13792411302690818,13792291043606530,13792312518443010,13792299633541122,13792402712756226,13792333993279490,13792295338573826,13792351173148674,13792325403344898,13792381237919746,13792359763083266,13792321108377602,13792617461121026,13792308223475714,13792338288246786,13792407007723522,13792303928508418,13792329698312194,13792282453671938,13792278158704642,14073912044945408,14073920634945536,14073916340109312,14073997944225793,14073972179075073,14073950704173057,14073993649455105,14073924930109440,14073985064108033,14073989359009793,14073830445350912,14355309712113666,14355232402702338,14636879183085568,14918465826193409,14918354155798528,14918461531422721,14918195242795008,14918242487173120,14918255372664832,14918324091355136,14918405696585729,14918358450831360,14918457239076865,14918332681617408,14918362747109376,14918328387698688,14918470119849985,14918319797370880,15199923622510593,15199803364409344,15199932213362689,15199769003229184,15199794774081536,15199910737870849,15199829132509184,15199790479310848,15199919327215617,15199902147805185,15199799068065792,15199945096560641,15199764708196352,15199837723820032,15199906443493377,15199915032903681,15199936508133377,15199773298851840,15199807658328064,15199730349375488,15199717463883776,15199927916888065,15199833427542016,15199880673296385,15199854906507265,15199760413622272,15199867791343617,15199670219505664,15199940802904065,15481205326086144,15481274044776448,15481308404252672,15481420073271297,15481355650007041,15481192440594432,15481269750792192,15481145196216320,15481407192694785,15481304109219840,15481411484844033,15481278341120000,15481282635038720,15481312700530688,15481415779614721,15762890756325377,15762680302796800,15762886461554689,15762882169470977,15762753317830656,15762620172926976,15762779085930496,15762744727502848,15762667417305088,15762749021487104,15762895049981953,15762757611749376,15762783380963328,15762787677241344,15762830626717697,16044254062641152,16044155279507456,16044361438265345,16044095149637632,16044305603428353,16044357146247169,16044223998197760,16044228294541312,16044258357673984,16044142394015744,16044370026692609,16044262653952000,16044365733036033,16044219704213504,16044232588460032,16325638849495040,16607126709403650,16607096644632578,16888601687883776,16888571623178240,17170132495302656,17170042300858368,17170055186350080,17170261345107969,17170248463417345,17170153969483776,17170265639878657,17170205510270977,17170123905040384,17170269933535233,17170119611056128,17170162560794624,17170257050337281,17170128201383936,17170252753862657,17169995056480256,17170158264516608,17451736321818625,17451470033190912,17451732027047937,17451517277569024,17451723440193537,17451628946194432,17451598881751040,17451594587766784,17451740616589313,17451633241227264,17451727730573313,17451680486981633,17451530163060736,17451603178094592,17451607472013312,17451637537505280,17451744910245889,17733211298529281,17733078154805248,17733202707283969,17733069564477440,17733219886956545,17733103922905088,17733155463692289,17732945009901568,17733108217937920,17733207003758593,17733082448723968,17733073858461696,17733112514215936,17732992254279680,17733198416969729,17733005139771392,17733215593299969,18014544541188096,18014480116482048,18014553131515904,18014583194648576,18014686275239937,18014557425434624,18014587490926592,18014694863667201,18014578899615744,18014630440402945,18014690570010625,18014467230990336,18014548835172352,18014673393745921,18014419986612224,18014681980469249,18014677683994625,18295894963322880,18296032402145280,18296152660705281,18296028108226560,18296058171359232,18295942207700992,18296165546721281,18296169840377857,18296161251950593,18296023811883008,18296053876326400,18295955093192704,18296105417113601,18296148370522113,18296156957179905,18296062467637248,18296019517898752,18577417184411648,18577627637415937,18577498788593664,18577507378855936,18577636228661249,18577369940033536,18577503084937216,18577494494609408,18577644817088513,18577533148069888,18577631933890561,18577640523431937,18577430069903360,18577537444347904,18577623347298305,18577580393824257,18577528853037056,18858879277924354,18858909342695426,18859167040733186,18858853508120578,18858956587335682,18858922227597314,18858960882302978,18858857803087874,18858832033284098,18858887867858946,18858917932630018,18858849213153282,18858930817531906,18858827738316802,18858844918185986,18858883572891650,18858840623218690,18858952292368386,18858866393022466,18858862098055170,18858900752760834,18858870687989762,18858939407466498,18858874982957058,19140435861831680,19422061158793217,19422065453563905,19421962374479872,19422056864022529,19421923718725632,19422069747220481,19421932308987904,19421928015069184,19421855000035328,19422005323956225,19422052572528641,19421919424741376,19421953783169024,19421842114543616,19421794870165504,19421958078201856,19703527549304833,19703433054912512,19703540430274561,19703317091254272,19703437351190528,19703269846876160,19703394401452032,19703407285698560,19703402991779840,19703536135503873,19703428759879680,19703480300666881,19703531840733185,19703398695436288,19703329976745984,19703544723931137,19984852199276546,19984744825094146,19985066947641346,19984731940192258,19984770594897922,19984783479799810,19984762004963330,19984753415028738,19984749120061442,19984757709996034,19984766299930626,19984817839538178,19984856494243842,19984727645224962,19984779184832514,19984839314374658,19984774889865218,19984787774767106,19984800659668994,19984809249603586,19984830724440066,19984740530126850,19984860789211138,19984822134505474,20266327178936320,20547862281322496,20547943884718081,20547819331584000,20547965360406529,20547853690011648,20547754906877952,20547742021386240,20547694777008128,20547827921911808,20547905230798849,20547956770865153,20547969654063105,20547832215830528,20547823625568256,20547939594665985,20547857985044480,20547948180013057,20547961065635841,20547952474390529,20829444630773761,20829307192541184,20829418866409473,20829337258033152,20829380207509505,20829436042346497,20829440337117185,20829332961755136,20829294308294656,20829216998096896,20829423156723713,20829302898622464,20829169753718784,20829328666722304,20829431747575809,20829427451101185,20829298602278912,20829229883588608,21110709159591936,21392330160930817,21392257145962496,21392385995767809,21392355931127809,21392351635439617,21392222786486272,21392390290538497,21392209901256704,21392179837009920,21392304395452417,21392368814850049,21392373110145025,21392364520538113,21392166951518208,21392287211454464,21392248555700224,21392360225505281,21392394584195073,21392282915176448,21392244261715968,21392252852043776,21392239966945280,21392278620143616,21392377404522497,21392218490863616,21392381700997121,21392119707140096,21392214195830784,21673646228242432,21955391782453250,21955146969317378,21955370313187329,21955056775004162,21955134084415490,21955125494480898,21955052485541888,21955164149186562,22236536052318208,22236596175699968,22518101223407616,22799576193892354,23081051170537474,23362586276397056,23362599161561088,23362672175677441,23362590571560960,23362594866397184,23362667880906753,23362637822754817,23362624937918465,23643906634022914,23643983943434242,23925428858585090,23925450333421570,23925510462963714,23925488988127234,23925394498846722,23925437448519682,23925501873029122,23925381613944834,23925424563617794,23925403088781314,23925420268650498,23925506167996418,23925458923356162,23925377318977538,23925415973683202,23925716621393922,23925480398192642,23925467513290754,23925471808258050,23925398793814018,23925411678715906,23925390203879426,23925433153552386,24206933903998976,24488331568283650,24488657988878337,24488408877694978,24769858083487746,24769875263356930,24769853788520450,24769815133814786,24770141551329282,24769806543880194,24769926802964482,24769892443226114,24769931097931778,24769845198585858,24769840903618562,24769913918062594,24769905328128002,24769836608651266,24769823723749378,24769862378455042,24769883853291522,24769802248912898,24769849493553154,24769828018716674,24769896738193410,24769819428782082,24769935392899074,25051367420002306,25051410369675266,25051350240133122,25051324470329346,25051401779740674,25051328765296642,25051298700525570,25051337355231234,25051315880394754,25051311585427458,25051277225689090,25051294405558274,25051406074707970,25051380304904194,25051388894838786,25051371714969602,25051616528105474,25051302995492866,25051320175362050,25051333060263938,25051281520656386,25051290110590978,25051358830067714,25333091504685058,25332752202268674,25332855281483778,25332842396581890,25332881051287554,25332769382137858,25332799446908930,25332803741876226,25332756497235970,25332795151941634,25332846691549186,25332808036843522,25332765087170562,25332812331810818,25332833806647298,25332790856974338,25332773677105154,25332876756320258,25332885346254850,25332825216712706,25332777972072450,25332786562007042,25332863871418370,25614398975246336,25614394680082432,25614386090082304,25614424751800321,25614467694592001,25614390385246208,25614471989362689,25895779464380416,25895822413856768,25895977031892993,25895964147908609,25895955563151361,25895981328367617,25895929788301313,25895959852875777,25895719334510592,25895968442220545,25895766578888704,25895843889086464,25895994211565569,25895852479414272,25895886838824960,25895972737515521,25895818118234112,25895989917908993,25895882542546944,25895813823201280,25895985623138305,25895848183070720,25895839594315776,25895878247514112,25895856773332992,25895809528627200,26177297390567424,26177469188276225,26177241555599360,26177447714226177,26177361815535616,26177439124619265,26177404765011969,26177323159781376,26177288799911936,26177434829586433,26177452008603649,26177318865797120,26177456305078273,26177331750043648,26177426239520769,26177293094944768,26177379000320001,26177353224224768,26177314571026432,26177430535208961,26177357519257600,26177284505337856,26177464894619649,26177460599848961,26177254441091072,26177194311221248,26177443418931201,26177327456124928,26458785252573186,26458776662638594,26458695058259970,26458763777736706,26458707943161858,26458712238129154,26458664995258368,26458690763292674,26458780957605890,26458733712965634,26458656403554306,26458991411003394,26458703648194562,26458755187802114,26458746597867522,26458669290160128,26458652108587010,26458725123031042,26458699353227266,26458686468325378,26740230164709378,26740238754643970,26740466387910658,26740208689872898,26740200099938306,26740165740199938,26740127085494274,26740174330134530,26740221574774786,26740178625101826,26740251639545858,26740139971969024,26740182920069122,26740187215036418,26740131380461570,26740260229480450,26740144266870784,26740255934513154,26740170035167234,26740161445232642,27021696551157762,27021657896452098,27021683666255874,27021614948679680,27021636421615618,27021726615928834,27021619243581440,27021602061877250,27021730910896130,27021675076321282,27021941364293634,27021640716582914,27021649306517506,27021606356844546,27021653601484802,27021713731026946,27021662191419394,27021645011550210,27021705141092354,27021735205863426,27303137168392194,27303132873424898,27303158643228674,27303081333817346,27303188707999746,27303119988523010,27303128578457602,27303205887868930,27303124283490306,27303094220292096,27303150053294082,27303077038850050,27303111398588418,27303171528130562,27303115693555714,27303416341266434,27303089925390336,27303201592901634,27303180118065154,27303210182836226,27584569197002752,27584599260004354,27584663684513794,27584590670069762,27584586375102466,27584607849938946,27584633619742722,27584556310331394,27584646504644610,27584594965037058,27584564902100992,27584891317780482,27584655094579202,27584552015364098,27584603554971650,27584625029808130,27584685159350274,27584680864382978,27584676569415682,27584612144906242,27866069941878786,27866078531813378,27866039878811648,27866031287173122,27866087121747970,27866130071420930,27866138661355522,27866366294622210,27866061351944194,27866121481486338,27866065646911490,27866155841224706,27866151546257410,27866074236846082,27866108596584450,27866160136192002,27866026992205826,27866044173713408,27866082826780674,27866100006649858,28147678061199360,28147772551200769,28147682356232192,28147781142052865,28147617931919360,28147768255905793,28147652293099520,28147763961593857,28147729601986561,28147789731594241,28147643702771712,28147755376967681,28147759666561025,28147566392573952,28147622227542016,28147647996755968,28147579278065664,28147656587018240,28147519148195840,28147785436823553,28147794025250817,28147613636886528,28147776845578241,28147686652510208,28147609342312448,28147639408001024,28429015600660482,28428989830856706,28429011305693186,28429002716151808,28429088615104514,28429071435235330,28428976945954818,28428981240922114,28429080025169922,28428998421315584,28429316248371202,28429049960398850,28428994125824002,28429028485562370,28429105794973698,28429058550333442,28429019895627778,28429067140726784,28429101500006402,28429037075496962,28429024190595074,28429110089940994,28429032780529666,28710542117437440,28710499167240194,28710494872272898,28710791225016322,28710580771618818,28710490577305602,28710477692862464,28710469102469122,28710555001815042,28710563591749634,28710503462207490,28710576476651522,28710512052142082,28710456217567234,28710524937043970,28710533526978562,28710464807501826,28710486282338306,28710451922599938,28710473398026240,28710546411880450,28710585066586114,28710507757174786,28992004208197632,28991944078327808,28992206072184833,28992047157673984,28991991322705920,28992077223231488,28992184596692993,28992111582642176,28992218955382785,28992072926887936,28992042862051328,28992038567018496,28992107286364160,28992193186037761,28992102991331328,28992210366955521,28992154532118529,28992081517150208,28992214661726209,28992064338132992,28992034272444416,28992180307165185,28992188891725825,28992068632903680,28992197481332737,28992201775710209,29273483479678978,29273401875300354,29273530724319234,29273406170267650,29273504954515458,29273741177716738,29273513544450050,29273526429351938,29273496364580866,29273535019286530,29273474889744386,29273462007267328,29554949866586114,29554876852142082,29554979931357186,29554932688224256,29554928393388032,29555001406193666,29554988521291778,29555005701160962,29554881147109378,29554936981684226,29554958456520706,29555216154558466,29554919803256832,29554911213453312,29554915508551680,29554924098551808,29554971341422594,29555009996128258,29836480679444482,29836424844869634,29836691132841986,29836364715327490,29836403370033154,29836373305262082,29836377600229378,29836484974411778,29836390485131266,29836399075065858,29836386190163970,29836369010294786,29836407665000450,29836446319706114,29836476384477186,29836351830425602,29836454909640706,29836463499575298,29836433434804226,29836394780098562,29836442024738818,29836381895196674,29836411959967746,29836356125392898,30117899825446912,30399555185868801,30399482169917440,30399366206259200,30399550890180609,30399503651241985,30399585250508801,30399589545279489,30399477874884608,30399572364886017,30399486466195456,30399593838936065,30399568069591041,30399529415671809,30399409155997696,30399452106784768,30399580955738113,30399456400703488,30399447810441216,30399443516456960,30399318961881088,30399563775279105,30399422041227264,30399417745604608,30399559480246273,30399374795538432,30399439221686272,30399576659263489,30399413450571776,30399379091750912,30680922787151872,30680927083495424,30680961442906112,30680884132708352,30681047341596673,30681064521990145,30680793938591744,30680841182969856,30680918493167616,30681068815646721,30681051635974145,30681004392382465,30681055932448769,30681030162579457,30681034456956929,30680952851595264,30681025872658433,30680914198396928,30680888427282432,30681043046301697,30681038751989761,30680931377414144,30680957146628096,30680854068461568,30681060227219457,30680892722315264,30680897017937920,30962256029941762,30962324749418498,30962363404124162,30962333339353090,30962591037390850,30962251734974466,30962346224254978,31243894214295552,31243971523575809,31243885624295424,31243898509459456,31243967228805121,31243889919459328,31243924286537729,31525352013627392,31525429322514433,31525313357414400,31525321948069888,31525278998593536,31525472271728641,31525309062840320,31525266113101824,31525356307546112,31525382076760064,31525403558281217,31525377781727232,31525485157351425,31525343423299584,31525450797023233,31525347717283840,31525480862580737,31525317652447232,31525476566106113,31525218868723712,31525386373038080,31525455092711425,31525493745778689,31525489452122113,31525339128528896,31525463682121729,31525459387088897,31525467976433665,31806758275973120,32088220360572928,32088465180983297,32088233245802498,32088155936391170,32369626620624898,32369652390428674,32369699635068930,32369721109905410,32369643800494082,32369656685395970,32369755469643778,32369660980363266,32369965923041282,32369716814938114,32369729699840002,32369648095461378,32369682455199746,32369686750167042,32369678160232450,32369669570297858,32369751174676482,32369665275330562,32369708225003522,32369759764611074,32369639505526786,32369630915592194,32369738289774594,32369673865265154,32651428019372033,32651183202172930,32651105896890368,32932675362947072,32932645290704896,33214124563234818,33214184692776962,33214051548790786,33214055843758082,33214176102842370,33214163217940482,33214146038071298,33214180397809666,33214390851207170,33214133153169410,33495599546630144,33777083106656258,33777113171427330,33777130351296514,33777134646263810,33777340804694018,33777095991558146,33777001502277634,33777074516721666,33777005797244930,33777126056329218,34058699824037889,34058609623236610,34058558083629058,34058570968530946,34058605334691840,34058815781666818,34058480774217730,34058601033302018,34058588148400130,34058476479250434,34058549493694466,34339994407337986,34339951457665026,34340041651978242,34340033062043650,34340007292239874,34339981522436098,34340290760081410,34339972932501506,34339964342566914,34339977227468802,34340054536880130,34340076011716610,34340080306683906,34340024472109058,34339985817403394,34340045946945538,34340011587207170,34340084601651202,34339968637534210,34339990112370690,34340002997272578,34340020177469442,34339998702305282,34340063126814722,34339955752632322,34621520928505856,34902905703759874,34903240711208962,34902995898073090,34902901408792578,34903013077942274,34902983013171202,34902974423236610,35184475169226754,35184445104390144,35465963029921794,35466190663188482,35747334936068096,36028805617942528,36029110560555009,36028882919620610,36310280590196738,36310357899608066,36592021852520449,36592030443372545,36591953139924993,36591978903306241,36592004673503233,36591931657551872,36591862938206208,36592043326570497,36591905888337920,36592017557225473,36591927362519040,36591858643632128,36591867233239040,36591901594419200,36591893004091392,36591871528861696,36592039032913921,36592000377815041,36591815693893632,36591935953829888,36591888709320704,36592034738143233,36591828579385344,36591768449515520,36591897298075648,36592013262913537,36592008967880705,36592026146897921,36873363686031360,36873479656308737,36873303556096000,36873501123608577,36873505420083201,36873406634262528,36873514009624577,36873376571129856,36873367980802048,36873509714853889,36873518303281153,36873380865048576,36873337914916864,36873492533936129,36873488239624193,36873453880016897,36873372274786304,36873483944591361,36873402339229696,36873410930540544,36873243426226176,36873290670604288,36873333620342784,36873346505572352,36873496829231105,36873342209949696,37154769944576002,37154800009347074,37436446782652417,37436433898012673,37436193379647488,37436463963045889,37436326524551168,37436317934223360,37436292163371008,37436352292651008,37436468256702465,37436403833438209,37436322228207616,37436313639452672,37436455373504513,37436459668275201,37436451077029889,37436429609795585,37436330818469888,37436253509517312,37436360883961856,37436442487357441,37436287868338176,37436296458993664,37436240624025600,37436356587683840,37436283573764096,37436438193045505,37717724190801922,37717775730409474,37717762845507586,37717651176357890,37717732780736514,37717780025376770,37717745665638402,37717784320344066,37717990478774274,37717655471325186,37999392440778753,37999379557056513,37999233527185408,37999276477972480,37999383851433985,37999396736073729,37999203462938624,37999405326925825,37999263592873984,37999388146466817,37999272181628928,37999302246072320,37999375261368321,37999280771891200,37999237821759488,37999143333068800,37999353786859521,37999246412414976,37999306541105152,37999242116792320,37999310837383168,37999418210123777,37999267887644672,37999413916467201,37999328023674881,37999190577446912,37999401030451201,37999409621696513,38280772927225856,38280845941342209,38280760042061824,38280768632061952,38280764337225728,38280798705483777,38280841646571521,38562080400801794,38562157710213122,38843709995483136,38843718585483264,38843714290647040,38843722880647168,38843795894763521,38843791599992833,38843748658970625,39125030357172226,39125107666583554,39406625590411266,39406595525640194,39406840338776066,39406574050803714,39406634180345858,39406505331326978,39406501036359682,39406582640738306,39406629885378562,39406612705509378,39688109157384194,39687980308365314,39688070502678530,39688087682547714,39688100567449602,39688315315814402,39688049027842050,39688057617776642,39687976013398018,39688104862416898,39969524011827200,40251024750084098,40250994685181952,40532405237645314,40532469661892608,40532482547056642,40813987589259266,40814009064095746,40813957524488194,40813880215076866,40814215222525954,40813948934553602,40814000474161154,40814004769128450,40813875920109570,40813970409390082,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_63(_x_63)=parser.popstack().value { _x_63 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_56(_x_56)=parser.popstack().value { _x_56 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Decl::Var{_item0_:_item0_,id:id,ty:ty,expr:expr} }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<FunType<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut params = if let RetTypeEnum::Enumvariant_66(_x_66)=parser.popstack().value { _x_66 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Decl::Fun{_item0_:_item0_,id:id,params:params,ty:ty,expr:expr} }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  _item1_ }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_57(_x_57)=parser.popstack().value { _x_57 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Type::Int(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Type::Bool(_item0_) }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Type::Unit(_item0_) }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Type::String(_item0_) }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()};  Type::Array(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_60(_x_60)=parser.popstack().value { _x_60 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()};  FunType::SingleParam{ty:ty,ret:ret} }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_58(_x_58)=parser.popstack().value { _x_58 } else {<TypeList<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  FunType::MultiParam{ty:ty,ret:ret} }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Vec<LC<Type<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()};  TypeList::TypeList(_item0_,_item1_) }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  _item1_ }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
 Vec::new() }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<Vec<LC<Type<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Chain(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  _item1_ }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::Let{_item0_:_item0_,id:id,ty:ty,expr:parser.lbx(5,expr)} }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut lhs = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<Lhs<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::Set{_item0_:_item0_,lhs:parser.lbx(1,lhs),expr:parser.lbx(3,expr)} }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::While{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,expr:parser.lbx(3,expr)} }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut init = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut size = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::New{_item0_:_item0_,ty:ty,size:parser.lbx(3,size),init:parser.lbx(5,init)} }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut els = if let RetTypeEnum::Enumvariant_61(_x_61)=parser.popstack().value { _x_61 } else {<Else<'lt>>::default()}; let mut then = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::If{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,then:parser.lbx(3,then),els:parser.lbx(4,els)} }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Else::Else(_item0_,parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Unit }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Add(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Sub(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Mul(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  Expr::Pow(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_69(_x_69)=parser.popstack().value { _x_69 } else {<ExprList<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::FunCall(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<Lhs<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::Id(_item0_) }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  Expr::Paren(parser.lbx(1,_item1_)) }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Lhs::Id(_item0_) }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_62(_x_62)=parser.popstack().value { _x_62 } else {<Lhs<'lt>>::default()};  Lhs::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ExprList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()};  ExprList(parser.lbx(0,_item0_),_item1_,) }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<()>::default()};  _item1_ }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<i64>::default()};  Expr::Num(_item0_) }

fn _semaction_rule_72_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::String(_item0_) }

fn _semaction_rule_73_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::True(_item0_) }

fn _semaction_rule_74_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::False(_item0_) }

fn _semaction_rule_75_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::Null(_item0_) }

fn _semaction_rule_76_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_44(_x_44)=parser.popstack().value { _x_44 } else {<&'lt str>::default()};  Expr::Unit(_item0_) }

fn _semaction_rule_77_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(78,146,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_56(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_63(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_66(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_6_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_44(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_57(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ArrayType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("SingleParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MultiParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_60(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_58(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_21_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_61(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_62(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_69(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_68_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_69_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_69_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1773 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_76(Vec<LC<Expr<'lt>>>),
  Enumvariant_75(Expr<'lt>),
  Enumvariant_66(ParamList<'lt>),
  Enumvariant_56(Vec<LC<Decl<'lt>>>),
  Enumvariant_60(FunType<'lt>),
  Enumvariant_0(Program<'lt>),
  Enumvariant_57(Vec<LC<&'lt str>>),
  Enumvariant_72(Vec<LC<Type<'lt>>>),
  Enumvariant_63(Decl<'lt>),
  Enumvariant_58(TypeList<'lt>),
  Enumvariant_61(Else<'lt>),
  Enumvariant_69(ExprList<'lt>),
  Enumvariant_62(Lhs<'lt>),
  Enumvariant_44(&'lt str),
  Enumvariant_74(()),
  Enumvariant_78(Type<'lt>),
  Enumvariant_20(i64),
  Enumvariant_2((usize,usize)),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct rustlrlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> rustlrlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> rustlrlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["_WILDCARD_TOKEN_",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')',':','%','=','|',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#"||"#,"OR"),(r#":"#,"COLON"),(r#"%"#,"MOD"),(r#"="#,"ASSIGN"),(r#"|"#,"PIPE"),] {lexnames.insert(k,v);}
    stk.add_custom("WHILE", r"\bwhile\b");
    stk.add_custom("LET", r"\blet\b");
    stk.add_custom("SET", r"\bset\b");
    stk.add_custom("IF", r"\bif\b");
    stk.add_custom("THEN", r"\bthen\b");
    stk.add_custom("ELSE", r"\belse\b");
    stk.add_custom("DO", r"\bdo\b");
    stk.add_custom("NEW", r"\bnew\b");
    stk.add_custom("TRUE", r"\btrue\b");
    stk.add_custom("FALSE", r"\bfalse\b");
    stk.add_custom("NULL", r"\bnull\b");
    stk.add_custom("UNIT", r"\bunit\b");
    stk.add_custom("TINT", r"\bInt\b");
    stk.add_custom("TBOOL", r"\bBool\b");
    stk.add_custom("TSTRING", r"\bString\b");
    stk.add_custom("TUNIT", r"\bUnit\b");
    stk.add_custom("Id", r"[a-zA-Z_][a-zA-Z0-9'_]*");
    stk.set_line_comment("--");
    rustlrlexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for rustlrlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Custom("W", WHILE)          => Some(TerminalToken::from_raw(token,"WHILE",RetTypeEnum::Enumvariant_44( WHILE
))),
      RawToken:: Custom("LET", LET)          => Some(TerminalToken::from_raw(token,"LET",RetTypeEnum::Enumvariant_44( LET
))),
      RawToken:: Custom("SET", SET)          => Some(TerminalToken::from_raw(token,"SET",RetTypeEnum::Enumvariant_44( SET
))),
      RawToken:: Custom("IF", IF)            => Some(TerminalToken::from_raw(token,"IF",RetTypeEnum::Enumvariant_44( IF
))),
      RawToken:: Custom("THEN", THEN)        => Some(TerminalToken::from_raw(token,"THEN",RetTypeEnum::Enumvariant_44( THEN
))),
      RawToken:: Custom("ELSE", ELSE)        => Some(TerminalToken::from_raw(token,"ELSE",RetTypeEnum::Enumvariant_44( ELSE
))),
      RawToken:: Custom("DO", DO)            => Some(TerminalToken::from_raw(token,"DO",RetTypeEnum::Enumvariant_44( DO
))),
      RawToken:: Custom("NEW", NEW)          => Some(TerminalToken::from_raw(token,"NEW",RetTypeEnum::Enumvariant_44( NEW
))),
      RawToken:: Custom("TRUE", TRUE)        => Some(TerminalToken::from_raw(token,"TRUE",RetTypeEnum::Enumvariant_44( TRUE
))),
      RawToken:: Custom("FALSE", FALSE)      => Some(TerminalToken::from_raw(token,"FALSE",RetTypeEnum::Enumvariant_44( FALSE
))),
      RawToken:: Custom("NULL", NULL)        => Some(TerminalToken::from_raw(token,"NULL",RetTypeEnum::Enumvariant_44( NULL
))),
      RawToken:: Custom("UNIT", UNIT)        => Some(TerminalToken::from_raw(token,"UNIT",RetTypeEnum::Enumvariant_44( UNIT
))),
      RawToken:: Custom("TINT", TINT)        => Some(TerminalToken::from_raw(token,"TINT",RetTypeEnum::Enumvariant_44( TINT
))),
      RawToken:: Custom("TBOOL", TBOOL)      => Some(TerminalToken::from_raw(token,"TBOOL",RetTypeEnum::Enumvariant_44( TBOOL
))),
      RawToken:: Custom("TSTRING", TSTRING)  => Some(TerminalToken::from_raw(token,"TSTRING",RetTypeEnum::Enumvariant_44( TSTRING
))),
      RawToken:: Custom("TUNIT ", TUNIT)     => Some(TerminalToken::from_raw(token,"TUNIT",RetTypeEnum::Enumvariant_44( TUNIT
))),
      RawToken:: Custom("Id", id)  => Some(TerminalToken::from_raw(token,"Id",RetTypeEnum::Enumvariant_44( id
))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"Num",RetTypeEnum::Enumvariant_20( n
))),
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"Str",RetTypeEnum::Enumvariant_44(_tt))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_44(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
