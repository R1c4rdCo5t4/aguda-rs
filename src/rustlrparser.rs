//Parser generated by rustlr for grammar rustlr
    
#![allow(unused_variables)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(unused_parens)]
#![allow(unused_mut)]
#![allow(unused_imports)]
#![allow(unused_assignments)]
#![allow(dead_code)]
#![allow(unreachable_patterns)]
#![allow(irrefutable_let_patterns)]
use std::rc::Rc;
use std::cell::RefCell;
extern crate rustlr;
use rustlr::{Tokenizer,TerminalToken,BaseParser,BaseProduction,Stateaction,decode_action};
use rustlr::{StrTokenizer,RawToken,LexSource};
use std::collections::{HashMap,HashSet};
use rustlr::LBox;
use crate::rustlr_ast::*;

static SYMBOLS:[&'static str;81] = ["_WILDCARD_TOKEN_",";",",","->","+","-","*","/","^","==","!=","<","<=",">",">=","&&","!","[","]","(",")","COLON","MOD","PIPE","ASSIGN","OR","WHILE","LET","SET","IF","THEN","ELSE","DO","NEW","TRUE","FALSE","NULL","UNIT","TINT","TBOOL","TSTRING","TUNIT","Id","Num","Str","Program","Decl","Type","Expr","ParamList","TypeList","ExprList","FunType","Else","Lhs","SingleParam","MultiParam","ArrayType","BaseType","Chain","Stmt","Or","And","Comp","AddSub","MulDiv","Pow","Primary","Literal","Unary","NEWRENT_1_0","NEWSEQNT_6_0","NEWRENT_7_1","NEWSEQNT_21_0","NEWRENT_22_1","NEWSEQNT_26_0","NEWRENT_27_1","NEWSEQNT_68_0","NEWRENT_69_1","START","EOF"];

static TABLE:[u64;1773] = [115964182530,343597449218,193273659393,300647776257,281590941089792,281672545402881,281818574094338,563293550804995,844540894380034,844768527646722,1126080295796736,1407465078325248,1407456488325120,1689030249414656,1689060314251265,1970573945798657,1970488046518272,1970526701355009,1970492341747712,1970496636518400,1970500931289088,1970569651093505,2251885713489922,2251808404078594,2252109052444673,2533360690921472,2814758357893122,2814835667304450,2814822782402562,2814762652860418,2814852847173634,3096327823622146,3096297758851074,3096233334341634,3096310643752962,3096237629308930,3377772735692802,3377712606150658,3377785620594690,3377708311183362,3377802800463874,3659260597501954,3659277777371138,3659187583057922,3659183288090626,3659247712600066,3940722689638400,3940752754475008,4222137536217090,4222197665759234,4222133241249794,4222210550661122,4222227730530306,4503702707372034,4503672642600962,4503608218091522,4503685527502850,4503612513058818,4785160503754754,4785083195457536,4785379548135425,5066639776612352,5348101868486656,5629581141606400,5629688514674688,5629787299971073,5629521011539968,5629757235003393,5629568255524864,5629624091475968,5629619795984384,5629658451345408,5629774414413825,5629611205591040,5629765825265665,5629641271410688,5629795889119233,5629778708856833,5629684221214720,5629705695199233,5629645564739584,5629791594020865,5629649860493312,5629731464806401,5629770118856705,5629654155853824,5629615501475840,5629752939380737,5629783004938241,5629679924805632,5629761529839617,5910983101382658,5911060410793986,6192629879734272,6474087673888768,6474126331346945,6474096263888896,6474160691216385,6474100558659584,6474173573169153,6474164986314753,6474006072459264,6474091969118208,6474147806248961,6474169278464001,6755485341384706,6755408031973378,6755412326940674,6755502521253890,6755472456482818,7037218019934210,7036878717517826,7036917372223490,7036925962158082,7036951731961858,7036900192354306,7036895897387010,7036930257125378,7036934552092674,7037003271569410,7037007566536706,7036904487321602,7036968911831042,7036960321896450,7036913077256194,7036891602419714,7036908782288898,7036990386667522,7036981796732930,7036883012485122,7036973206798338,7037011861504002,7036938847059970,7036921667190786,7318400937951232,7318357987033090,7318388053114880,7318435296444418,7318482541084674,7318478246117378,7318392348278784,7318456771280898,7318396643311616,7318353692065794,7318413821607938,7318465361215490,7318405233049600,7318426706509826,7318486836051970,7318692994482178,7318409528082432,7318448181346306,7599845849300994,7599832964399106,7599875914072066,7599884504006658,7599957518450690,7599863029170178,7599910273810434,7599888798973954,7599918864859136,7599953223483394,7599901683875842,7599850145251328,7599867324137474,7599923158712322,7599940338581506,7599854440284160,7599931748646914,7599871619104770,7599841554333698,7599961813417986,7600167971848194,7599828669431810,7599880209039362,7881368069210112,7881587113656321,7881458265030656,7881479738490880,7881484034899968,7881488328359936,7881531278491649,7881595705098241,7881320825225216,7881380955291648,7881591407706113,7881449674178560,7881453969539072,7881445378424832,8162834458869762,8162903178346498,8162808689065986,8162778624294914,8162782919262210,8162860228673538,8163117926711298,8162881703510018,8162830163902466,8162804394098690,8162821573967874,8162795804164098,8162825868935170,8162873113575426,8162868818608130,8162907473313794,8162838753837058,8162890293444610,8162817279000578,8162791509196802,8162911768281090,8162812984033282,8162800099131394,8162851638738946,8444275075186690,8444343794663426,8444309434925058,8444266485252098,8444326614794242,8444300844990466,8444305139957762,8444335204728834,8444313729892354,8444382449369090,8444322320023554,8444287960088578,8444592902766594,8444283665121282,8444386744336386,8444365269499906,8444253600350210,8444296550023170,8444279370153986,8444292255055874,8444378154401794,8444348089630722,8444257895317506,8444330910220288,8444356679565314,8444270780219394,8725810181570562,8725775821832194,8725840246341634,8725754346995714,8725745757061122,8725741462093826,8725750052028418,8725780116799490,8725818771505154,8725732872159234,8725784411766786,8725788706734082,8725823066472450,8726067879608322,8725762936930306,8725767231897602,8725728577191938,8725861721178114,8725853131243522,8725801591635970,8725771526864898,8725758641963010,8725831656407042,8725857426210818,9007276565725186,9007298040561666,9007207846248450,9007285155659778,9007542853697538,9007315220430850,9288803084140546,9288721479761922,9288678530088962,9288700004925442,9288738659631106,9288811674075138,9288730069696514,9288773019369474,9288751544532994,9289017832505346,9288717184794626,9288734364663810,9288807379107842,9288708595777536,9288691414990850,9288790199238658,9288768724402178,9288704299892738,9288712889827330,9288781609304066,9288682825056258,9288725774729218,9288760134467586,9288695709958146,9570260879540224,9570295238688768,9570230815555584,9570428382806017,9570338188623872,9570329598754816,9570290945359872,9570432678887425,9570411203788801,9570436973920257,9570299534442496,9570217929474048,9570415499214849,9570419792805889,9570381138755585,9570406910853121,9570269469933568,9570308125294592,9570303829803008,9570170685489152,9570445563068417,9570441267970049,9570424088363009,9570273765425152,9570265175425024,9570333895163904,9851671432593410,9851632777887746,9851710087299074,9851662842658818,9851684317495298,9851667137626114,9851731562135554,9851680022528002,9851641369526272,9851967785336834,9851701497364482,9851740152070146,9851688612462594,9851645664428032,9851761626906626,9851675727560706,9851753036972034,9851628482920450,9851757331939330,9851722972200962,10133172180877312,10414707287130114,10414634272686082,10414711582097410,10414681517326338,10414621387784194,10414917740527618,10414599912947714,10414595617980418,10414608502882306,10414690107260930,10414672927391746,10414638567653378,10414702992162818,10414629977718786,10414625682751490,10414668632424450,10414604207915010,10414591323013122,10414612797849602,10414651452555266,10414578438111234,10414582733078530,10414660042489858,10414617092816898,10696070592331776,10696229505597440,10696199441285120,10696130722398208,10696208032137216,10696336880762881,10696117836316672,10696341174812673,10696233802006528,10696238095466496,10696195145531392,10696281045598209,10696345472663553,10696203736645632,10977640056029186,10977867689295874,11259084970131458,11259003365752834,11259132214771714,11259097855033346,11259076380196866,11259136509739010,11259127919804418,11259342668169218,11259115034902530,11259007660720130,11259106447589376,11540654438809600,11540705978482689,11821957613551618,11822275444539393,11821953318584322,11822026333028354,11822034922962946,11822047807864834,11822292621000706,11822064987734018,12103458363211778,12103449773277186,12103471248113666,12103462658179074,12103428298440706,12103552852492290,12103475543080962,12103466953146370,12103441183342594,12103488427982850,12103432593408002,12103767600857090,12103445478309890,12103518492753922,12103539967590402,12103479838048258,12103561442426882,12103454068244482,12103557147459586,12103509902819330,12103531377655810,12103522787721218,12103501312884738,12103484133015554,12384907568742402,12384937633513474,12384954813382658,12384941928480770,12384929043578882,12384993468088322,12384976288219138,12384903273775106,12385014942924802,12384997763055618,12384916158676994,12384963403317250,12385027827826690,12384950518415362,12384959108349954,12384924748611586,12384984878153730,12384946223448066,12385242576191490,12385006352990210,12385032122793986,12385036417761282,12384920453644290,12666472740093954,12666408315584514,12666429790420994,12666489919963138,12666511394799618,12666404020617218,12666459855192066,12666391135715330,12666425495453698,12666434085388290,12666717553229826,12666395430682626,12666507099832322,12666468445126658,12666451265257474,12666382545780738,12666416905519106,12666502804865026,12666481330028546,12666412610551810,12666421200486402,12666438380355586,12666378250813442,12666399725649922,12948033615691776,12948132399415297,12948102333857793,12948080859283457,12948119513333761,12947994959216640,12948128103333889,12947964895952896,12947990665887744,12948145283596289,12948140988497921,12947930536083456,12948110924316673,12948003550330880,12947969190461440,12947960600068096,12947917650001920,12947973485953024,12948123808890881,12947999254970368,12948029319282688,12948106629480449,12948136694448129,12948007845822464,12948055092363265,12948037909151744,12947870406017024,12948115219742721,13229439872008194,13229431282073602,13229457051877378,13229328202858498,13229401217302530,13229461346844674,13229409807237122,13229388335218688,13229422692139010,13229667505274882,13229332497825794,13229452756910082,13510979276111872,13792531562299393,13792385530200064,13792415596019712,13792553033465857,13792462839283712,13792342580133888,13792389826084864,13792355466215424,13792570213728257,13792540149874689,13792394120593408,13792548739022849,13792557329547265,13792454249414656,13792432775954432,13792424185102336,13792428480462848,13792544443465729,13792561624580097,13792398416084992,13792295336148992,13792458545823744,13792565918629889,13792505789415425,13792535854448641,13792419889348608,14073920635076608,14073916340305920,14073950704500737,14073912045076480,14073993649651713,14073997944356865,14073924929847296,14355279651799042,14355258176962562,14355240997093378,14355228112191490,14355322601472002,14355361256177666,14355262471929858,14355309716570114,14355266766897154,14355283946766338,14355232407158786,14355339781341186,14355331191406594,14355249587027970,14355288241733634,14355352666243074,14355245292060674,14355253881995266,14355318306504706,14355567414607874,14355301126635522,14355356961210370,14355275356831746,14355271061864450,14636741743280130,14636806167789570,14636836232560642,14636724563410946,14636703088574466,14636763218116610,14636793282887682,14636750333214722,14636715973476354,14636720268443650,14636728858378242,14636797577854978,14636758923149314,14636737448312834,14636814757724162,14636784692953090,14636754628182018,14636776103018498,14636831937593346,14637042390990850,14636827642626050,14636746038247426,14636733153345538,14636707383541762,14918259665403906,14918182355992578,15199661632847872,15199721758064640,15481226803937280,15762701776060418,16044241177280512,16044275541671937,16044245472051200,16044288426639361,16044318486626305,16044236882051072,16044322781331457,16044249766821888,16325651729547266,16607302800572417,16607173952208896,16607182543060992,16607178247569408,16607255556521985,16607208312930304,16607307096653825,16607212606390272,16607311391686657,16607105233321984,16607204016521216,16607298509668353,16607315685736449,16607045103255552,16607169656455168,16607092347240448,16607319980834817,16888790662447105,16888794957545473,16888773486444545,16888567323951104,16888657519771648,16888786368397313,16888520079966208,16888678993231872,16888687583100928,16888644633165824,16888580210032640,16888653224280064,16888730533232641,16888683289640960,16888782073364481,16888648928919552,16888777777283073,17170248463220737,17170158266351616,17170128200990720,17170269934256129,17170205509943297,17169995056676864,17170257050075137,17170132496482304,17170153969942528,17170119609876480,17170261345107969,17170055186743296,17170252753993729,17170042300661760,17170265639157761,17170162559811584,17170123905630208,17451680486653953,17451594586587136,17451727730704385,17451633243062272,17451740615868417,17451517277372416,17451637536522240,17451607473192960,17451530163453952,17451736321818625,17451732026785793,17451470033387520,17451744910966785,17451598882340864,17451628946653184,17451723439996929,17451603177701376,17733219887677441,17733207003496449,17733073859051520,17733069563297792,17733108219772928,17732992254083072,17733005140164608,17733155463364609,17732945010098176,17733078154412032,17733211298529281,17733112513232896,17733215592579073,17733082449903616,17733198416773121,17733103923363840,17733202707415041,18014548835762176,18014677684125697,18014553131122688,18014467230793728,18014587489943552,18014480116875264,18014673393549313,18014686275239937,18014583196483584,18014557426614272,18014419986808832,18014690569289729,18014630440075265,18014578900074496,18014544540008448,18014694864388097,18014681980207105,18295894963519488,18296169841098753,18296058173194240,18295942207504384,18296032403324928,18295955093585920,18296161251950593,18296165546000385,18296019516719104,18296028107833344,18296053876785152,18296105416785921,18296156960260097,18296023812472832,18296062466654208,18577631937036289,18577580393496577,18577417184215040,18577498789183488,18577528853495808,18577644817809409,18577533149904896,18577640522711041,18577430070296576,18577537443364864,18577494493429760,18577503084544000,18577369940230144,18577636228661249,18577507380035584,18859012420075520,18858969470140416,18858892160925696,18858982356746240,18859119794520065,18859008126615552,18858844916940800,18859111205371905,18859003830206464,18858905047007232,18859055370207233,18859115499421697,18859106913812481,18858973765894144,18858978061254656,19140349959667714,19140319894896642,19140337074765826,19140307009994754,19140354254635010,19140405794242562,19140431564046338,19140345664700418,19140642017443842,19140328484831234,19140384319406082,19140358549602306,19140392909340674,19140414384177154,19140332779798530,19140397204307970,19140362844569602,19140427269079042,19140324189863938,19140435859013634,19140375729471490,19140302715027458,19140341369733122,19140315599929346,19421992442789889,19422043977678849,19422069747941377,19422065452843009,19421893654806528,19421915130232832,19422048273235969,19422035388661761,19421932310167552,19421928014675968,19421855000428544,19422056863760385,19422052567678977,19421842114347008,19421889360297984,19421923719315456,19421794870362112,19422061158793217,19422005323628545,19421897950298112,19421962373496832,19421958080036864,19421885064413184,19422039684087809,19421979557953537,19422031093825537,19422026798202881,19421953783627776,19421919423561728,19703394400272384,19703536135503873,19703428760338432,19703329977139200,19703531844141057,19703402991386624,19703480300339201,19703269847072768,19703540429553665,19703544724652033,19703398696026112,19703407286878208,19703437350207488,19703317091057664,19703433056747520,19984860792029184,20266486088925185,20266348649447424,20266494678073345,20266490382974977,20266477502726145,20266344353693696,20266387303628800,20266267044478976,20266357240299520,20266481793892353,20266383010168832,20266352944807936,20266378713759744,20266219800494080,20266430253760513,20266279930560512,20547905230471169,20547754907271168,20547969654784001,20547961065635841,20547742021189632,20547694777204736,20547952479502337,20547819330404352,20547965359685633,20547853690470400,20547956770603009,20547862280339456,20547832217010176,20547857986879488,20547827921518592,20547823626158080,20829401681756161,20829414567641089,20829337257050112,20829272833851392,20829431747313665,20829169753915392,20829423156789249,20829354441834497,20829307193720832,20829216997900288,20829259947966464,20829380207181825,20829290013786112,20829427451232257,20829302898229248,20829418861232129,20829328667181056,20829298602868736,20829444631494657,20829268538359808,20829332963590144,20829436042346497,20829294307115008,20829405977378817,20829229883981824,20829410272215041,20829440336396289,20829264243851264,21110679091675138,21110653321871362,21110730631282690,21110700566511618,21110670501740546,21110640436969474,21110752106119170,21110657616838658,21110666206773250,21110722041348098,21110739221217282,21110717746380802,21110627552067586,21110631847034882,21110760696053762,21110756401086466,21110709156446210,21110683386642434,21110661911805954,21110644731936770,21110674796707842,21110649026904066,21110687681609730,21110966854483970,21392278620602368,21392394584915969,21392390289817601,21392385995767809,21392257147142144,21392377404653569,21392368814653441,21392244260536320,21392119707336704,21392373110210561,21392330160603137,21392166951321600,21392248556290048,21392282917011456,21392179837403136,21392287210471424,21392381700734977,21392252851650560,21392364524863489,21673676290195458,21673646225424386,21955151269658624,21955121204822016,22236845289766913,22236621946028034,22236600471191554,22236527462252544,22236609061126146,22236639125897218,22236866759163906,22236531751714818,22518084043407360,22799653504155648,22799765173370881,22799760879321089,22799756584288257,22799619144089600,22799747993763841,22799623439843328,22799494590889984,22799769468469249,22799541834874880,22799554720956416,22799743703777281,22799752288206849,22799627735203840,22799657800564736,22799662094024704,22799632030695424,22799705044156417,23081038291927040,23362551923408896,23643971065610240,23925549114720256,23925622129229825,23925574891405313,23925617834524673,23925544819949568,23925540525178880,23925536229949440,24207105697906689,24207002618757120,24207140056924161,24207144352022529,24207079927709697,24206972554379264,24207028387708928,24206998323396608,24207122877317121,24207032684118016,24206916718428160,24206929604509696,24207131467841537,24206959668494336,24207036977577984,24207006914248704,24207118581760001,24206968258887680,24207127171760129,24206994027642880,24206989734313984,24206869474443264,24207109992742913,24207054163148801,24207101402284033,24207114288168961,24207135762874369,24206963964379136,24488408874614786,24488640809074689,24488331565203458,24488395989516288,24769883857616896,25051616527515650,25051410369085442,25051277225099266,25051380304314370,25051371714379778,25051388894248962,25051358829477890,25051324469739522,25051406074118146,25051315879804930,25051294406803456,25051350239543298,25051337354641410,25051290111901696,25051328764706818,25051281520066562,25051401779150850,25051311584837634,25051333059674114,25051320174772226,25332825216057346,25332799446253570,25332855280828418,25332863870763010,25332769383514112,25332833805991938,25332876755664898,25332808036188162,25332795151286274,25332786561351682,25332765088612352,25332881050632194,25332846690893826,25332812331155458,25332790856318978,25332756496580610,25332803741220866,25333091504029698,25332885345599490,25332752201613314,25614231473553410,25614261538324482,25614244360224768,25614274423226370,25614356027604994,25614360322572290,25614351732637698,25614283013160962,25614338847735810,25614265833291778,25614566481002498,25614300193030146,25614278718193666,25614240065323008,25614330257801218,25614308782964738,25614227178586114,25614270128259074,25614287308128258,25614321667866626,25895749400002562,25895702155362306,25895706450329602,25895753694969858,25895813824512002,25896041457778690,25895805234577410,25895745105035266,25895736515100674,25895796644642818,25895831004381186,25895719336935424,25895740810067970,25895775169806338,25895783759740930,25895762284904450,25895835299348482,25895757989937154,25895826709413890,25895715042033664,26177224376451074,26177177131810818,26177250146254850,26177310275796994,26177258736189442,26177516434227202,26177305980829698,26177288800960514,26177232966385666,26177190018744320,26177301685862402,26177194313646080,26177271621091330,26177220081483778,26177211491549186,26177237261352962,26177181426778114,26177280211025922,26177215786516482,26177228671418370,26458725123031042,26458703648194562,26458690763292674,26458707943161858,26458755187802114,26458664995454976,26458763777736706,26458695058259970,26458652108587010,26458712238129154,26458746597867522,26458669290356736,26458780957605890,26458656403554306,26458776662638594,26458785252573186,26458686468325378,26458991411003394,26458699353227266,26458733712965634,26740187215364098,26740165740527618,26740255934840834,26740200100265986,26740174330462210,26740217280135170,26740178625429506,26740208690200578,26740139970723842,26740182920396802,26740152855625730,26740148560658434,26740466388238338,26740161445560322,26740230165037058,26740144265691138,26740260229808130,26740238754971650,26740170035494914,26740127085821954,26740251639873538,26740131380789250,26740221575102466,27021692256911362,27021653602205698,27021636422336514,27021675077042178,27021627832401922,27021614947500034,27021602062598146,27021705141813250,27021683666976770,27021640717303810,27021730911617026,27021726616649730,27021662192140290,27021619242467330,27021713731747842,27021657897172994,27021735206584322,27021606357565442,27021696551878658,27021623537434626,27021941365014530,27021649307238402,27021645012271106,27303089924276226,27303098514210818,27303171528654850,27303115694080002,27303167233687554,27303111399112706,27303128578981890,27303205888393218,27303158643752962,27303150053818370,27303210183360514,27303180118589442,27303137168916482,27303124284014594,27303094219243522,27303188708524034,27303201593425922,27303077039374338,27303081334341634,27303132873949186,27303119989047298,27303102809178114,27303416341790722,27584633624788992,27866108598222850,27866357709668353,27866031288811522,28147540624343042,28147549214277634,28147592163950594,28147523444473858,28147514854539266,28147562099179522,28147626523688962,28147519149506562,28147501969637378,28147557804212226,28147613638787074,28147583574016002,28147605048852482,28147635113623554,28147553509244930,28147596458917890,28147841272053762,28147527739441154,28147574984081410,28147630818656258,28147506264604674,28147536329375746,28147544919310338,28429084319154176,28429234643402753,28429153038368768,28429157334777856,28429269002682369,28429264707584001,28429097205039104,28429230353743873,28429260413534209,28429041369088000,28429204578369537,28429127269416960,28428994125103104,28429161628237824,28429247527976961,28429238938828801,28429122974056448,28429088615038976,28429092909547520,28429251822419969,28429243232419841,28429114384973824,28429131564908544,28429256118501377,28429118678302720,28429054255169536,28710477693583360,28710486282403842,28710503462273026,28710512052207618,28710451922665474,28710563591815170,28710499167305730,28710524937109506,28710791225081858,28710494872338434,28710555001880578,28710464807567362,28710456217632770,28710507757240322,28710490577371138,28710533527044098,28710542118158336,28710546411945986,28710580771684354,28710473398550528,28710585066651650,28710576476717058,28710469102534658,28992038568460290,28991926899310594,28991987028852738,28992008503689218,28991948375261184,28992051453362178,28991961259048962,28992060043296770,28992021388591106,28991931194277890,28991978438918146,28992017094868992,28991974143950850,28991952670294016,28991965554016258,28992266201726978,28991969848983554,28991944079179778,28992029978525698,28991939784212482,28992055748329474,28991982733885442,28991999913754626,29273474895314944,29554971341291522,29554958456389634,29554949866455042,29555005701029890,29554876852011010,29554979931226114,29555216154427394,29555009995997186,29554936984436736,29554988521160706,29554881146978306,29555001406062594,29836527921922048,29836489268527104,29836553697820673,29836605232119809,29836369008656384,29836472088592384,29836639591137281,29836532218331136,29836506448461824,29836609526956033,29836429138722816,29836536511791104,29836497857609728,29836600936497153,29836643886235649,29836613822382081,29836579461922817,29836622411530241,29836618115973121,29836459202707456,29836493561856000,29836635297087489,29836631002054657,29836467793100800,29836626705973249,29836502152970240,29836416252641280,29836463498592256,30118011488501760,30118007195041792,30118002898632704,30117938475302912,30118088799092737,30118110273798145,30118080214204417,30118093092683777,30118054438633473,30117942769811456,30117904115433472,30117977129680896,30117843985367040,30118097388240897,30118105978765313,30118084503666689,30118101682683905,30117981425172480,30117964245237760,30117972834320384,30118118862946305,30117934179418112,30117947065303040,30117968538566656,30117891229351936,30118114567847937,30399306076520450,30399374795997186,30399383385931778,30399396270833666,30399641083969538,30399301781553154,30399413450702850,30680793938788352,30680892723232768,30681068816367617,30680961441923072,30681030162251777,30681025872723969,30681060227219457,30680952852054016,30680927083102208,30681034457088001,30681043046105089,30681064521269249,30680897018724352,30680914198659072,30681047341662209,30680884132839424,30680888428724224,30681051636105217,30680918491987968,30680854068854784,30681038752514049,30680957148463104,30680922787741696,30681004392054785,30680841182773248,30680931378593792,30681055932186625,30962591039684610,30962277507072002,30962273212104706,30962290391973890,30962303276875778,30962307571843074,30962286097006594,30962333341646850,30962363406417922,30962346226548738,30962251737268226,30962376291319810,30962380586287106,30962298981908482,30962256032235522,30962324751712258,30962384881254402,30962311866810370,30962341931581442,30962264622170114,30962268917137410,30962294686941186,30962281802039298,30962354816483330,31244066014822402,31243773958356992,31243786841948162,31243821201686530,31243799726850050,31243726712406018,31243829791621122,31243808316784642,31243782548488192,31243761073520640,31243731007373314,31243765368684544,31243838381555714,31243859856392194,31243778253455360,31243855561424898,31243769663717376,31243851266457602,31525442205712385,31525446500417537,31525369191137280,31525360601137152,31525373485907968,31525364896366592,31525399263313921,31806831285436416,31806904298897409,31806968723210241,31806792630075392,31806857055305728,31806693845630976,31806951542947841,31806942952947713,31806753975697408,31806852758896640,31806947248504833,31806938659356673,31806861348765696,31806784039682048,31806818398830592,31806796925566976,31806788335566848,31806826989944832,31806930074664961,31806814105501696,31806934363930625,31806822694584320,31806960134062081,31806741089615872,31806964428111873,31806955839029249,32088259016392704,32088422225215489,32088297671294976,32088301966655488,32088271902277632,32088332032016384,32088327735607296,32088306262147072,32088216066326528,32088293375541248,32088405045805057,32088413636067329,32088263312277504,32088224655998976,32088417929658369,32088379275608065,32088426519658497,32088400750182401,32088228952408064,32088435110772737,32088409340641281,32088439404822529,32088289082212352,32088267606786048,32088336325476352,32088353511833601,32088430815739905,32088168822341632,32088443699920897,32369695337414656,32369725402120194,32651213262815234,32651440896081922,32932885816213505,32932658175803394,32932580873601024,33214060145344512,33495548002304002,33495526527467522,33495582362042370,33495638196617218,33495530822434818,33495565182173186,33495651081519106,33495552297271298,33495560887205890,33495599541911554,33495569477140482,33495655376486402,33495608131846146,33495586657009666,33495556592238594,33495578067075074,33495543707336706,33495616721780738,33495573772107778,33495629606682626,33495539412369410,33495865829883906,33495621016748034,33495659671453698,33777083109015554,33777005803864064,33777327926476801,34058476478988290,34058609622974466,34058480773955586,34058558083366914,34058570968268802,34058815781404674,34058588148137986,34058549493432322,34058601033039874,34058605328007170,34339994407337986,34339985817403394,34339998702305282,34340020177469442,34340290760081410,34339955752632322,34339951457665026,34340054536880130,34339972932501506,34339977227468802,34340063126814722,34340045946945538,34340041651978242,34340084601651202,34339990112370690,34340011587207170,34339964342566914,34340024472109058,34340002997272578,34339968637534210,34340080306683906,34339981522436098,34340007292239874,34340033062043650,34340076011716610,34621499453603840,34902983013433346,34902901409054722,34903034553040898,34902995898335234,34903240711471106,34902974423498754,34903030258073602,34903025963106306,34902905704022018,34903013078204418,35184470874783746,35184715687919618,35184449399947266,35184457989881858,35184376385503234,35184488054652930,35184380680470530,35465920081231872,35465950153605120,35747549684498433,35747459483500546,35747399353958402,35747455195152384,35747326339514370,35747407943892994,35747665641930754,35747420828794882,35747438008664066,35747450893565954,35747330634481666,36028895812255744,36310357896527874,36310280587116546,36591910181928960,36591918771929088,36591948844957697,36591991786504193,36591914477158400,36591923066699776,36591996081209345,36873471057920001,36873385158639616,36873389453869056,36873423821733889,36873466763214849,36873393748639744,36873398043410432,37154980396531713,37154963216859137,37154993280712705,37154984691564545,37154851547447296,37154808597184512,37154847252086784,37154958921433089,37154971806007297,37154885906268160,37154976100450305,37154855842938880,37154950330974209,37154821483069440,37154881612808192,37154842956333056,37154988985614337,37154928856399873,37154718403133440,37154877316399104,37154954626596865,37154778533199872,37154838663004160,37154967510450177,37154765647118336,37154817187577856,37154812893069312,37154903093477377,37436180497039362,37436257806450690,37717719897997314,37717749962768386,37999267886465024,37999280773070848,37999143333265408,37999276477579264,37999413915746305,37999203463331840,37999233527316480,37999383851565057,37999242117709824,37999405326663681,37999418210844673,37999237823201280,37999353786531841,37999272182218752,37999190577250304,37999306542940160,37999392440582145,37999310836400128,37999401030582273,37999379563282433,37999302246531072,37999263593136128,37999246413201408,37999396736139265,37999409621696513,37999388146991105,38280828763242497,38280708504027136,38280678440042496,38280665553960960,38280785813110784,38280781519650816,38280858828275713,38280884598407169,38280742863175680,38280871712849921,38280777223241728,38280747158929408,38280721389912064,38280888892456961,38280880303374337,38280854540058625,38280893187555329,38280876007292929,38280867417292801,38280738569846784,38280751454289920,38280863123701761,38280618309976064,38280717094420480,38280712799911936,38280755749781504,38562076106489858,38562080401457154,38562204955508738,38562209250476034,38562157710868482,38562415408906242,38562187775639554,38562200660541442,38562149120933890,38562170595770370,38843731473072128,38843705703202816,38843752953937921,38843825960714241,38843735766532096,38843808781697025,38843830256795649,38843697112350720,38843821666271233,38843804486860801,38843688523268096,38843692816596992,38843667047841792,38843568263397376,38843628393463808,38843662753333248,38843778716663809,38843800191238145,38843701407711232,38843658457448448,38843838845878273,38843727176663040,38843671343333376,38843843140976641,38843813077123073,38843834551828481,38843817370714113,38843615507382272,39125094778470400,39125030354092034,39125107663503362,39406599819952130,39406569755181056,39688057620004866,39687980310593538,39969579838799874,39969450989780994,39969575543832578,39969562658930690,39969532594159618,39969455284748290,39969584133767170,39969545479061506,39969524004225026,39969790292197378,40250930261786626,40251059110805506,40251037635969026,40251020456099842,40251050520870914,40250925966819330,40251265269235714,40250998981263362,40251054815838210,40251007571197954,40532473965248512,40813970409390082,40814000474161154,40813875920109570,40814215222525954,40814009064095746,40814004769128450,40813880215076866,40813987589259266,40813948934553602,40813957524488194,];


fn _semaction_rule_0_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Program<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<Vec<LC<Decl<'lt>>>>::default()};  Program(_item0_,) }

fn _semaction_rule_1_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
 Vec::new() }

fn _semaction_rule_2_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Decl<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_74(_x_74)=parser.popstack().value { _x_74 } else {<Decl<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_67(_x_67)=parser.popstack().value { _x_67 } else {<Vec<LC<Decl<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_3_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Decl::Var{_item0_:_item0_,id:id,ty:ty,expr:expr} }

fn _semaction_rule_4_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Decl<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item7_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<FunType<'lt>>::default()}; let mut _item5_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut params = if let RetTypeEnum::Enumvariant_76(_x_76)=parser.popstack().value { _x_76 } else {<ParamList<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Decl::Fun{_item0_:_item0_,id:id,params:params,ty:ty,expr:expr} }

fn _semaction_rule_5_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ParamList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Vec<LC<&'lt str>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  ParamList(_item0_,_item1_,) }

fn _semaction_rule_6_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> &'lt str {
let mut _item1_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  _item1_ }

fn _semaction_rule_7_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
 Vec::new() }

fn _semaction_rule_8_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<&'lt str>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_78(_x_78)=parser.popstack().value { _x_78 } else {<Vec<LC<&'lt str>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_9_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_10_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()};  _item0_ }

fn _semaction_rule_11_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::Int(_item0_) }

fn _semaction_rule_12_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::Bool(_item0_) }

fn _semaction_rule_13_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::Unit(_item0_) }

fn _semaction_rule_14_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Type::String(_item0_) }

fn _semaction_rule_15_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()};  Type::Array(parser.lbx(0,_item0_)) }

fn _semaction_rule_16_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_17_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_73(_x_73)=parser.popstack().value { _x_73 } else {<FunType<'lt>>::default()};  _item0_ }

fn _semaction_rule_18_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()};  FunType::SingleParam{ty:ty,ret:ret} }

fn _semaction_rule_19_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> FunType<'lt> {
let mut ret = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item3_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_72(_x_72)=parser.popstack().value { _x_72 } else {<TypeList<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  FunType::MultiParam{ty:ty,ret:ret} }

fn _semaction_rule_20_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> TypeList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<Vec<LC<Type<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()};  TypeList::TypeList(_item0_,_item1_) }

fn _semaction_rule_21_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Type<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  _item1_ }

fn _semaction_rule_22_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
 Vec::new() }

fn _semaction_rule_23_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Type<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_59(_x_59)=parser.popstack().value { _x_59 } else {<Vec<LC<Type<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_24_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_25_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Chain(parser.lbx(0,_item0_),_item1_) }

fn _semaction_rule_26_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  _item1_ }

fn _semaction_rule_27_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_28_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_29_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut id = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Let{_item0_:_item0_,id:id,ty:ty,expr:parser.lbx(5,expr)} }

fn _semaction_rule_30_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut lhs = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<Lhs<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Set{_item0_:_item0_,lhs:parser.lbx(1,lhs),expr:parser.lbx(3,expr)} }

fn _semaction_rule_31_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut expr = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::While{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,expr:parser.lbx(3,expr)} }

fn _semaction_rule_32_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item6_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut init = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item4_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut size = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut ty = if let RetTypeEnum::Enumvariant_64(_x_64)=parser.popstack().value { _x_64 } else {<Type<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::New{_item0_:_item0_,ty:ty,size:parser.lbx(3,size),init:parser.lbx(5,init)} }

fn _semaction_rule_33_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut els = if let RetTypeEnum::Enumvariant_75(_x_75)=parser.popstack().value { _x_75 } else {<Else<'lt>>::default()}; let mut then = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()}; let mut cond = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::If{_item0_:_item0_,cond:parser.lbx(1,cond),_item2_:_item2_,then:parser.lbx(3,then),els:parser.lbx(4,els)} }

fn _semaction_rule_34_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Else::Else(_item0_,parser.lbx(1,_item1_)) }

fn _semaction_rule_35_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Else<'lt> {
 Else::Unit }

fn _semaction_rule_36_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_37_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Or(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_38_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_39_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::And(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_40_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_41_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Eq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_42_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Neq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_43_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Lt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_44_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Leq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_45_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Gt(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_46_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Geq(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_47_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_48_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Add(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_49_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Sub(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_50_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_51_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Mul(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_52_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Div(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_53_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Mod(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_54_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_55_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  Expr::Pow(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_56_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_57_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  Expr::Not(parser.lbx(1,_item1_)) }

fn _semaction_rule_58_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  Expr::Neg(parser.lbx(1,_item1_)) }

fn _semaction_rule_59_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_60_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_49(_x_49)=parser.popstack().value { _x_49 } else {<ExprList<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::FunCall(_item0_,parser.lbx(2,_item2_)) }

fn _semaction_rule_61_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<Lhs<'lt>>::default()};  Expr::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_62_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Id(_item0_) }

fn _semaction_rule_63_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item2_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  Expr::Paren(parser.lbx(1,_item1_)) }

fn _semaction_rule_64_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  _item0_ }

fn _semaction_rule_65_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Lhs::Id(_item0_) }

fn _semaction_rule_66_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Lhs<'lt> {
let mut _item3_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item2_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item1_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_46(_x_46)=parser.popstack().value { _x_46 } else {<Lhs<'lt>>::default()};  Lhs::Index(parser.lbx(0,_item0_),parser.lbx(2,_item2_)) }

fn _semaction_rule_67_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> ExprList<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<Vec<LC<Expr<'lt>>>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()};  ExprList(parser.lbx(0,_item0_),_item1_,) }

fn _semaction_rule_68_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_68(_x_68)=parser.popstack().value { _x_68 } else {<()>::default()};  _item1_ }

fn _semaction_rule_69_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
 Vec::new() }

fn _semaction_rule_70_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Vec<LC<Expr<'lt>>> {
let mut _item1_ = if let RetTypeEnum::Enumvariant_70(_x_70)=parser.popstack().value { _x_70 } else {<Expr<'lt>>::default()}; let mut _item0_ = if let RetTypeEnum::Enumvariant_55(_x_55)=parser.popstack().value { _x_55 } else {<Vec<LC<Expr<'lt>>>>::default()};  _item0_.push(parser.lc(1,_item1_)); _item0_ }

fn _semaction_rule_71_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_20(_x_20)=parser.popstack().value { _x_20 } else {<i64>::default()};  Expr::Num(_item0_) }

fn _semaction_rule_72_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::String(_item0_) }

fn _semaction_rule_73_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::True(_item0_) }

fn _semaction_rule_74_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::False(_item0_) }

fn _semaction_rule_75_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Null(_item0_) }

fn _semaction_rule_76_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> Expr<'lt> {
let mut _item0_ = if let RetTypeEnum::Enumvariant_77(_x_77)=parser.popstack().value { _x_77 } else {<&'lt str>::default()};  Expr::Unit(_item0_) }

fn _semaction_rule_77_<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>) -> () {
let mut _item0_ = if let RetTypeEnum::Enumvariant_0(_x_0)=parser.popstack().value { _x_0 } else {<Program<'lt>>::default()}; <()>::default()}

pub fn make_parser<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(tk:TT) -> BaseParser<'lt,RetTypeEnum<'lt>,(),TT>
{
 let mut parser1:BaseParser<'lt,RetTypeEnum<'lt>,(),TT> = BaseParser::new(78,146,tk);
 let mut rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("start");
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Program");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_0(_semaction_rule_0_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_1_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_1_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_67(_semaction_rule_2_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_3_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Decl");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_74(_semaction_rule_4_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ParamList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_76(_semaction_rule_5_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_6_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_77(_semaction_rule_6_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_7_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_7_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_78(_semaction_rule_8_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_9_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Type");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_10_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_11_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_12_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_13_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("BaseType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_14_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ArrayType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_15_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_16_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("FunType");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_17_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("SingleParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_18_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MultiParam");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_73(_semaction_rule_19_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("TypeList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_72(_semaction_rule_20_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_21_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_64(_semaction_rule_21_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_22_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_22_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_59(_semaction_rule_23_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Expr");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_24_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Chain");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_25_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_26_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_26_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_27_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_27_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_28_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_29_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_30_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_31_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_32_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_33_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_34_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Else");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_75(_semaction_rule_35_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Stmt");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_36_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_37_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Or");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_38_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_39_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("And");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_40_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_41_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_42_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_43_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_44_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_45_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_46_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Comp");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_47_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_48_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_49_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("AddSub");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_50_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_51_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_52_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_53_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("MulDiv");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_54_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_55_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Pow");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_56_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_57_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_58_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Unary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_59_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_60_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_61_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_62_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_63_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Primary");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_64_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_65_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Lhs");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_46(_semaction_rule_66_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("ExprList");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_49(_semaction_rule_67_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWSEQNT_68_0");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_68_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_69_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_69_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("NEWRENT_69_1");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_55(_semaction_rule_70_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_71_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_72_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_73_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_74_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_75_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("Literal");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_70(_semaction_rule_76_(parser)) };
 parser1.Rules.push(rule);
 rule = BaseProduction::<'lt,RetTypeEnum<'lt>,(),TT>::new_skeleton("START");
 rule.Ruleaction = |parser|{  RetTypeEnum::Enumvariant_68(_semaction_rule_77_(parser)) };
 parser1.Rules.push(rule);
 parser1.Errsym = "";
 parser1.resynch.insert(";");

 for i in 0..1773 {
   let symi = ((TABLE[i] & 0x0000ffff00000000) >> 32) as usize;
   let sti = ((TABLE[i] & 0xffff000000000000) >> 48) as usize;
   parser1.RSM[sti].insert(SYMBOLS[symi],decode_action(TABLE[i]));
 }

 for s in SYMBOLS { parser1.Symset.insert(s); }

 load_extras(&mut parser1);
 return parser1;
} //make_parser

pub fn parse_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse() {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_with public function

pub fn parse_train_with<'lt>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),rustlrlexer<'lt>>, parserpath:&str) -> Result<Program<'lt>,Program<'lt>>
{
  parser.tokenizer.shared_state = Rc::clone(&parser.shared_state);
  if let RetTypeEnum::Enumvariant_0(_xres_) = parser.parse_train(parserpath) {
     if !parser.error_occurred() {Ok(_xres_)} else {Err(_xres_)}
  } else { Err(<Program<'lt>>::default())}
}//parse_train_with public function

//Enum for return values 
pub enum RetTypeEnum<'lt> {
  Enumvariant_55(Vec<LC<Expr<'lt>>>),
  Enumvariant_75(Else<'lt>),
  Enumvariant_20(i64),
  Enumvariant_67(Vec<LC<Decl<'lt>>>),
  Enumvariant_46(Lhs<'lt>),
  Enumvariant_72(TypeList<'lt>),
  Enumvariant_64(Type<'lt>),
  Enumvariant_74(Decl<'lt>),
  Enumvariant_49(ExprList<'lt>),
  Enumvariant_59(Vec<LC<Type<'lt>>>),
  Enumvariant_68(()),
  Enumvariant_70(Expr<'lt>),
  Enumvariant_77(&'lt str),
  Enumvariant_73(FunType<'lt>),
  Enumvariant_0(Program<'lt>),
  Enumvariant_76(ParamList<'lt>),
  Enumvariant_78(Vec<LC<&'lt str>>),
  Enumvariant_2((usize,usize)),
}
impl<'lt> Default for RetTypeEnum<'lt> { fn default()->Self {RetTypeEnum::Enumvariant_0(<Program<'lt>>::default())} }


// Lexical Scanner using RawToken and StrTokenizer
pub struct rustlrlexer<'lt> {
   stk: StrTokenizer<'lt>,
   keywords: HashSet<&'static str>,
   lexnames: HashMap<&'static str,&'static str>,
   shared_state: Rc<RefCell<()>>,
}
impl<'lt> rustlrlexer<'lt> 
{
  pub fn from_str(s:&'lt str) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_str(s))
  }
  pub fn from_source(s:&'lt LexSource<'lt>) -> rustlrlexer<'lt>  {
    Self::new(StrTokenizer::from_source(s))
  }
  pub fn new(mut stk:StrTokenizer<'lt>) -> rustlrlexer<'lt> {
    let mut lexnames = HashMap::with_capacity(64);
    let mut keywords = HashSet::with_capacity(64);
    let shared_state = Rc::new(RefCell::new(<()>::default()));
    for kw in ["_WILDCARD_TOKEN_",] {keywords.insert(kw);}
    for c in [';',',','+','-','*','/','^','<','>','!','[',']','(',')',':','=','|','%',] {stk.add_single(c);}
    for d in ["->","==","!=","<=",">=","&&","||",] {stk.add_double(d);}
    for d in [] {stk.add_triple(d);}
    for (k,v) in [(r#":"#,"COLON"),(r#"="#,"ASSIGN"),(r#"||"#,"OR"),(r#"|"#,"PIPE"),(r#"%"#,"MOD"),] {lexnames.insert(k,v);}
    stk.add_custom("WHILE", r"\bwhile\b");
    stk.add_custom("LET", r"\blet\b");
    stk.add_custom("SET", r"\bset\b");
    stk.add_custom("IF", r"\bif\b");
    stk.add_custom("THEN", r"\bthen\b");
    stk.add_custom("ELSE", r"\belse\b");
    stk.add_custom("DO", r"\bdo\b");
    stk.add_custom("NEW", r"\bnew\b");
    stk.add_custom("TRUE", r"\btrue\b");
    stk.add_custom("FALSE", r"\bfalse\b");
    stk.add_custom("NULL", r"\bnull\b");
    stk.add_custom("UNIT", r"\bunit\b");
    stk.add_custom("TINT", r"\bInt\b");
    stk.add_custom("TBOOL", r"\bBool\b");
    stk.add_custom("TSTRING", r"\bString\b");
    stk.add_custom("TUNIT", r"\bUnit\b");
    stk.add_custom("Id", r"[a-zA-Z_][a-zA-Z0-9'_]*");
    stk.set_line_comment("--");
    rustlrlexer {stk,keywords,lexnames,shared_state,}
  }
}
impl<'lt> Tokenizer<'lt,RetTypeEnum<'lt>> for rustlrlexer<'lt>
{
   fn nextsym(&mut self) -> Option<TerminalToken<'lt,RetTypeEnum<'lt>>> {
    let tokopt = self.stk.next_token();
    if let None = tokopt {return None;}
    let token = tokopt.unwrap();
    match token.0 {
      RawToken::Alphanum(sym) if self.keywords.contains(sym) => {
        let truesym = self.lexnames.get(sym).unwrap_or(&sym);
        Some(TerminalToken::from_raw(token,truesym,<RetTypeEnum<'lt>>::default()))
      },
      RawToken:: Custom("WHILE", WHILE)      => Some(TerminalToken::from_raw(token,"WHILE",RetTypeEnum::Enumvariant_77( WHILE
))),
      RawToken:: Custom("LET", LET)          => Some(TerminalToken::from_raw(token,"LET",RetTypeEnum::Enumvariant_77( LET
))),
      RawToken:: Custom("SET", SET)          => Some(TerminalToken::from_raw(token,"SET",RetTypeEnum::Enumvariant_77( SET
))),
      RawToken:: Custom("IF", IF)            => Some(TerminalToken::from_raw(token,"IF",RetTypeEnum::Enumvariant_77( IF
))),
      RawToken:: Custom("THEN", THEN)        => Some(TerminalToken::from_raw(token,"THEN",RetTypeEnum::Enumvariant_77( THEN
))),
      RawToken:: Custom("ELSE", ELSE)        => Some(TerminalToken::from_raw(token,"ELSE",RetTypeEnum::Enumvariant_77( ELSE
))),
      RawToken:: Custom("DO", DO)            => Some(TerminalToken::from_raw(token,"DO",RetTypeEnum::Enumvariant_77( DO
))),
      RawToken:: Custom("NEW", NEW)          => Some(TerminalToken::from_raw(token,"NEW",RetTypeEnum::Enumvariant_77( NEW
))),
      RawToken:: Custom("TRUE", TRUE)        => Some(TerminalToken::from_raw(token,"TRUE",RetTypeEnum::Enumvariant_77( TRUE
))),
      RawToken:: Custom("FALSE", FALSE)      => Some(TerminalToken::from_raw(token,"FALSE",RetTypeEnum::Enumvariant_77( FALSE
))),
      RawToken:: Custom("NULL", NULL)        => Some(TerminalToken::from_raw(token,"NULL",RetTypeEnum::Enumvariant_77( NULL
))),
      RawToken:: Custom("UNIT", UNIT)        => Some(TerminalToken::from_raw(token,"UNIT",RetTypeEnum::Enumvariant_77( UNIT
))),
      RawToken:: Custom("TINT", TINT)        => Some(TerminalToken::from_raw(token,"TINT",RetTypeEnum::Enumvariant_77( TINT
))),
      RawToken:: Custom("TBOOL", TBOOL)      => Some(TerminalToken::from_raw(token,"TBOOL",RetTypeEnum::Enumvariant_77( TBOOL
))),
      RawToken:: Custom("TSTRING", TSTRING)  => Some(TerminalToken::from_raw(token,"TSTRING",RetTypeEnum::Enumvariant_77( TSTRING
))),
      RawToken:: Custom("TUNIT", TUNIT)      => Some(TerminalToken::from_raw(token,"TUNIT",RetTypeEnum::Enumvariant_77( TUNIT
))),
      RawToken:: Custom("Id", id)  => Some(TerminalToken::from_raw(token,"Id",RetTypeEnum::Enumvariant_77( id
))),
      RawToken:: Num(n)  => Some(TerminalToken::from_raw(token,"Num",RetTypeEnum::Enumvariant_20( n
))),
      RawToken::Strlit(_tt) => Some(TerminalToken::from_raw(token,"Str",RetTypeEnum::Enumvariant_77(_tt))),
      RawToken::Symbol(s) if self.lexnames.contains_key(s) => {
        let tname = self.lexnames.get(s).unwrap();
        Some(TerminalToken::from_raw(token,tname,<RetTypeEnum<'lt>>::default()))
      },
      RawToken::Symbol(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      RawToken::Alphanum(s) => Some(TerminalToken::from_raw(token,s,<RetTypeEnum<'lt>>::default())),
      _ => { let _rrodb=token.0.to_staticstr(); Some(TerminalToken::from_raw(token,_rrodb,<RetTypeEnum<'lt>>::default())) },
    }
  }
   fn linenum(&self) -> usize {self.stk.line()}
   fn column(&self) -> usize {self.stk.column()}
   fn position(&self) -> usize {self.stk.current_position()}
   fn current_line(&self) -> &str {self.stk.current_line()}
   fn get_line(&self,i:usize) -> Option<&str> {self.stk.get_line(i)}
   fn add_priority_symbol(&mut self, s:&'static str) {self.stk.add_priority_symbol(s);}
   fn get_slice(&self,s:usize,l:usize) -> &str {self.stk.get_slice(s,l)}
   fn transform_wildcard(&self,t:TerminalToken<'lt,RetTypeEnum<'lt>>) -> TerminalToken<'lt,RetTypeEnum<'lt>> { TerminalToken::new(t.sym,RetTypeEnum::Enumvariant_77(self.stk.current_text()),t.line,t.column) }
}//impl Tokenizer

fn load_extras<'lt,TT:Tokenizer<'lt,RetTypeEnum<'lt>>>(parser:&mut BaseParser<'lt,RetTypeEnum<'lt>,(),TT>)
{
}//end of load_extras: don't change this line as it affects augmentation
